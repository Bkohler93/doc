{
  "api/Npgsql.NpgsqlConnection.html": {
    "href": "api/Npgsql.NpgsqlConnection.html",
    "title": "Class NpgsqlConnection | Npgsql Documentation",
    "keywords": "Class NpgsqlConnection This class represents a connection to a PostgreSQL server. Inheritance System.Object System.MarshalByRefObject System.ComponentModel.Component System.Data.Common.DbConnection NpgsqlConnection Inherited Members System.Data.Common.DbConnection.System.Data.IDbConnection.BeginTransaction() System.Data.Common.DbConnection.System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel) System.Data.Common.DbConnection.System.Data.IDbConnection.CreateCommand() System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs) System.Data.Common.DbConnection.OpenAsync() System.Data.Common.DbConnection.StateChange System.ComponentModel.Component.Dispose() System.ComponentModel.Component.GetService(System.Type) System.ComponentModel.Component.ToString() System.ComponentModel.Component.CanRaiseEvents System.ComponentModel.Component.Events System.ComponentModel.Component.Site System.ComponentModel.Component.Container System.ComponentModel.Component.DesignMode System.ComponentModel.Component.Disposed System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.CreateObjRef(System.Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Npgsql Assembly :Npgsql.dll Syntax public sealed class NpgsqlConnection : DbConnection, IComponent, IDbConnection, IDisposable, ICloneable Constructors | Improve this Doc View Source NpgsqlConnection() Initializes a new instance of the NpgsqlConnection class. Declaration public NpgsqlConnection() | Improve this Doc View Source NpgsqlConnection(NpgsqlConnectionStringBuilder) Initializes a new instance of NpgsqlConnection with the given strongly-typed connection string. Declaration public NpgsqlConnection(NpgsqlConnectionStringBuilder builder) Parameters Type Name Description NpgsqlConnectionStringBuilder builder The connection used to open the PostgreSQL database. | Improve this Doc View Source NpgsqlConnection(String) Initializes a new instance of NpgsqlConnection with the given connection string. Declaration public NpgsqlConnection(string connectionString) Parameters Type Name Description System.String connectionString The connection used to open the PostgreSQL database. Fields | Improve this Doc View Source DefaultPort The default TCP/IP port for PostgreSQL. Declaration public const int DefaultPort = 5432 Field Value Type Description System.Int32 Properties | Improve this Doc View Source CommandTimeout Gets the time to wait while trying to execute a command before terminating the attempt and generating an error. Declaration public int CommandTimeout { get; } Property Value Type Description System.Int32 The time (in seconds) to wait for a command to complete. The default value is 20 seconds. | Improve this Doc View Source ConnectionString Gets or sets the string used to connect to a PostgreSQL database. See the manual for details. Declaration public override string ConnectionString { get; set; } Property Value Type Description System.String The connection string that includes the server name, the database name, and other parameters needed to establish the initial connection. The default value is an empty string. Overrides System.Data.Common.DbConnection.ConnectionString | Improve this Doc View Source ConnectionTimeout Gets the time to wait while trying to establish a connection before terminating the attempt and generating an error. Declaration public override int ConnectionTimeout { get; } Property Value Type Description System.Int32 The time (in seconds) to wait for a connection to open. The default value is 15 seconds. Overrides System.Data.Common.DbConnection.ConnectionTimeout | Improve this Doc View Source Database Gets the name of the current database or the database to be used after a connection is opened. Declaration public override string Database { get; } Property Value Type Description System.String The name of the current database or the name of the database to be used after a connection is opened. The default value is the empty string. Overrides System.Data.Common.DbConnection.Database | Improve this Doc View Source DataSource Gets the string identifying the database server (host and port) Declaration public override string DataSource { get; } Property Value Type Description System.String Overrides System.Data.Common.DbConnection.DataSource | Improve this Doc View Source DbProviderFactory DB provider factory. Declaration protected override DbProviderFactory DbProviderFactory { get; } Property Value Type Description System.Data.Common.DbProviderFactory Overrides System.Data.Common.DbConnection.DbProviderFactory | Improve this Doc View Source FullState Gets the current state of the connection. Declaration [Browsable(false)] public ConnectionState FullState { get; } Property Value Type Description System.Data.ConnectionState A bitwise combination of the System.Data.ConnectionState values. The default is Closed . | Improve this Doc View Source Host Backend server host name. Declaration [Browsable(true)] public string Host { get; } Property Value Type Description System.String | Improve this Doc View Source IntegratedSecurity Whether to use Windows integrated security to log in. Declaration public bool IntegratedSecurity { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Port Backend server port. Declaration [Browsable(true)] public int Port { get; } Property Value Type Description System.Int32 | Improve this Doc View Source PostgreSqlVersion Version of the PostgreSQL backend. This can only be called when there is an active connection. Declaration [Browsable(false)] public Version PostgreSqlVersion { get; } Property Value Type Description System.Version | Improve this Doc View Source ProcessID Process id of backend server. This can only be called when there is an active connection. Declaration [Browsable(false)] public int ProcessID { get; } Property Value Type Description System.Int32 | Improve this Doc View Source ProvideClientCertificatesCallback Selects the local Secure Sockets Layer (SSL) certificate used for authentication. Declaration public ProvideClientCertificatesCallback ProvideClientCertificatesCallback { get; set; } Property Value Type Description ProvideClientCertificatesCallback Remarks See | Improve this Doc View Source ServerVersion PostgreSQL server version. Declaration public override string ServerVersion { get; } Property Value Type Description System.String Overrides System.Data.Common.DbConnection.ServerVersion | Improve this Doc View Source State Gets whether the current state of the connection is Open or Closed Declaration [Browsable(false)] public override ConnectionState State { get; } Property Value Type Description System.Data.ConnectionState ConnectionState.Open, ConnectionState.Closed or ConnectionState.Connecting Overrides System.Data.Common.DbConnection.State | Improve this Doc View Source SupportsEStringPrefix Report whether the backend understands the string literal E prefix (>= 8.1). Declaration [Browsable(false)] public bool SupportsEStringPrefix { get; } Property Value Type Description System.Boolean | Improve this Doc View Source UseConformantStrings Report whether the backend is expecting standard conformant strings. In version 8.1, Postgres began reporting this value (false), but did not actually support standard conformant strings. In version 8.2, Postgres began supporting standard conformant strings, but defaulted this flag to false. As of version 9.1, this flag defaults to true. Declaration [Browsable(false)] public bool UseConformantStrings { get; } Property Value Type Description System.Boolean | Improve this Doc View Source UserCertificateValidationCallback Verifies the remote Secure Sockets Layer (SSL) certificate used for authentication. Ignored if TrustServerCertificate is set. Declaration public RemoteCertificateValidationCallback UserCertificateValidationCallback { get; set; } Property Value Type Description System.Net.Security.RemoteCertificateValidationCallback Remarks See | Improve this Doc View Source UserName User name. Declaration public string UserName { get; } Property Value Type Description System.String | Improve this Doc View Source UseSslStream If true, the connection will attempt to use SslStream instead of an internal TlsClientStream. Declaration public bool UseSslStream { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source BeginBinaryExport(String) Begins a binary COPY TO STDOUT operation, a high-performance data export mechanism from a PostgreSQL table. Declaration public NpgsqlBinaryExporter BeginBinaryExport(string copyToCommand) Parameters Type Name Description System.String copyToCommand A COPY TO STDOUT SQL command Returns Type Description NpgsqlBinaryExporter A NpgsqlBinaryExporter which can be used to read rows and columns Remarks See http://www.postgresql.org/docs/current/static/sql-copy.html . | Improve this Doc View Source BeginBinaryImport(String) Begins a binary COPY FROM STDIN operation, a high-performance data import mechanism to a PostgreSQL table. Declaration public NpgsqlBinaryImporter BeginBinaryImport(string copyFromCommand) Parameters Type Name Description System.String copyFromCommand A COPY FROM STDIN SQL command Returns Type Description NpgsqlBinaryImporter A NpgsqlBinaryImporter which can be used to write rows and columns Remarks See http://www.postgresql.org/docs/current/static/sql-copy.html . | Improve this Doc View Source BeginDbTransaction(IsolationLevel) Begins a database transaction with the specified isolation level. Declaration protected override DbTransaction BeginDbTransaction(IsolationLevel isolationLevel) Parameters Type Name Description System.Data.IsolationLevel isolationLevel The System.Data.IsolationLevel under which the transaction should run. Returns Type Description System.Data.Common.DbTransaction An System.Data.Common.DbTransaction object representing the new transaction. Overrides System.Data.Common.DbConnection.BeginDbTransaction(System.Data.IsolationLevel) Remarks Currently the IsolationLevel ReadCommitted and Serializable are supported by the PostgreSQL backend. There's no support for nested transactions. | Improve this Doc View Source BeginRawBinaryCopy(String) Begins a raw binary COPY operation (TO STDOUT or FROM STDIN), a high-performance data export/import mechanism to a PostgreSQL table. Note that unlike the other COPY API methods, BeginRawBinaryCopy(String) doesn't implement any encoding/decoding and is unsuitable for structured import/export operation. It is useful mainly for exporting a table as an opaque blob, for the purpose of importing it back later. Declaration public NpgsqlRawCopyStream BeginRawBinaryCopy(string copyCommand) Parameters Type Name Description System.String copyCommand A COPY TO STDOUT or COPY FROM STDIN SQL command Returns Type Description NpgsqlRawCopyStream A NpgsqlRawCopyStream that can be used to read or write raw binary data. Remarks See http://www.postgresql.org/docs/current/static/sql-copy.html . | Improve this Doc View Source BeginTextExport(String) Begins a textual COPY TO STDOUT operation, a data export mechanism from a PostgreSQL table. It is the user's responsibility to parse the textual input according to the format specified in copyToCommand . Declaration public TextReader BeginTextExport(string copyToCommand) Parameters Type Name Description System.String copyToCommand A COPY TO STDOUT SQL command Returns Type Description System.IO.TextReader A TextReader that can be used to read textual data. Remarks See http://www.postgresql.org/docs/current/static/sql-copy.html . | Improve this Doc View Source BeginTextImport(String) Begins a textual COPY FROM STDIN operation, a data import mechanism to a PostgreSQL table. It is the user's responsibility to send the textual input according to the format specified in copyFromCommand . Declaration public TextWriter BeginTextImport(string copyFromCommand) Parameters Type Name Description System.String copyFromCommand A COPY FROM STDIN SQL command Returns Type Description System.IO.TextWriter A TextWriter that can be used to send textual data. Remarks See http://www.postgresql.org/docs/current/static/sql-copy.html . | Improve this Doc View Source BeginTransaction() Begins a database transaction. Declaration public NpgsqlTransaction BeginTransaction() Returns Type Description NpgsqlTransaction A NpgsqlTransaction object representing the new transaction. Remarks Currently there's no support for nested transactions. Transactions created by this method will have Read Committed isolation level. | Improve this Doc View Source BeginTransaction(IsolationLevel) Begins a database transaction with the specified isolation level. Declaration public NpgsqlTransaction BeginTransaction(IsolationLevel level) Parameters Type Name Description System.Data.IsolationLevel level The System.Data.IsolationLevel under which the transaction should run. Returns Type Description NpgsqlTransaction A NpgsqlTransaction object representing the new transaction. Remarks Currently the IsolationLevel ReadCommitted and Serializable are supported by the PostgreSQL backend. There's no support for nested transactions. | Improve this Doc View Source ChangeDatabase(String) This method changes the current database by disconnecting from the actual database and connecting to the specified. Declaration public override void ChangeDatabase(string dbName) Parameters Type Name Description System.String dbName The name of the database to use in place of the current database. Overrides System.Data.Common.DbConnection.ChangeDatabase(System.String) | Improve this Doc View Source ClearAllPools() Clear all connection pools. Declaration public static void ClearAllPools() | Improve this Doc View Source ClearPool(NpgsqlConnection) Clear connection pool. Declaration public static void ClearPool(NpgsqlConnection connection) Parameters Type Name Description NpgsqlConnection connection | Improve this Doc View Source CloneWith(String) Clones this connection, replacing its connection string with the given one. This allows creating a new connection with the same security information (password, SSL callbacks) while changing other connection parameters (e.g. database or pooling) Declaration public NpgsqlConnection CloneWith(string connectionString) Parameters Type Name Description System.String connectionString Returns Type Description NpgsqlConnection | Improve this Doc View Source Close() Releases the connection to the database. If the connection is pooled, it will be made available for re-use. If it is non-pooled, the actual connection will be shutdown. Declaration public override void Close() Overrides System.Data.Common.DbConnection.Close() | Improve this Doc View Source CreateCommand() Creates and returns a NpgsqlCommand object associated with the NpgsqlConnection . Declaration public NpgsqlCommand CreateCommand() Returns Type Description NpgsqlCommand A NpgsqlCommand object. | Improve this Doc View Source CreateDbCommand() Creates and returns a System.Data.Common.DbCommand object associated with the System.Data.Common.DbConnection . Declaration protected override DbCommand CreateDbCommand() Returns Type Description System.Data.Common.DbCommand A System.Data.Common.DbCommand object. Overrides System.Data.Common.DbConnection.CreateDbCommand() | Improve this Doc View Source Dispose(Boolean) Releases all resources used by the NpgsqlConnection . Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing true when called from Dispose(); false when being called from the finalizer. Overrides System.ComponentModel.Component.Dispose(System.Boolean) | Improve this Doc View Source EnlistTransaction(Transaction) Enlist transation. Declaration public override void EnlistTransaction(Transaction transaction) Parameters Type Name Description System.Transactions.Transaction transaction Overrides System.Data.Common.DbConnection.EnlistTransaction(System.Transactions.Transaction) | Improve this Doc View Source GetSchema() Returns the supported collections Declaration public override DataTable GetSchema() Returns Type Description System.Data.DataTable Overrides System.Data.Common.DbConnection.GetSchema() | Improve this Doc View Source GetSchema(String) Returns the schema collection specified by the collection name. Declaration public override DataTable GetSchema(string collectionName) Parameters Type Name Description System.String collectionName The collection name. Returns Type Description System.Data.DataTable The collection specified. Overrides System.Data.Common.DbConnection.GetSchema(System.String) | Improve this Doc View Source GetSchema(String, String[]) Returns the schema collection specified by the collection name filtered by the restrictions. Declaration public override DataTable GetSchema(string collectionName, string[] restrictions) Parameters Type Name Description System.String collectionName The collection name. System.String [] restrictions The restriction values to filter the results. A description of the restrictions is contained in the Restrictions collection. Returns Type Description System.Data.DataTable The collection specified. Overrides System.Data.Common.DbConnection.GetSchema(System.String, System.String[]) | Improve this Doc View Source MapComposite<T>(String, INpgsqlNameTranslator) Maps a CLR type to a PostgreSQL composite type for use with this connection. Declaration public void MapComposite<T>(string pgName = null, INpgsqlNameTranslator nameTranslator = null)where T : new () Parameters Type Name Description System.String pgName A PostgreSQL type name for the corresponding enum type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to NpgsqlSnakeCaseNameTranslator Type Parameters Name Description T The .NET type to be mapped Remarks CLR fields and properties by string to PostgreSQL enum labels. The translation strategy can be controlled by the nameTranslator parameter, which defaults to NpgsqlSnakeCaseNameTranslator . You can also use the PgNameAttribute on your members to manually specify a PostgreSQL enum label. If there is a discrepancy between the .NET and database labels while a composite is read or written, an exception will be raised. Can only be invoked on an open connection; if the connection is closed the mapping is lost. To avoid mapping the type for each connection, use the MapCompositeGlobally<T>(String, INpgsqlNameTranslator) method. | Improve this Doc View Source MapCompositeGlobally<T>(String, INpgsqlNameTranslator) Maps a CLR type to a PostgreSQL composite type for use with all connections created from now on. Existing connections aren't affected. Declaration public static void MapCompositeGlobally<T>(string pgName = null, INpgsqlNameTranslator nameTranslator = null)where T : new () Parameters Type Name Description System.String pgName A PostgreSQL type name for the corresponding enum type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to NpgsqlSnakeCaseNameTranslator Type Parameters Name Description T The .NET type to be mapped Remarks CLR fields and properties by string to PostgreSQL enum labels. The translation strategy can be controlled by the nameTranslator parameter, which defaults to NpgsqlSnakeCaseNameTranslator . You can also use the PgNameAttribute on your members to manually specify a PostgreSQL enum label. If there is a discrepancy between the .NET and database labels while a composite is read or written, an exception will be raised. To map the type for a specific connection, use the MapEnum<TEnum>(String, INpgsqlNameTranslator) method. | Improve this Doc View Source MapEnum<TEnum>(String, INpgsqlNameTranslator) Maps a CLR enum to a PostgreSQL enum type for use with this connection. Declaration public void MapEnum<TEnum>(string pgName = null, INpgsqlNameTranslator nameTranslator = null)where TEnum : struct Parameters Type Name Description System.String pgName A PostgreSQL type name for the corresponding enum type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to NpgsqlSnakeCaseNameTranslator Type Parameters Name Description TEnum The .NET enum type to be mapped Remarks CLR enum labels are mapped by name to PostgreSQL enum labels. The translation strategy can be controlled by the nameTranslator parameter, which defaults to NpgsqlSnakeCaseNameTranslator . You can also use the PgNameAttribute on your enum fields to manually specify a PostgreSQL enum label. If there is a discrepancy between the .NET and database labels while an enum is read or written, an exception will be raised. Can only be invoked on an open connection; if the connection is closed the mapping is lost. To avoid mapping the type for each connection, use the MapEnumGlobally<TEnum>(String, INpgsqlNameTranslator) method. | Improve this Doc View Source MapEnumGlobally<TEnum>(String, INpgsqlNameTranslator) Maps a CLR enum to a PostgreSQL enum type for use with all connections created from now on. Existing connections aren't affected. Declaration public static void MapEnumGlobally<TEnum>(string pgName = null, INpgsqlNameTranslator nameTranslator = null)where TEnum : struct Parameters Type Name Description System.String pgName A PostgreSQL type name for the corresponding enum type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to NpgsqlSnakeCaseNameTranslator Type Parameters Name Description TEnum The .NET enum type to be mapped Remarks CLR enum labels are mapped by name to PostgreSQL enum labels. The translation strategy can be controlled by the nameTranslator parameter, which defaults to NpgsqlSnakeCaseNameTranslator . You can also use the PgNameAttribute on your enum fields to manually specify a PostgreSQL enum label. If there is a discrepancy between the .NET and database labels while an enum is read or written, an exception will be raised. To map the type for a specific connection, use the MapEnum<TEnum>(String, INpgsqlNameTranslator) method. | Improve this Doc View Source Open() Opens a database connection with the property settings specified by the ConnectionString . Declaration public override void Open() Overrides System.Data.Common.DbConnection.Open() | Improve this Doc View Source OpenAsync(CancellationToken) This is the asynchronous version of Open() . Declaration public override Task OpenAsync(CancellationToken cancellationToken) Parameters Type Name Description System.Threading.CancellationToken cancellationToken The cancellation instruction. Returns Type Description System.Threading.Tasks.Task A task representing the asynchronous operation. Overrides System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken) Remarks Do not invoke other methods and properties of the NpgsqlConnection object until the returned Task is complete. | Improve this Doc View Source ReloadTypes() Flushes the type cache for this connection's connection string and reloads the types for this connection only. Declaration public void ReloadTypes() | Improve this Doc View Source UnmapCompositeGlobally<T>(String, INpgsqlNameTranslator) Removes a previous global enum mapping. Declaration public static void UnmapCompositeGlobally<T>(string pgName, INpgsqlNameTranslator nameTranslator = null)where T : new () Parameters Type Name Description System.String pgName A PostgreSQL type name for the corresponding enum type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to NpgsqlSnakeCaseNameTranslator Type Parameters Name Description T | Improve this Doc View Source UnmapEnumGlobally<TEnum>(String, INpgsqlNameTranslator) Removes a previous global enum mapping. Declaration public static void UnmapEnumGlobally<TEnum>(string pgName = null, INpgsqlNameTranslator nameTranslator = null)where TEnum : struct Parameters Type Name Description System.String pgName A PostgreSQL type name for the corresponding enum type in the database. If null, the name translator given in nameTranslator will be used. INpgsqlNameTranslator nameTranslator A component which will be used to translate CLR names (e.g. SomeClass) into database names (e.g. some_class). Defaults to NpgsqlSnakeCaseNameTranslator Type Parameters Name Description TEnum | Improve this Doc View Source Wait() Waits until an asynchronous PostgreSQL messages (e.g. a notification) arrives, and exits immediately. The asynchronous message is delivered via the normal events ( Notification , Notice ). Declaration public void Wait() | Improve this Doc View Source Wait(Int32) Waits until an asynchronous PostgreSQL messages (e.g. a notification) arrives, and exits immediately. The asynchronous message is delivered via the normal events ( Notification , Notice ). Declaration public bool Wait(int timeout) Parameters Type Name Description System.Int32 timeout The time-out value, in milliseconds, passed to System.Net.Sockets.Socket.ReceiveTimeout . The default value is 0, which indicates an infinite time-out period. Specifying -1 also indicates an infinite time-out period. Returns Type Description System.Boolean true if an asynchronous message was received, false if timed out. | Improve this Doc View Source Wait(TimeSpan) Waits until an asynchronous PostgreSQL messages (e.g. a notification) arrives, and exits immediately. The asynchronous message is delivered via the normal events ( Notification , Notice ). Declaration public bool Wait(TimeSpan timeout) Parameters Type Name Description System.TimeSpan timeout The time-out value is passed to System.Net.Sockets.Socket.ReceiveTimeout . Returns Type Description System.Boolean true if an asynchronous message was received, false if timed out. | Improve this Doc View Source WaitAsync() Waits asynchronously until an asynchronous PostgreSQL messages (e.g. a notification) arrives, and exist immediately. The asynchronous message is delivered via the normal events ( Notification , Notice ). Declaration public Task WaitAsync() Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source WaitAsync(CancellationToken) Waits asynchronously until an asynchronous PostgreSQL messages (e.g. a notification) arrives, and exist immediately. The asynchronous message is delivered via the normal events ( Notification , Notice ). Declaration public Task WaitAsync(CancellationToken cancellationToken) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task Events | Improve this Doc View Source Notice Occurs on NoticeResponses from the PostgreSQL backend. Declaration public event NoticeEventHandler Notice Event Type Type Description NoticeEventHandler | Improve this Doc View Source Notification Occurs on NotificationResponses from the PostgreSQL backend. Declaration public event NotificationEventHandler Notification Event Type Type Description NotificationEventHandler Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Creates a closed connection with the connection string and authentication details of this message. Declaration object ICloneable.Clone() Returns Type Description System.Object Implements System.ICloneable.Clone()"
  },
  "api/NpgsqlTypes.NpgsqlDbType.html": {
    "href": "api/NpgsqlTypes.NpgsqlDbType.html",
    "title": "Enum NpgsqlDbType | Npgsql Documentation",
    "keywords": "Enum NpgsqlDbType Represents a PostgreSQL data type that can be written or read to the database. Used in places such as NpgsqlDbType to unambiguously specify how to encode or decode values. Namespace :NpgsqlTypes Assembly :Npgsql.dll Syntax public enum NpgsqlDbType Remarks See http://www.postgresql.org/docs/current/static/datatype.html Fields Name Description Abstime Corresponds to the obsolete PostgreSQL \"abstime\" type. Array Corresponds to the PostgreSQL \"array\" type, a variable-length multidimensional array of another type. This value must be combined with another value from NpgsqlDbType via a bit OR (e.g. NpgsqlDbType.Array | NpgsqlDbType.Integer) Bigint Corresponds to the PostgreSQL 8-byte \"bigint\" type. Bit Corresponds to the PostgreSQL \"bit\" type. Boolean Corresponds to the PostgreSQL \"boolean\" type. Box Corresponds to the PostgreSQL geometric \"box\" type. Bytea Corresponds to the PostgreSQL \"bytea\" type, holding a raw byte string. Char Corresponds to the PostgreSQL \"char(n)\"type. Cid Corresponds to the PostgreSQL \"cid\" type, an internal command identifier. Cidr Corresponds to the PostgreSQL \"cidr\" type, a field storing an IPv4 or IPv6 network. Circle Corresponds to the PostgreSQL geometric \"circle\" type. Citext Corresponds to the PostgreSQL \"citext\" type for the citext module. Composite Corresponds to the PostgreSQL \"composite\" type. Date Corresponds to the PostgreSQL \"date\" type. Double Corresponds to the PostgreSQL 8-byte floating-point \"double\" type. Enum Corresponds to the PostgreSQL \"enum\" type. Geometry The geometry type for postgresql spatial extension postgis. Hstore Corresponds to the PostgreSQL \"hstore\" type, a dictionary of string key-value pairs. Inet Corresponds to the PostgreSQL \"inet\" type. Int2Vector Corresponds to the PostgreSQL internal \"int2vector\" type. Integer Corresponds to the PostgreSQL 4-byte \"integer\" type. InternalChar Corresponds to the PostgreSQL \"char\" type. Interval Corresponds to the PostgreSQL \"interval\" type. Json Corresponds to the PostgreSQL \"json\" type, a field storing JSON in text format. Jsonb Corresponds to the PostgreSQL \"jsonb\" type, a field storing JSON in an optimized binary format. Line Corresponds to the PostgreSQL geometric \"line\" type. LSeg Corresponds to the PostgreSQL geometric \"lseg\" type. MacAddr Corresponds to the PostgreSQL \"macaddr\" type, a field storing a 6-byte physical address. Money Corresponds to the PostgreSQL \"money\" type. Name Corresponds to the PostgreSQL internal \"name\" type. Numeric Corresponds to the PostgreSQL arbitrary-precision \"numeric\" type. Oid Corresponds to the PostgreSQL \"oid\" type. Oidvector Corresponds to the PostgreSQL internal \"oidvector\" type. Path Corresponds to the PostgreSQL geometric \"path\" type. Point Corresponds to the PostgreSQL geometric \"point\" type. Polygon Corresponds to the PostgreSQL geometric \"polygon\" type. Range Corresponds to the PostgreSQL \"array\" type, a variable-length multidimensional array of another type. This value must be combined with another value from NpgsqlDbType via a bit OR (e.g. NpgsqlDbType.Array | NpgsqlDbType.Integer) Real Corresponds to the PostgreSQL floating-point \"real\" type. Refcursor Corresponds to the PostgreSQL \"refcursor\" type. Regtype Corresponds to the PostgreSQL \"regtype\" type, a numeric (OID) ID of a type in the pg_type table. Smallint Corresponds to the PostgreSQL 2-byte \"smallint\" type. Text Corresponds to the PostgreSQL \"text\" type. Tid Corresponds to the PostgreSQL \"tid\" type, a tuple id identifying the physical location of a row within its table. Time Corresponds to the PostgreSQL \"time\" type. Timestamp Corresponds to the PostgreSQL \"timestamp\" type. TimestampTZ Corresponds to the PostgreSQL \"timestamp with time zone\" type. TimeTZ Corresponds to the PostgreSQL \"time with time zone\" type. TsQuery Corresponds to the PostgreSQL \"tsquery\" type. TsVector Corresponds to the PostgreSQL \"tsvector\" type. Unknown A special value that can be used to send parameter values to the database without specifying their type, allowing the database to cast them to another value based on context. The value will be converted to a string and send as text. Uuid Corresponds to the PostgreSQL \"uuid\" type. Varbit Corresponds to the PostgreSQL \"varbit\" type, a field storing a variable-length string of bits. Varchar Corresponds to the PostgreSQL \"varchar\" type. Xid Corresponds to the PostgreSQL \"xid\" type, an internal transaction identifier. Xml Corresponds to the PostgreSQL \"xml\" type."
  },
  "api/NpgsqlTypes.NpgsqlInet.html": {
    "href": "api/NpgsqlTypes.NpgsqlInet.html",
    "title": "Struct NpgsqlInet | Npgsql Documentation",
    "keywords": "Struct NpgsqlInet Represents a PostgreSQL inet type, which is a combination of an IPAddress and a subnet mask. Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace :NpgsqlTypes Assembly :Npgsql.dll Syntax public struct NpgsqlInet : IEquatable<NpgsqlInet> Remarks http://www.postgresql.org/docs/current/static/datatype-net-types.html Constructors | Improve this Doc View Source NpgsqlInet(IPAddress) Declaration public NpgsqlInet(IPAddress address) Parameters Type Name Description System.Net.IPAddress address | Improve this Doc View Source NpgsqlInet(IPAddress, Int32) Declaration public NpgsqlInet(IPAddress address, int netmask) Parameters Type Name Description System.Net.IPAddress address System.Int32 netmask | Improve this Doc View Source NpgsqlInet(String) Declaration public NpgsqlInet(string addr) Parameters Type Name Description System.String addr Fields | Improve this Doc View Source Address Declaration public IPAddress Address Field Value Type Description System.Net.IPAddress | Improve this Doc View Source Netmask Declaration public int Netmask Field Value Type Description System.Int32 Methods | Improve this Doc View Source Equals(NpgsqlInet) Declaration public bool Equals(NpgsqlInet other) Parameters Type Name Description NpgsqlInet other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(NpgsqlInet, NpgsqlInet) Declaration public static bool operator ==(NpgsqlInet x, NpgsqlInet y) Parameters Type Name Description NpgsqlInet x NpgsqlInet y Returns Type Description System.Boolean | Improve this Doc View Source Explicit(NpgsqlInet to IPAddress) Declaration public static explicit operator IPAddress(NpgsqlInet x) Parameters Type Name Description NpgsqlInet x Returns Type Description System.Net.IPAddress | Improve this Doc View Source Implicit(IPAddress to NpgsqlInet) Declaration public static implicit operator NpgsqlInet(IPAddress ipaddress) Parameters Type Name Description System.Net.IPAddress ipaddress Returns Type Description NpgsqlInet | Improve this Doc View Source Inequality(NpgsqlInet, NpgsqlInet) Declaration public static bool operator !=(NpgsqlInet x, NpgsqlInet y) Parameters Type Name Description NpgsqlInet x NpgsqlInet y Returns Type Description System.Boolean"
  },
  "api/NpgsqlTypes.NpgsqlLine.html": {
    "href": "api/NpgsqlTypes.NpgsqlLine.html",
    "title": "Struct NpgsqlLine | Npgsql Documentation",
    "keywords": "Struct NpgsqlLine Represents a PostgreSQL line type. Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace :NpgsqlTypes Assembly :Npgsql.dll Syntax public struct NpgsqlLine : IEquatable<NpgsqlLine> Remarks See http://www.postgresql.org/docs/current/static/datatype-geometric.html Constructors | Improve this Doc View Source NpgsqlLine(Double, Double, Double) Declaration public NpgsqlLine(double a, double b, double c) Parameters Type Name Description System.Double a System.Double b System.Double c Properties | Improve this Doc View Source A Declaration public double A { get; set; } Property Value Type Description System.Double | Improve this Doc View Source B Declaration public double B { get; set; } Property Value Type Description System.Double | Improve this Doc View Source C Declaration public double C { get; set; } Property Value Type Description System.Double Methods | Improve this Doc View Source Equals(NpgsqlLine) Declaration public bool Equals(NpgsqlLine other) Parameters Type Name Description NpgsqlLine other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Parse(String) Declaration public static NpgsqlLine Parse(string s) Parameters Type Name Description System.String s Returns Type Description NpgsqlLine | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(NpgsqlLine, NpgsqlLine) Declaration public static bool operator ==(NpgsqlLine x, NpgsqlLine y) Parameters Type Name Description NpgsqlLine x NpgsqlLine y Returns Type Description System.Boolean | Improve this Doc View Source Inequality(NpgsqlLine, NpgsqlLine) Declaration public static bool operator !=(NpgsqlLine x, NpgsqlLine y) Parameters Type Name Description NpgsqlLine x NpgsqlLine y Returns Type Description System.Boolean"
  },
  "api/NpgsqlTypes.NpgsqlLSeg.html": {
    "href": "api/NpgsqlTypes.NpgsqlLSeg.html",
    "title": "Struct NpgsqlLSeg | Npgsql Documentation",
    "keywords": "Struct NpgsqlLSeg Represents a PostgreSQL Line Segment type. Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace :NpgsqlTypes Assembly :Npgsql.dll Syntax public struct NpgsqlLSeg : IEquatable<NpgsqlLSeg> Constructors | Improve this Doc View Source NpgsqlLSeg(NpgsqlPoint, NpgsqlPoint) Declaration public NpgsqlLSeg(NpgsqlPoint start, NpgsqlPoint end) Parameters Type Name Description NpgsqlPoint start NpgsqlPoint end | Improve this Doc View Source NpgsqlLSeg(Double, Double, Double, Double) Declaration public NpgsqlLSeg(double startx, double starty, double endx, double endy) Parameters Type Name Description System.Double startx System.Double starty System.Double endx System.Double endy Properties | Improve this Doc View Source End Declaration public NpgsqlPoint End { get; set; } Property Value Type Description NpgsqlPoint | Improve this Doc View Source Start Declaration public NpgsqlPoint Start { get; set; } Property Value Type Description NpgsqlPoint Methods | Improve this Doc View Source Equals(NpgsqlLSeg) Declaration public bool Equals(NpgsqlLSeg other) Parameters Type Name Description NpgsqlLSeg other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Parse(String) Declaration public static NpgsqlLSeg Parse(string s) Parameters Type Name Description System.String s Returns Type Description NpgsqlLSeg | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(NpgsqlLSeg, NpgsqlLSeg) Declaration public static bool operator ==(NpgsqlLSeg x, NpgsqlLSeg y) Parameters Type Name Description NpgsqlLSeg x NpgsqlLSeg y Returns Type Description System.Boolean | Improve this Doc View Source Inequality(NpgsqlLSeg, NpgsqlLSeg) Declaration public static bool operator !=(NpgsqlLSeg x, NpgsqlLSeg y) Parameters Type Name Description NpgsqlLSeg x NpgsqlLSeg y Returns Type Description System.Boolean"
  },
  "api/NpgsqlTypes.NpgsqlPath.html": {
    "href": "api/NpgsqlTypes.NpgsqlPath.html",
    "title": "Struct NpgsqlPath | Npgsql Documentation",
    "keywords": "Struct NpgsqlPath Represents a PostgreSQL Path type. Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace :NpgsqlTypes Assembly :Npgsql.dll Syntax public struct NpgsqlPath : IList<NpgsqlPoint>, ICollection<NpgsqlPoint>, IEnumerable<NpgsqlPoint>, IEnumerable, IEquatable<NpgsqlPath> Constructors | Improve this Doc View Source NpgsqlPath(NpgsqlPoint[]) Declaration public NpgsqlPath(params NpgsqlPoint[] points) Parameters Type Name Description NpgsqlPoint [] points | Improve this Doc View Source NpgsqlPath(Boolean) Declaration public NpgsqlPath(bool open) Parameters Type Name Description System.Boolean open | Improve this Doc View Source NpgsqlPath(IEnumerable<NpgsqlPoint>) Declaration public NpgsqlPath(IEnumerable<NpgsqlPoint> points) Parameters Type Name Description System.Collections.Generic.IEnumerable < NpgsqlPoint > points | Improve this Doc View Source NpgsqlPath(IEnumerable<NpgsqlPoint>, Boolean) Declaration public NpgsqlPath(IEnumerable<NpgsqlPoint> points, bool open) Parameters Type Name Description System.Collections.Generic.IEnumerable < NpgsqlPoint > points System.Boolean open | Improve this Doc View Source NpgsqlPath(Int32) Declaration public NpgsqlPath(int capacity) Parameters Type Name Description System.Int32 capacity | Improve this Doc View Source NpgsqlPath(Int32, Boolean) Declaration public NpgsqlPath(int capacity, bool open) Parameters Type Name Description System.Int32 capacity System.Boolean open Properties | Improve this Doc View Source Capacity Declaration public int Capacity { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description System.Int32 Implements System.Collections.Generic.ICollection<T>.Count | Improve this Doc View Source IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.IsReadOnly | Improve this Doc View Source Item[Int32] Declaration public NpgsqlPoint this[int index] { get; set; } Parameters Type Name Description System.Int32 index Property Value Type Description NpgsqlPoint Implements System.Collections.Generic.IList<T>.Item[System.Int32] | Improve this Doc View Source Open Declaration public bool Open { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Add(NpgsqlPoint) Declaration public void Add(NpgsqlPoint item) Parameters Type Name Description NpgsqlPoint item Implements System.Collections.Generic.ICollection<T>.Add(T) | Improve this Doc View Source Clear() Declaration public void Clear() Implements System.Collections.Generic.ICollection<T>.Clear() | Improve this Doc View Source Contains(NpgsqlPoint) Declaration public bool Contains(NpgsqlPoint item) Parameters Type Name Description NpgsqlPoint item Returns Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.Contains(T) | Improve this Doc View Source CopyTo(NpgsqlPoint[], Int32) Declaration public void CopyTo(NpgsqlPoint[] array, int arrayIndex) Parameters Type Name Description NpgsqlPoint [] array System.Int32 arrayIndex Implements System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32) | Improve this Doc View Source Equals(NpgsqlPath) Declaration public bool Equals(NpgsqlPath other) Parameters Type Name Description NpgsqlPath other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<NpgsqlPoint> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < NpgsqlPoint > Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source IndexOf(NpgsqlPoint) Declaration public int IndexOf(NpgsqlPoint item) Parameters Type Name Description NpgsqlPoint item Returns Type Description System.Int32 Implements System.Collections.Generic.IList<T>.IndexOf(T) | Improve this Doc View Source Insert(Int32, NpgsqlPoint) Declaration public void Insert(int index, NpgsqlPoint item) Parameters Type Name Description System.Int32 index NpgsqlPoint item Implements System.Collections.Generic.IList<T>.Insert(System.Int32, T) | Improve this Doc View Source Parse(String) Declaration public static NpgsqlPath Parse(string s) Parameters Type Name Description System.String s Returns Type Description NpgsqlPath | Improve this Doc View Source Remove(NpgsqlPoint) Declaration public bool Remove(NpgsqlPoint item) Parameters Type Name Description NpgsqlPoint item Returns Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.Remove(T) | Improve this Doc View Source RemoveAt(Int32) Declaration public void RemoveAt(int index) Parameters Type Name Description System.Int32 index Implements System.Collections.Generic.IList<T>.RemoveAt(System.Int32) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(NpgsqlPath, NpgsqlPath) Declaration public static bool operator ==(NpgsqlPath x, NpgsqlPath y) Parameters Type Name Description NpgsqlPath x NpgsqlPath y Returns Type Description System.Boolean | Improve this Doc View Source Inequality(NpgsqlPath, NpgsqlPath) Declaration public static bool operator !=(NpgsqlPath x, NpgsqlPath y) Parameters Type Name Description NpgsqlPath x NpgsqlPath y Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator()"
  },
  "api/NpgsqlTypes.NpgsqlPoint.html": {
    "href": "api/NpgsqlTypes.NpgsqlPoint.html",
    "title": "Struct NpgsqlPoint | Npgsql Documentation",
    "keywords": "Struct NpgsqlPoint Represents a PostgreSQL point type. Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace :NpgsqlTypes Assembly :Npgsql.dll Syntax public struct NpgsqlPoint : IEquatable<NpgsqlPoint> Remarks See http://www.postgresql.org/docs/current/static/datatype-geometric.html Constructors | Improve this Doc View Source NpgsqlPoint(Double, Double) Declaration public NpgsqlPoint(double x, double y) Parameters Type Name Description System.Double x System.Double y Properties | Improve this Doc View Source X Declaration public double X { get; set; } Property Value Type Description System.Double | Improve this Doc View Source Y Declaration public double Y { get; set; } Property Value Type Description System.Double Methods | Improve this Doc View Source Equals(NpgsqlPoint) Declaration public bool Equals(NpgsqlPoint other) Parameters Type Name Description NpgsqlPoint other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Parse(String) Declaration public static NpgsqlPoint Parse(string s) Parameters Type Name Description System.String s Returns Type Description NpgsqlPoint | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(NpgsqlPoint, NpgsqlPoint) Declaration public static bool operator ==(NpgsqlPoint x, NpgsqlPoint y) Parameters Type Name Description NpgsqlPoint x NpgsqlPoint y Returns Type Description System.Boolean | Improve this Doc View Source Inequality(NpgsqlPoint, NpgsqlPoint) Declaration public static bool operator !=(NpgsqlPoint x, NpgsqlPoint y) Parameters Type Name Description NpgsqlPoint x NpgsqlPoint y Returns Type Description System.Boolean"
  },
  "api/NpgsqlTypes.PgNameAttribute.html": {
    "href": "api/NpgsqlTypes.PgNameAttribute.html",
    "title": "Class PgNameAttribute | Npgsql Documentation",
    "keywords": "Class PgNameAttribute Indicates that this property or field correspond to a PostgreSQL field with the specified name Inheritance System.Object System.Attribute PgNameAttribute Inherited Members System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace :NpgsqlTypes Assembly :Npgsql.dll Syntax [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field)] public class PgNameAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source PgNameAttribute(String) Indicates that this property or field correspond to a PostgreSQL field with the specified name Declaration public PgNameAttribute(string pgName) Parameters Type Name Description System.String pgName The name of PostgreSQL field that corresponds to this CLR property or field Properties | Improve this Doc View Source PgName The name of PostgreSQL field that corresponds to this CLR property or field Declaration public string PgName { get; } Property Value Type Description System.String"
  },
  "api/NpgsqlTypes.PostgisGeometry.html": {
    "href": "api/NpgsqlTypes.PostgisGeometry.html",
    "title": "Class PostgisGeometry | Npgsql Documentation",
    "keywords": "Class PostgisGeometry Represents an Postgis feature. Inheritance System.Object PostgisGeometry Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :NpgsqlTypes Assembly :Npgsql.dll Syntax public abstract class PostgisGeometry Properties | Improve this Doc View Source SRID The Spatial Reference System Identifier of the geometry (0 if unspecified). Declaration public uint SRID { get; set; } Property Value Type Description System.UInt32 Methods | Improve this Doc View Source GetLenHelper() returns the binary length of the data structure without header. Declaration protected abstract int GetLenHelper() Returns Type Description System.Int32"
  },
  "api/NpgsqlTypes.PostgisGeometryCollection.html": {
    "href": "api/NpgsqlTypes.PostgisGeometryCollection.html",
    "title": "Class PostgisGeometryCollection | Npgsql Documentation",
    "keywords": "Class PostgisGeometryCollection Represents a collection of Postgis feature. Inheritance System.Object PostgisGeometry PostgisGeometryCollection Inherited Members PostgisGeometry.SRID System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace :NpgsqlTypes Assembly :Npgsql.dll Syntax public class PostgisGeometryCollection : PostgisGeometry, IEquatable<PostgisGeometryCollection>, IEnumerable<PostgisGeometry>, IEnumerable Constructors | Improve this Doc View Source PostgisGeometryCollection(PostgisGeometry[]) Declaration public PostgisGeometryCollection(PostgisGeometry[] geometries) Parameters Type Name Description PostgisGeometry [] geometries | Improve this Doc View Source PostgisGeometryCollection(IEnumerable<PostgisGeometry>) Declaration public PostgisGeometryCollection(IEnumerable<PostgisGeometry> geometries) Parameters Type Name Description System.Collections.Generic.IEnumerable < PostgisGeometry > geometries Properties | Improve this Doc View Source GeometryCount Declaration public int GeometryCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Item[Int32] Declaration public PostgisGeometry this[int index] { get; } Parameters Type Name Description System.Int32 index Property Value Type Description PostgisGeometry Methods | Improve this Doc View Source Equals(PostgisGeometryCollection) Declaration public bool Equals(PostgisGeometryCollection other) Parameters Type Name Description PostgisGeometryCollection other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<PostgisGeometry> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < PostgisGeometry > Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source GetLenHelper() Declaration protected override int GetLenHelper() Returns Type Description System.Int32 Overrides PostgisGeometry.GetLenHelper() Operators | Improve this Doc View Source Equality(PostgisGeometryCollection, PostgisGeometryCollection) Declaration public static bool operator ==(PostgisGeometryCollection x, PostgisGeometryCollection y) Parameters Type Name Description PostgisGeometryCollection x PostgisGeometryCollection y Returns Type Description System.Boolean | Improve this Doc View Source Inequality(PostgisGeometryCollection, PostgisGeometryCollection) Declaration public static bool operator !=(PostgisGeometryCollection x, PostgisGeometryCollection y) Parameters Type Name Description PostgisGeometryCollection x PostgisGeometryCollection y Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator()"
  },
  "api/NpgsqlTypes.PostgisLineString.html": {
    "href": "api/NpgsqlTypes.PostgisLineString.html",
    "title": "Class PostgisLineString | Npgsql Documentation",
    "keywords": "Class PostgisLineString Represents an Ogc 2D LineString Inheritance System.Object PostgisGeometry PostgisLineString Inherited Members PostgisGeometry.SRID System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace :NpgsqlTypes Assembly :Npgsql.dll Syntax public class PostgisLineString : PostgisGeometry, IEquatable<PostgisLineString>, IEnumerable<Coordinate2D>, IEnumerable Constructors | Improve this Doc View Source PostgisLineString(Coordinate2D[]) Declaration public PostgisLineString(Coordinate2D[] points) Parameters Type Name Description Coordinate2D [] points | Improve this Doc View Source PostgisLineString(IEnumerable<Coordinate2D>) Declaration public PostgisLineString(IEnumerable<Coordinate2D> points) Parameters Type Name Description System.Collections.Generic.IEnumerable < Coordinate2D > points Properties | Improve this Doc View Source Item[Int32] Declaration public Coordinate2D this[int index] { get; } Parameters Type Name Description System.Int32 index Property Value Type Description Coordinate2D | Improve this Doc View Source PointCount Declaration public int PointCount { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Equals(PostgisLineString) Declaration public bool Equals(PostgisLineString other) Parameters Type Name Description PostgisLineString other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<Coordinate2D> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < Coordinate2D > Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source GetLenHelper() Declaration protected override int GetLenHelper() Returns Type Description System.Int32 Overrides PostgisGeometry.GetLenHelper() Operators | Improve this Doc View Source Equality(PostgisLineString, PostgisLineString) Declaration public static bool operator ==(PostgisLineString x, PostgisLineString y) Parameters Type Name Description PostgisLineString x PostgisLineString y Returns Type Description System.Boolean | Improve this Doc View Source Inequality(PostgisLineString, PostgisLineString) Declaration public static bool operator !=(PostgisLineString x, PostgisLineString y) Parameters Type Name Description PostgisLineString x PostgisLineString y Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator()"
  },
  "api/NpgsqlTypes.PostgisMultiLineString.html": {
    "href": "api/NpgsqlTypes.PostgisMultiLineString.html",
    "title": "Class PostgisMultiLineString | Npgsql Documentation",
    "keywords": "Class PostgisMultiLineString Represents a Postgis 2D MultiLineString Inheritance System.Object PostgisGeometry PostgisMultiLineString Inherited Members PostgisGeometry.SRID System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace :NpgsqlTypes Assembly :Npgsql.dll Syntax public class PostgisMultiLineString : PostgisGeometry, IEquatable<PostgisMultiLineString>, IEnumerable<PostgisLineString>, IEnumerable Constructors | Improve this Doc View Source PostgisMultiLineString(PostgisLineString[]) Declaration public PostgisMultiLineString(PostgisLineString[] linestrings) Parameters Type Name Description PostgisLineString [] linestrings | Improve this Doc View Source PostgisMultiLineString(IEnumerable<PostgisLineString>) Declaration public PostgisMultiLineString(IEnumerable<PostgisLineString> linestrings) Parameters Type Name Description System.Collections.Generic.IEnumerable < PostgisLineString > linestrings | Improve this Doc View Source PostgisMultiLineString(IEnumerable<IEnumerable<Coordinate2D>>) Declaration public PostgisMultiLineString(IEnumerable<IEnumerable<Coordinate2D>> pointList) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Collections.Generic.IEnumerable < Coordinate2D >> pointList Properties | Improve this Doc View Source Item[Int32] Declaration public PostgisLineString this[int index] { get; } Parameters Type Name Description System.Int32 index Property Value Type Description PostgisLineString | Improve this Doc View Source LineCount Declaration public int LineCount { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Equals(PostgisMultiLineString) Declaration public bool Equals(PostgisMultiLineString other) Parameters Type Name Description PostgisMultiLineString other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<PostgisLineString> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < PostgisLineString > Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source GetLenHelper() Declaration protected override int GetLenHelper() Returns Type Description System.Int32 Overrides PostgisGeometry.GetLenHelper() Operators | Improve this Doc View Source Equality(PostgisMultiLineString, PostgisMultiLineString) Declaration public static bool operator ==(PostgisMultiLineString x, PostgisMultiLineString y) Parameters Type Name Description PostgisMultiLineString x PostgisMultiLineString y Returns Type Description System.Boolean | Improve this Doc View Source Inequality(PostgisMultiLineString, PostgisMultiLineString) Declaration public static bool operator !=(PostgisMultiLineString x, PostgisMultiLineString y) Parameters Type Name Description PostgisMultiLineString x PostgisMultiLineString y Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator()"
  },
  "api/NpgsqlTypes.PostgisMultiPoint.html": {
    "href": "api/NpgsqlTypes.PostgisMultiPoint.html",
    "title": "Class PostgisMultiPoint | Npgsql Documentation",
    "keywords": "Class PostgisMultiPoint Represents a Postgis 2D MultiPoint Inheritance System.Object PostgisGeometry PostgisMultiPoint Inherited Members PostgisGeometry.SRID System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace :NpgsqlTypes Assembly :Npgsql.dll Syntax public class PostgisMultiPoint : PostgisGeometry, IEquatable<PostgisMultiPoint>, IEnumerable<Coordinate2D>, IEnumerable Constructors | Improve this Doc View Source PostgisMultiPoint(Coordinate2D[]) Declaration public PostgisMultiPoint(Coordinate2D[] points) Parameters Type Name Description Coordinate2D [] points | Improve this Doc View Source PostgisMultiPoint(IEnumerable<Coordinate2D>) Declaration public PostgisMultiPoint(IEnumerable<Coordinate2D> points) Parameters Type Name Description System.Collections.Generic.IEnumerable < Coordinate2D > points | Improve this Doc View Source PostgisMultiPoint(IEnumerable<PostgisPoint>) Declaration public PostgisMultiPoint(IEnumerable<PostgisPoint> points) Parameters Type Name Description System.Collections.Generic.IEnumerable < PostgisPoint > points Properties | Improve this Doc View Source Item[Int32] Declaration public Coordinate2D this[int indexer] { get; } Parameters Type Name Description System.Int32 indexer Property Value Type Description Coordinate2D | Improve this Doc View Source PointCount Declaration public int PointCount { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Equals(PostgisMultiPoint) Declaration public bool Equals(PostgisMultiPoint other) Parameters Type Name Description PostgisMultiPoint other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<Coordinate2D> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < Coordinate2D > Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source GetLenHelper() Declaration protected override int GetLenHelper() Returns Type Description System.Int32 Overrides PostgisGeometry.GetLenHelper() Operators | Improve this Doc View Source Equality(PostgisMultiPoint, PostgisMultiPoint) Declaration public static bool operator ==(PostgisMultiPoint x, PostgisMultiPoint y) Parameters Type Name Description PostgisMultiPoint x PostgisMultiPoint y Returns Type Description System.Boolean | Improve this Doc View Source Inequality(PostgisMultiPoint, PostgisMultiPoint) Declaration public static bool operator !=(PostgisMultiPoint x, PostgisMultiPoint y) Parameters Type Name Description PostgisMultiPoint x PostgisMultiPoint y Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator()"
  },
  "api/NpgsqlTypes.PostgisMultiPolygon.html": {
    "href": "api/NpgsqlTypes.PostgisMultiPolygon.html",
    "title": "Class PostgisMultiPolygon | Npgsql Documentation",
    "keywords": "Class PostgisMultiPolygon Represents a Postgis 2D MultiPolygon. Inheritance System.Object PostgisGeometry PostgisMultiPolygon Inherited Members PostgisGeometry.SRID System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace :NpgsqlTypes Assembly :Npgsql.dll Syntax public class PostgisMultiPolygon : PostgisGeometry, IEquatable<PostgisMultiPolygon>, IEnumerable<PostgisPolygon>, IEnumerable Constructors | Improve this Doc View Source PostgisMultiPolygon(PostgisPolygon[]) Declaration public PostgisMultiPolygon(PostgisPolygon[] polygons) Parameters Type Name Description PostgisPolygon [] polygons | Improve this Doc View Source PostgisMultiPolygon(IEnumerable<PostgisPolygon>) Declaration public PostgisMultiPolygon(IEnumerable<PostgisPolygon> polygons) Parameters Type Name Description System.Collections.Generic.IEnumerable < PostgisPolygon > polygons | Improve this Doc View Source PostgisMultiPolygon(IEnumerable<IEnumerable<IEnumerable<Coordinate2D>>>) Declaration public PostgisMultiPolygon(IEnumerable<IEnumerable<IEnumerable<Coordinate2D>>> ringList) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Collections.Generic.IEnumerable < System.Collections.Generic.IEnumerable < Coordinate2D >>> ringList Properties | Improve this Doc View Source Item[Int32] Declaration public PostgisPolygon this[int index] { get; } Parameters Type Name Description System.Int32 index Property Value Type Description PostgisPolygon | Improve this Doc View Source PolygonCount Declaration public int PolygonCount { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Equals(PostgisMultiPolygon) Declaration public bool Equals(PostgisMultiPolygon other) Parameters Type Name Description PostgisMultiPolygon other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<PostgisPolygon> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < PostgisPolygon > Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source GetLenHelper() Declaration protected override int GetLenHelper() Returns Type Description System.Int32 Overrides PostgisGeometry.GetLenHelper() Operators | Improve this Doc View Source Equality(PostgisMultiPolygon, PostgisMultiPolygon) Declaration public static bool operator ==(PostgisMultiPolygon x, PostgisMultiPolygon y) Parameters Type Name Description PostgisMultiPolygon x PostgisMultiPolygon y Returns Type Description System.Boolean | Improve this Doc View Source Inequality(PostgisMultiPolygon, PostgisMultiPolygon) Declaration public static bool operator !=(PostgisMultiPolygon x, PostgisMultiPolygon y) Parameters Type Name Description PostgisMultiPolygon x PostgisMultiPolygon y Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator()"
  },
  "api/NpgsqlTypes.PostgisPoint.html": {
    "href": "api/NpgsqlTypes.PostgisPoint.html",
    "title": "Class PostgisPoint | Npgsql Documentation",
    "keywords": "Class PostgisPoint Represents an Postgis 2D Point Inheritance System.Object PostgisGeometry PostgisPoint Inherited Members PostgisGeometry.SRID System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace :NpgsqlTypes Assembly :Npgsql.dll Syntax public class PostgisPoint : PostgisGeometry, IEquatable<PostgisPoint> Constructors | Improve this Doc View Source PostgisPoint(Double, Double) Declaration public PostgisPoint(double x, double y) Parameters Type Name Description System.Double x System.Double y Properties | Improve this Doc View Source X Declaration public double X { get; set; } Property Value Type Description System.Double | Improve this Doc View Source Y Declaration public double Y { get; set; } Property Value Type Description System.Double Methods | Improve this Doc View Source Equals(PostgisPoint) Declaration public bool Equals(PostgisPoint other) Parameters Type Name Description PostgisPoint other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source GetLenHelper() Declaration protected override int GetLenHelper() Returns Type Description System.Int32 Overrides PostgisGeometry.GetLenHelper() Operators | Improve this Doc View Source Equality(PostgisPoint, PostgisPoint) Declaration public static bool operator ==(PostgisPoint x, PostgisPoint y) Parameters Type Name Description PostgisPoint x PostgisPoint y Returns Type Description System.Boolean | Improve this Doc View Source Inequality(PostgisPoint, PostgisPoint) Declaration public static bool operator !=(PostgisPoint x, PostgisPoint y) Parameters Type Name Description PostgisPoint x PostgisPoint y Returns Type Description System.Boolean"
  },
  "api/NpgsqlTypes.PostgisPolygon.html": {
    "href": "api/NpgsqlTypes.PostgisPolygon.html",
    "title": "Class PostgisPolygon | Npgsql Documentation",
    "keywords": "Class PostgisPolygon Represents an Postgis 2D Polygon. Inheritance System.Object PostgisGeometry PostgisPolygon Inherited Members PostgisGeometry.SRID System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace :NpgsqlTypes Assembly :Npgsql.dll Syntax public class PostgisPolygon : PostgisGeometry, IEquatable<PostgisPolygon>, IEnumerable<IEnumerable<Coordinate2D>>, IEnumerable Constructors | Improve this Doc View Source PostgisPolygon(Coordinate2D[][]) Declaration public PostgisPolygon(Coordinate2D[][] rings) Parameters Type Name Description Coordinate2D [][] rings | Improve this Doc View Source PostgisPolygon(IEnumerable<IEnumerable<Coordinate2D>>) Declaration public PostgisPolygon(IEnumerable<IEnumerable<Coordinate2D>> rings) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Collections.Generic.IEnumerable < Coordinate2D >> rings Properties | Improve this Doc View Source Item[Int32] Declaration public Coordinate2D[] this[int ringIndex] { get; } Parameters Type Name Description System.Int32 ringIndex Property Value Type Description Coordinate2D [] | Improve this Doc View Source Item[Int32, Int32] Declaration public Coordinate2D this[int ringIndex, int pointIndex] { get; } Parameters Type Name Description System.Int32 ringIndex System.Int32 pointIndex Property Value Type Description Coordinate2D | Improve this Doc View Source RingCount Declaration public int RingCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source TotalPointCount Declaration public int TotalPointCount { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Equals(PostgisPolygon) Declaration public bool Equals(PostgisPolygon other) Parameters Type Name Description PostgisPolygon other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<IEnumerable<Coordinate2D>> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Collections.Generic.IEnumerable < Coordinate2D >> Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source GetLenHelper() Declaration protected override int GetLenHelper() Returns Type Description System.Int32 Overrides PostgisGeometry.GetLenHelper() Operators | Improve this Doc View Source Equality(PostgisPolygon, PostgisPolygon) Declaration public static bool operator ==(PostgisPolygon x, PostgisPolygon y) Parameters Type Name Description PostgisPolygon x PostgisPolygon y Returns Type Description System.Boolean | Improve this Doc View Source Inequality(PostgisPolygon, PostgisPolygon) Declaration public static bool operator !=(PostgisPolygon x, PostgisPolygon y) Parameters Type Name Description PostgisPolygon x PostgisPolygon y Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator()"
  },
  "api/NpgsqlTypes.html": {
    "href": "api/NpgsqlTypes.html",
    "title": "Namespace NpgsqlTypes | Npgsql Documentation",
    "keywords": "Namespace NpgsqlTypes Classes NpgsqlTsQuery Represents a PostgreSQL tsquery. This is the base class for lexeme, not, and and or nodes. NpgsqlTsQueryAnd TsQuery And node. NpgsqlTsQueryBinOp Base class for TsQuery binary operators (& and |). NpgsqlTsQueryEmpty Represents an empty tsquery. Shold only be used as top node. NpgsqlTsQueryLexeme TsQuery Lexeme node. NpgsqlTsQueryNot TsQuery Not node. NpgsqlTsQueryOr TsQuery Or Node. NpgsqlTsVector Represents a PostgreSQL tsvector. PgNameAttribute Indicates that this property or field correspond to a PostgreSQL field with the specified name PostgisGeometry Represents an Postgis feature. PostgisGeometryCollection Represents a collection of Postgis feature. PostgisLineString Represents an Ogc 2D LineString PostgisMultiLineString Represents a Postgis 2D MultiLineString PostgisMultiPoint Represents a Postgis 2D MultiPoint PostgisMultiPolygon Represents a Postgis 2D MultiPolygon. PostgisPoint Represents an Postgis 2D Point PostgisPolygon Represents an Postgis 2D Polygon. Structs Coordinate2D A structure representing a 2D double precision floating point coordinate; NpgsqlBox Represents a PostgreSQL box type. NpgsqlCircle Represents a PostgreSQL Circle type. NpgsqlDate NpgsqlDateTime A struct similar to .NET DateTime but capable of storing PostgreSQL's timestamp and timestamptz types. DateTime is capable of storing values from year 1 to 9999 at 100-nanosecond precision, while PostgreSQL's timestamps store values from 4713BC to 5874897AD with 1-microsecond precision. NpgsqlInet Represents a PostgreSQL inet type, which is a combination of an IPAddress and a subnet mask. NpgsqlLine Represents a PostgreSQL line type. NpgsqlLSeg Represents a PostgreSQL Line Segment type. NpgsqlPath Represents a PostgreSQL Path type. NpgsqlPoint Represents a PostgreSQL point type. NpgsqlPolygon Represents a PostgreSQL Polygon type. NpgsqlRange<T> NpgsqlTid Represents a PostgreSQL tid value NpgsqlTimeSpan Represents the PostgreSQL interval datatype. NpgsqlTsVector.Lexeme Represents a lexeme. A lexeme consists of a text string and optional word entry positions. NpgsqlTsVector.Lexeme.WordEntryPos Represents a word entry position and an optional weight. Enums NpgsqlDbType Represents a PostgreSQL data type that can be written or read to the database. Used in places such as NpgsqlDbType to unambiguously specify how to encode or decode values. NpgsqlTsQuery.NodeKind NodeKind NpgsqlTsQueryLexeme.Weight Weight enum, can be OR'ed together. NpgsqlTsVector.Lexeme.Weight The weight is labeled from A to D. D is the default, and not printed."
  },
  "doc/compatibility.html": {
    "href": "doc/compatibility.html",
    "title": "Compatibility Notes | Npgsql Documentation",
    "keywords": "Compatibility Notes This page centralizes Npgsql's compatibility status with PostgreSQL and other components, and documents some important gotchas. We aim to be compatible with all currently supported PostgreSQL versions , which means 5 years back. Earlier versions may still work but we don't perform continuous testing on them or commit to resolving issues on them. PostgreSQL We aim to be compatible with all currently supported PostgreSQL versions , which means 5 years back. Earlier versions may still work but we don't perform continuous testing on them or commit to resolving issues on them. ADO.NET Npgsql is an ADO.NET-compatible provider, so it has the same APIs as other .NET database drivers and should behave the same. Please let us know if you notice any non-standard behavior. .NET Framework/.NET Core/mono Npgsql 3.1 targets .NET Framework 4.5 and 4.5.1, as well as the .NET Standard 1.3 which allows it to run on .NET Core. It is also tested and runs well on mono. Here is a sample project.json to get you started with .NET Core: { \"buildOptions\": { \"emitEntryPoint\": \"true\" }, \"dependencies\": { \"Npgsql\" : \"3.1.8\" }, \"frameworks\": { \"net451\": { \"frameworkAssemblies\": { \"System.Data\": { \"version\": \"4.0.0.0\", \"type\": \"build\" } } }, \"netcoreapp1.0\": { \"dependencies\": { \"Microsoft.NETCore.App\": { \"version\": \"1.0.1\", \"type\": \"platform\" } } } } } Note that netcoreapp1.0 can be replaced with netstandard13 (or up) to create a library. Amazon Redshift Amazon Redshift is a cloud-based data warehouse originally based on PostgreSQL 8.0.2. In addition, due to its nature some features have been removed and others changed in ways that make them incompatible with PostgreSQL. We try to support Redshift as much as we can, please let us know about issues you run across. First, check out Amazon's page about Redshift and PostgreSQL which contains lots of useful compatibility information. Additional known issues: If you want to connect over SSL, your connection string must contain Server Compatibility Mode=Redshift , otherwise you'll get a connection error about ssl_renegotiation_limit . Entity Framework with database-computed identity values don't work with Redshift, since it doesn't support sequences (see issue #544 ). pgbouncer Npgsql works well with pgbouncer, but there are some quirks to be aware of. Don't forget to turn off Npgsql's internal connection pool by specifying Pooling=false on the connection string. Prior to version 3.1, Npgsql sends the statement_timeout startup parameter when it connects, but this parameter isn't supported by pgbouncer. You can get around this by specifying CommandTimeout=0 on the connection string, and then manually setting the CommandTimeout property on your NpgsqlCommand objects. Version 3.1 no longer sends statement_timeout ."
  },
  "doc/connection-string-parameters.html": {
    "href": "doc/connection-string-parameters.html",
    "title": "Connection String Parameters | Npgsql Documentation",
    "keywords": "Connection String Parameters Parameter keywords are case-insensitive. Basic Connection Parameter Description Default Host The hostname or IP address of the PostgreSQL server to connect to. Required Port The TCP port of the PostgreSQL server. 5432 Database The PostgreSQL database to connect to. Same as Username Username The username to connect with. Not required if using IntegratedSecurity. Password The password to connect with. Not required if using IntegratedSecurity. Security and Encryption Parameter Description Default SSL Mode Controls whether SSL is used, depending on server support. Can be Require , Disable , or Prefer . See docs for more info . Disable Trust Server Certificate Whether to trust the server certificate without validating it. See docs for more info . false Use SSL Stream Npgsql uses its own internal implementation of TLS/SSL. Turn this on to use .NET SslStream instead. false Integrated Security Whether to use integrated security to log in (GSS/SSPI), currently supported on Windows only. See docs for more info . false Persist Security Info Gets or sets a Boolean value that indicates if security-sensitive information, such as the password, is not returned as part of the connection if the connection is open or has ever been in an open state. Since 3.1 only. false Kerberos Service Name The Kerberos service name to be used for authentication. See docs for more info . postgres Include Realm The Kerberos realm to be used for authentication. See docs for more info . Pooling Parameter Description Default Pooling Whether connection pooling should be used. true Minimum Pool Size The minimum connection pool size. 1 Maximum Pool Size The maximum connection pool size. 100 since 3.1, 20 previously Connection Idle Lifetime The time (in seconds) to wait before closing idle connections in the pool if the count of all connections exceeds MinPoolSize. Since 3.1 only. 300 Connection Pruning Interval How many seconds the pool waits before attempting to prune idle connections that are beyond idle lifetime (see ConnectionIdleLifetime ). Since 3.1 only. 10 Timeouts and Keepalive Parameter Description Default Timeout The time to wait (in seconds) while trying to establish a connection before terminating the attempt and generating an error. 15 Command Timeout The time to wait (in seconds) while trying to execute a command before terminating the attempt and generating an error. Set to zero for infinity. 30 Internal Command Timeout The time to wait (in seconds) while trying to execute a an internal command before terminating the attempt and generating an error. -1 uses CommandTimeout, 0 means no timeout. -1 Keepalive The number of seconds of connection inactivity before Npgsql sends a keepalive query. disabled Performance Parameter Description Default Buffer Size Determines the size of the internal buffer Npgsql uses when reading or writing. Increasing may improve performance if transferring large values from the database. 8192 Misc Parameter Description Default Application Name The optional application name parameter to be sent to the backend during connection initiation. Enlist Whether to enlist in an ambient TransactionScope. false Search Path Sets the schema search path. Client Encoding Gets or sets the client_encoding parameter. Since 3.1. EF Template Database The database template to specify when creating a database in Entity Framework. template1 Compatibility Parameter Description Default Server Compatibility Mode A compatibility mode for special PostgreSQL server types. Currently only \"Redshift\" is supported. none Convert Infinity DateTime Makes MaxValue and MinValue timestamps and dates readable as infinity and negative infinity. false"
  },
  "api/NpgsqlTypes.NpgsqlTid.html": {
    "href": "api/NpgsqlTypes.NpgsqlTid.html",
    "title": "Struct NpgsqlTid | Npgsql Documentation",
    "keywords": "Struct NpgsqlTid Represents a PostgreSQL tid value Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace :NpgsqlTypes Assembly :Npgsql.dll Syntax public struct NpgsqlTid Remarks http://www.postgresql.org/docs/current/static/datatype-oid.html Constructors | Improve this Doc View Source NpgsqlTid(UInt32, UInt16) Declaration public NpgsqlTid(uint blockNumber, ushort offsetNumber) Parameters Type Name Description System.UInt32 blockNumber System.UInt16 offsetNumber Fields | Improve this Doc View Source BlockNumber Block number Declaration public uint BlockNumber Field Value Type Description System.UInt32 | Improve this Doc View Source OffsetNumber Tuple index within block Declaration public ushort OffsetNumber Field Value Type Description System.UInt16 Methods | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString()"
  },
  "api/NpgsqlTypes.NpgsqlTimeSpan.html": {
    "href": "api/NpgsqlTypes.NpgsqlTimeSpan.html",
    "title": "Struct NpgsqlTimeSpan | Npgsql Documentation",
    "keywords": "Struct NpgsqlTimeSpan Represents the PostgreSQL interval datatype. Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace :NpgsqlTypes Assembly :Npgsql.dll Syntax [Serializable] public struct NpgsqlTimeSpan : IComparable, IComparer, IEquatable<NpgsqlTimeSpan>, IComparable<NpgsqlTimeSpan>, IComparer<NpgsqlTimeSpan> Remarks PostgreSQL differs from .NET in how it's interval type doesn't assume 24 hours in a day (to deal with 23- and 25-hour days caused by daylight savings adjustments) and has a concept of months that doesn't exist in .NET's System.TimeSpan class. (Neither datatype has any concessions for leap-seconds). For most uses just casting to and from TimeSpan will work correctly — in particular, the results of subtracting one System.DateTime or the PostgreSQL date, time and timestamp types from another should be the same whether you do so in .NET or PostgreSQL — but if the handling of days and months in PostgreSQL is important to your application then you should use this class instead of System.TimeSpan . If you don't know whether these differences are important to your application, they probably arent! Just use System.TimeSpan and do not use this class directly ☺ To avoid forcing unnecessary provider-specific concerns on users who need not be concerned with them a call to System.Data.IDataRecord.GetValue(System.Int32) on a field containing an NpgsqlTimeSpan value will return a System.TimeSpan rather than an NpgsqlTimeSpan . If you need the extra functionality of NpgsqlTimeSpan then use GetInterval(Int32) . Constructors | Improve this Doc View Source NpgsqlTimeSpan(Int32, Int32, Int32, Int32) Initializes a new NpgsqlTimeSpan to the specified number of days, hours, minutes & seconds. Declaration public NpgsqlTimeSpan(int days, int hours, int minutes, int seconds) Parameters Type Name Description System.Int32 days Number of days. System.Int32 hours Number of hours. System.Int32 minutes Number of minutes. System.Int32 seconds Number of seconds. | Improve this Doc View Source NpgsqlTimeSpan(Int32, Int32, Int32, Int32, Int32) Initializes a new NpgsqlTimeSpan to the specified number of days, hours, minutes, seconds & milliseconds. Declaration public NpgsqlTimeSpan(int days, int hours, int minutes, int seconds, int milliseconds) Parameters Type Name Description System.Int32 days Number of days. System.Int32 hours Number of hours. System.Int32 minutes Number of minutes. System.Int32 seconds Number of seconds. System.Int32 milliseconds Number of milliseconds. | Improve this Doc View Source NpgsqlTimeSpan(Int32, Int32, Int32, Int32, Int32, Int32) Initializes a new NpgsqlTimeSpan to the specified number of months, days, hours, minutes, seconds & milliseconds. Declaration public NpgsqlTimeSpan(int months, int days, int hours, int minutes, int seconds, int milliseconds) Parameters Type Name Description System.Int32 months Number of months. System.Int32 days Number of days. System.Int32 hours Number of hours. System.Int32 minutes Number of minutes. System.Int32 seconds Number of seconds. System.Int32 milliseconds Number of milliseconds. | Improve this Doc View Source NpgsqlTimeSpan(Int32, Int32, Int32, Int32, Int32, Int32, Int32) Initializes a new NpgsqlTimeSpan to the specified number of years, months, days, hours, minutes, seconds & milliseconds. Years are calculated exactly equivalent to 12 months. Declaration public NpgsqlTimeSpan(int years, int months, int days, int hours, int minutes, int seconds, int milliseconds) Parameters Type Name Description System.Int32 years Number of years. System.Int32 months Number of months. System.Int32 days Number of days. System.Int32 hours Number of hours. System.Int32 minutes Number of minutes. System.Int32 seconds Number of seconds. System.Int32 milliseconds Number of milliseconds. | Improve this Doc View Source NpgsqlTimeSpan(Int32, Int32, Int64) Initializes a new NpgsqlTimeSpan to the specified number of months, days & ticks. Declaration public NpgsqlTimeSpan(int months, int days, long ticks) Parameters Type Name Description System.Int32 months Number of months. System.Int32 days Number of days. System.Int64 ticks Number of 100ns units. | Improve this Doc View Source NpgsqlTimeSpan(Int64) Initializes a new NpgsqlTimeSpan to the specified number of ticks. Declaration public NpgsqlTimeSpan(long ticks) Parameters Type Name Description System.Int64 ticks A time period expressed in 100ns units. | Improve this Doc View Source NpgsqlTimeSpan(TimeSpan) Initializes a new NpgsqlTimeSpan to hold the same time as a System.TimeSpan Declaration public NpgsqlTimeSpan(TimeSpan timespan) Parameters Type Name Description System.TimeSpan timespan A time period expressed in a System.TimeSpan Fields | Improve this Doc View Source DaysPerMonth Represents the number of days assumed in one month if month justification or unjustifcation is performed. This is set to 30 for consistency with PostgreSQL. Note that this is means that month adjustments cause a year to be taken as 30 × 12 = 360 rather than 356/366 days. Declaration public const int DaysPerMonth = 30 Field Value Type Description System.Int32 | Improve this Doc View Source HoursPerDay Represents the number of hours in one day (assuming no daylight savings adjustments). This field is constant. Declaration public const int HoursPerDay = 24 Field Value Type Description System.Int32 | Improve this Doc View Source MaxValue Represents the maximum NpgsqlTimeSpan . This field is read-only. Declaration public static readonly NpgsqlTimeSpan MaxValue Field Value Type Description NpgsqlTimeSpan | Improve this Doc View Source MinValue Represents the minimum NpgsqlTimeSpan . This field is read-only. Declaration public static readonly NpgsqlTimeSpan MinValue Field Value Type Description NpgsqlTimeSpan | Improve this Doc View Source MonthsPerYear Represents the number of months in a year. This field is constant. Declaration public const int MonthsPerYear = 12 Field Value Type Description System.Int32 | Improve this Doc View Source TicksPerDay Represents the number of ticks (100ns periods) in one day. This field is constant. Declaration public const long TicksPerDay = 864000000000L Field Value Type Description System.Int64 | Improve this Doc View Source TicksPerHour Represents the number of ticks (100ns periods) in one hour. This field is constant. Declaration public const long TicksPerHour = 36000000000L Field Value Type Description System.Int64 | Improve this Doc View Source TicksPerMicrosecond Represents the number of ticks (100ns periods) in one microsecond. This field is constant. Declaration public const long TicksPerMicrosecond = 10L Field Value Type Description System.Int64 | Improve this Doc View Source TicksPerMillsecond Represents the number of ticks (100ns periods) in one millisecond. This field is constant. Declaration public const long TicksPerMillsecond = 10000L Field Value Type Description System.Int64 | Improve this Doc View Source TicksPerMinute Represents the number of ticks (100ns periods) in one minute. This field is constant. Declaration public const long TicksPerMinute = 600000000L Field Value Type Description System.Int64 | Improve this Doc View Source TicksPerMonth Represents the number of ticks (100ns periods) in one day, assuming 30 days per month. DaysPerMonth Declaration public const long TicksPerMonth = 25920000000000L Field Value Type Description System.Int64 | Improve this Doc View Source TicksPerSecond Represents the number of ticks (100ns periods) in one second. This field is constant. Declaration public const long TicksPerSecond = 10000000L Field Value Type Description System.Int64 | Improve this Doc View Source Zero Represents the zero NpgsqlTimeSpan . This field is read-only. Declaration public static readonly NpgsqlTimeSpan Zero Field Value Type Description NpgsqlTimeSpan Properties | Improve this Doc View Source Days Gets the number of days held in the instance. Note that this does not pay attention to a time component with -24 or less hours or 24 or more hours, unless JustifyDays() has been called to produce this instance. Declaration public int Days { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Hours Gets the number of whole hours held in the instance. Note that this can be less than -23 or greater than 23 unless JustifyDays() has been used to produce this instance. Declaration public int Hours { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Microseconds Gets the number of whole microseconds held in the instance. An in the range [-999999, 999999]. Declaration public int Microseconds { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Milliseconds Gets the number of whole milliseconds held in the instance. An in the range [-999, 999]. Declaration public int Milliseconds { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Minutes Gets the number of whole minutes held in the instance. An in the range [-59, 59]. Declaration public int Minutes { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Months Gets the number of months held in the instance. Note that this does not pay attention to a day component with -30 or less days or 30 or more days, unless JustifyMonths() has been called to produce this instance. Declaration public int Months { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Seconds Gets the number of whole seconds held in the instance. An in the range [-59, 59]. Declaration public int Seconds { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Ticks The total number of ticks(100ns units) contained. This is the resolution of the NpgsqlTimeSpan type. This ignores the number of days and months held. If you want them included use UnjustifyInterval() first. The resolution of the PostgreSQL interval type is by default 1µs = 1,000 ns. It may be smaller as follows: interval(0)resolution of 1s (1 second) interval(1)resolution of 100ms = 0.1s (100 milliseconds) interval(2)resolution of 10ms = 0.01s (10 milliseconds) interval(3)resolution of 1ms = 0.001s (1 millisecond) interval(4)resolution of 100µs = 0.0001s (100 microseconds) interval(5)resolution of 10µs = 0.00001s (10 microseconds) interval(6) or intervalresolution of 1µs = 0.000001s (1 microsecond) As such, if the 100-nanosecond resolution is significant to an application, a PostgreSQL interval will not suffice for those purposes. In more frequent cases though, the resolution of the interval suffices. NpgsqlTimeSpan will always suffice to handle the resolution of any interval value, and upon writing to the database, will be rounded to the resolution used. The number of ticks in the instance. Declaration public long Ticks { get; } Property Value Type Description System.Int64 | Improve this Doc View Source Time Returns a System.TimeSpan representing the time component of the instance. Note that this may have a value beyond the range ±23:59:59.9999999 unless JustifyDays() has been called to produce this instance. Declaration public TimeSpan Time { get; } Property Value Type Description System.TimeSpan | Improve this Doc View Source TotalDays The total number of days in the instance, assuming 24 hours in each day and 30 days in a month. Declaration public double TotalDays { get; } Property Value Type Description System.Double | Improve this Doc View Source TotalHours The total number of hours in the instance, assuming 24 hours in each day and 30 days in a month. Declaration public double TotalHours { get; } Property Value Type Description System.Double | Improve this Doc View Source TotalMicroseconds The total number of microseconds in the instance, assuming 24 hours in each day and 30 days in a month. Declaration public double TotalMicroseconds { get; } Property Value Type Description System.Double | Improve this Doc View Source TotalMilliseconds The total number of milliseconds in the instance, assuming 24 hours in each day and 30 days in a month. Declaration public double TotalMilliseconds { get; } Property Value Type Description System.Double | Improve this Doc View Source TotalMinutes The total number of minutes in the instance, assuming 24 hours in each day and 30 days in a month. Declaration public double TotalMinutes { get; } Property Value Type Description System.Double | Improve this Doc View Source TotalMonths The total number of months in the instance, assuming 24 hours in each day and 30 days in a month. Declaration public double TotalMonths { get; } Property Value Type Description System.Double | Improve this Doc View Source TotalSeconds The total number of seconds in the instance, assuming 24 hours in each day and 30 days in a month. Declaration public double TotalSeconds { get; } Property Value Type Description System.Double | Improve this Doc View Source TotalTicks The total number of ticks (100ns units) in the instance, assuming 24 hours in each day and 30 days in a month. Declaration public long TotalTicks { get; } Property Value Type Description System.Int64 Methods | Improve this Doc View Source Add(NpgsqlTimeSpan) Adds another interval to this instance and returns the result. Declaration public NpgsqlTimeSpan Add(NpgsqlTimeSpan interval) Parameters Type Name Description NpgsqlTimeSpan interval An NpgsqlTimeSpan to add to this instance. Returns Type Description NpgsqlTimeSpan An NpgsqlTimeSpan whose values are the sums of the two instances. | Improve this Doc View Source Canonicalize() Produces a canonical NpgslInterval with 0 months and hours in the range of [-23, 23]. While the fact that for many purposes, two different NpgsqlTimeSpan instances could be considered equivalent (e.g. one with 2days, 3hours and one with 1day 27hours) there are different possible canonical forms. E.g. we could move all excess hours into days and all excess days into months and have the most readable form, or we could move everything into the ticks and have the form that allows for the easiest arithmetic) the form chosen has two important properties that make it the best choice. First, it is closest two how System.TimeSpan objects are most often represented. Second, it is compatible with results of many PostgreSQL functions, particularly with age() and the results of subtracting one date, time or timestamp from another. Note that the results of casting a System.TimeSpan to NpgsqlTimeSpan is canonicalised. Declaration public NpgsqlTimeSpan Canonicalize() Returns Type Description NpgsqlTimeSpan An NpgsqlTimeSpan based on this one, but with months converted to multiples of ±30days and with any hours outside of the range [-23, 23] converted into days. | Improve this Doc View Source Compare(NpgsqlTimeSpan, NpgsqlTimeSpan) Compares two NpgsqlTimeSpan instances. Declaration public static int Compare(NpgsqlTimeSpan x, NpgsqlTimeSpan y) Parameters Type Name Description NpgsqlTimeSpan x The first NpgsqlTimeSpan . NpgsqlTimeSpan y The second NpgsqlTimeSpan . Returns Type Description System.Int32 0 if the two are equal or equivalent. A value greater than zero if x is greater than y, a value less than zero if x is less than y. | Improve this Doc View Source CompareTo(NpgsqlTimeSpan) Compares this instance with another/ Declaration public int CompareTo(NpgsqlTimeSpan other) Parameters Type Name Description NpgsqlTimeSpan other An NpgsqlTimeSpan to compare this with. Returns Type Description System.Int32 0 if the instances are equal or equivalent. A value less than zero if this instance is less than the argument. A value greater than zero if this instance is greater than the instance. Implements System.IComparable<T>.CompareTo(T) | Improve this Doc View Source CompareTo(Object) Compares this instance with another/ Declaration public int CompareTo(object other) Parameters Type Name Description System.Object other An object to compare this with. Returns Type Description System.Int32 0 if the argument is an NpgsqlTimeSpan and the instances are equal or equivalent. A value less than zero if the argument is an NpgsqlTimeSpan and this instance is less than the argument. A value greater than zero if the argument is an NpgsqlTimeSpan and this instance is greater than the instance. Implements System.IComparable.CompareTo(System.Object) Exceptions Type Condition System.ArgumentException The argument is not an NpgsqlTimeSpan . | Improve this Doc View Source Duration() This absolute value of this instance. In the case of some, but not all, components being negative, the rules used for justification are used to determine if the instance is positive or negative. Declaration public NpgsqlTimeSpan Duration() Returns Type Description NpgsqlTimeSpan An NpgsqlTimeSpan whose value is the absolute value of this instance. | Improve this Doc View Source Equals(NpgsqlTimeSpan) Returns true if another NpgsqlTimeSpan is exactly the same as this instance. Declaration public bool Equals(NpgsqlTimeSpan other) Parameters Type Name Description NpgsqlTimeSpan other An NpgsqlTimeSpan for comparison. Returns Type Description System.Boolean true if the two NpgsqlTimeSpan instances are exactly the same, false otherwise. Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Returns true if another object is an NpgsqlTimeSpan , that is exactly the same as this instance Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj An System.Object for comparison. Returns Type Description System.Boolean true if the argument is an NpgsqlTimeSpan and is exactly the same as this one, false otherwise. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source FromDays(Double) Creates an NpgsqlTimeSpan from a number of days. Declaration public static NpgsqlTimeSpan FromDays(double days) Parameters Type Name Description System.Double days The number of days in the interval. Returns Type Description NpgsqlTimeSpan A Canonicalize() d NpgsqlTimeSpan with the given number of days. | Improve this Doc View Source FromHours(Double) Creates an NpgsqlTimeSpan from a number of hours. Declaration public static NpgsqlTimeSpan FromHours(double hours) Parameters Type Name Description System.Double hours The number of hours in the interval. Returns Type Description NpgsqlTimeSpan A Canonicalize() d NpgsqlTimeSpan with the given number of hours. | Improve this Doc View Source FromMicroseconds(Double) Creates an NpgsqlTimeSpan from a number of microseconds. Declaration public static NpgsqlTimeSpan FromMicroseconds(double micro) Parameters Type Name Description System.Double micro The number of microseconds in the interval. Returns Type Description NpgsqlTimeSpan A Canonicalize() d NpgsqlTimeSpan with the given number of microseconds. | Improve this Doc View Source FromMilliseconds(Double) Creates an NpgsqlTimeSpan from a number of milliseconds. Declaration public static NpgsqlTimeSpan FromMilliseconds(double milli) Parameters Type Name Description System.Double milli The number of milliseconds in the interval. Returns Type Description NpgsqlTimeSpan A Canonicalize() d NpgsqlTimeSpan with the given number of milliseconds. | Improve this Doc View Source FromMinutes(Double) Creates an NpgsqlTimeSpan from a number of minutes. Declaration public static NpgsqlTimeSpan FromMinutes(double minutes) Parameters Type Name Description System.Double minutes The number of minutes in the interval. Returns Type Description NpgsqlTimeSpan A Canonicalize() d NpgsqlTimeSpan with the given number of minutes. | Improve this Doc View Source FromMonths(Double) Creates an NpgsqlTimeSpan from a number of months. Declaration public static NpgsqlTimeSpan FromMonths(double months) Parameters Type Name Description System.Double months The number of months in the interval. Returns Type Description NpgsqlTimeSpan A Canonicalize() d NpgsqlTimeSpan with the given number of months. | Improve this Doc View Source FromSeconds(Double) Creates an NpgsqlTimeSpan from a number of seconds. Declaration public static NpgsqlTimeSpan FromSeconds(double seconds) Parameters Type Name Description System.Double seconds The number of seconds in the interval. Returns Type Description NpgsqlTimeSpan A Canonicalize() d NpgsqlTimeSpan with the given number of seconds. | Improve this Doc View Source FromTicks(Int64) Creates an NpgsqlTimeSpan from a number of ticks. Declaration public static NpgsqlTimeSpan FromTicks(long ticks) Parameters Type Name Description System.Int64 ticks The number of ticks (100ns units) in the interval. Returns Type Description NpgsqlTimeSpan A Canonicalize() d NpgsqlTimeSpan with the given number of ticks. | Improve this Doc View Source GetHashCode() A hash code suitable for uses with hashing algorithms. Declaration public override int GetHashCode() Returns Type Description System.Int32 An signed integer. Overrides System.ValueType.GetHashCode() | Improve this Doc View Source JustifyDays() Equivalent to PostgreSQL's justify_days function. Declaration public NpgsqlTimeSpan JustifyDays() Returns Type Description NpgsqlTimeSpan An NpgsqlTimeSpan based on this one, but with any hours outside of the range [-23, 23] converted into days. | Improve this Doc View Source JustifyInterval() Equivalent to PostgreSQL's justify_interval function. Declaration public NpgsqlTimeSpan JustifyInterval() Returns Type Description NpgsqlTimeSpan An NpgsqlTimeSpan based on this one, but with any months converted to multiples of ±30days and then with any days converted to multiples of ±24hours | Improve this Doc View Source JustifyMonths() Equivalent to PostgreSQL's justify_months function. Declaration public NpgsqlTimeSpan JustifyMonths() Returns Type Description NpgsqlTimeSpan An NpgsqlTimeSpan based on this one, but with any days outside of the range [-30, 30] converted into months. | Improve this Doc View Source Negate() Returns an NpgsqlTimeSpan whose value is the negated value of this instance. Declaration public NpgsqlTimeSpan Negate() Returns Type Description NpgsqlTimeSpan An NpgsqlTimeSpan whose value is the negated value of this instance. | Improve this Doc View Source Parse(String) Parses a System.String and returns a NpgsqlTimeSpan instance. Designed to use the formats generally returned by PostgreSQL. Declaration public static NpgsqlTimeSpan Parse(string str) Parameters Type Name Description System.String str The System.String to parse. Returns Type Description NpgsqlTimeSpan An NpgsqlTimeSpan represented by the argument. Exceptions Type Condition System.ArgumentNullException The string was null. System.OverflowException A value obtained from parsing the string exceeded the values allowed for the relevant component. System.FormatException The string was not in a format that could be parsed to produce an NpgsqlTimeSpan . | Improve this Doc View Source Subtract(NpgsqlTimeSpan) Subtracts another interval from this instance and returns the result. Declaration public NpgsqlTimeSpan Subtract(NpgsqlTimeSpan interval) Parameters Type Name Description NpgsqlTimeSpan interval An NpgsqlTimeSpan to subtract from this instance. Returns Type Description NpgsqlTimeSpan An NpgsqlTimeSpan whose values are the differences of the two instances. | Improve this Doc View Source ToString() Create a System.String representation of the NpgsqlTimeSpan instance. The format returned is of the form: [M mon[s]] [d day[s]] [HH:mm:ss[.f[f[f[f[f[f[f[f[f]]]]]]]]]] A zero NpgsqlTimeSpan is represented as 00:00:00 Ticks are 100ns, Postgress resolution is only to 1µs at most. Hence we lose 1 or more decimal precision in storing values in the database. Despite this, this method will output that extra digit of precision. It's forward-compatible with any future increases in resolution up to 100ns, and also makes this ToString() more applicable to any other use-case. Declaration public override string ToString() Returns Type Description System.String The System.String representation. Overrides System.ValueType.ToString() | Improve this Doc View Source TryParse(String, out NpgsqlTimeSpan) Attempt to parse a System.String to produce an NpgsqlTimeSpan . Declaration public static bool TryParse(string str, out NpgsqlTimeSpan result) Parameters Type Name Description System.String str The System.String to parse. NpgsqlTimeSpan result (out) The NpgsqlTimeSpan produced, or Zero if the parsing failed. Returns Type Description System.Boolean true if the parsing succeeded, false otherwise. | Improve this Doc View Source UnjustifyDays() Opposite to PostgreSQL's justify_days function. Declaration public NpgsqlTimeSpan UnjustifyDays() Returns Type Description NpgsqlTimeSpan An NpgsqlTimeSpan based on this one, but with any days converted to multiples of ±24hours. | Improve this Doc View Source UnjustifyInterval() Opposite to PostgreSQL's justify_interval function. Declaration public NpgsqlTimeSpan UnjustifyInterval() Returns Type Description NpgsqlTimeSpan An NpgsqlTimeSpan based on this one, but with any months converted to multiples of ±30days and then any days converted to multiples of ±24hours; | Improve this Doc View Source UnjustifyMonths() Opposite to PostgreSQL's justify_months function. Declaration public NpgsqlTimeSpan UnjustifyMonths() Returns Type Description NpgsqlTimeSpan An NpgsqlTimeSpan based on this one, but with any months converted to multiples of ±30days. Operators | Improve this Doc View Source Addition(NpgsqlTimeSpan, NpgsqlTimeSpan) Adds two NpgsqlTimeSpan together. Declaration public static NpgsqlTimeSpan operator +(NpgsqlTimeSpan x, NpgsqlTimeSpan y) Parameters Type Name Description NpgsqlTimeSpan x The first NpgsqlTimeSpan to add. NpgsqlTimeSpan y The second NpgsqlTimeSpan to add. Returns Type Description NpgsqlTimeSpan An NpgsqlTimeSpan whose values are the sum of the arguments. | Improve this Doc View Source Equality(NpgsqlTimeSpan, NpgsqlTimeSpan) Returns true if two NpgsqlTimeSpan are exactly the same. Declaration public static bool operator ==(NpgsqlTimeSpan x, NpgsqlTimeSpan y) Parameters Type Name Description NpgsqlTimeSpan x The first NpgsqlTimeSpan to compare. NpgsqlTimeSpan y The second NpgsqlTimeSpan to compare. Returns Type Description System.Boolean true if the two arguments are exactly the same, false otherwise. | Improve this Doc View Source Explicit(NpgsqlTimeSpan to TimeSpan) Explicit cast of an NpgsqlTimeSpan to a System.TimeSpan . Declaration public static explicit operator TimeSpan(NpgsqlTimeSpan interval) Parameters Type Name Description NpgsqlTimeSpan interval A NpgsqlTimeSpan . Returns Type Description System.TimeSpan An equivalent System.TimeSpan . | Improve this Doc View Source GreaterThan(NpgsqlTimeSpan, NpgsqlTimeSpan) Compares two NpgsqlTimeSpan instances to see if the first is greater than the second Declaration public static bool operator>(NpgsqlTimeSpan x, NpgsqlTimeSpan y) Parameters Type Name Description NpgsqlTimeSpan x The first NpgsqlTimeSpan to compare. NpgsqlTimeSpan y The second NpgsqlTimeSpan to compare. Returns Type Description System.Boolean true if the first NpgsqlTimeSpan is greater than second, false otherwise. | Improve this Doc View Source GreaterThanOrEqual(NpgsqlTimeSpan, NpgsqlTimeSpan) Compares two NpgsqlTimeSpan instances to see if the first is greater than or equivalent the second Declaration public static bool operator >=(NpgsqlTimeSpan x, NpgsqlTimeSpan y) Parameters Type Name Description NpgsqlTimeSpan x The first NpgsqlTimeSpan to compare. NpgsqlTimeSpan y The second NpgsqlTimeSpan to compare. Returns Type Description System.Boolean true if the first NpgsqlTimeSpan is greater than or equivalent to the second, false otherwise. | Improve this Doc View Source Implicit(TimeSpan to NpgsqlTimeSpan) Implicit cast of a System.TimeSpan to an NpgsqlTimeSpan Declaration public static implicit operator NpgsqlTimeSpan(TimeSpan timespan) Parameters Type Name Description System.TimeSpan timespan A System.TimeSpan Returns Type Description NpgsqlTimeSpan An eqivalent, canonical, NpgsqlTimeSpan . | Improve this Doc View Source Inequality(NpgsqlTimeSpan, NpgsqlTimeSpan) Returns false if two NpgsqlTimeSpan are exactly the same. Declaration public static bool operator !=(NpgsqlTimeSpan x, NpgsqlTimeSpan y) Parameters Type Name Description NpgsqlTimeSpan x The first NpgsqlTimeSpan to compare. NpgsqlTimeSpan y The second NpgsqlTimeSpan to compare. Returns Type Description System.Boolean false if the two arguments are exactly the same, true otherwise. | Improve this Doc View Source LessThan(NpgsqlTimeSpan, NpgsqlTimeSpan) Compares two NpgsqlTimeSpan instances to see if the first is less than the second Declaration public static bool operator <(NpgsqlTimeSpan x, NpgsqlTimeSpan y) Parameters Type Name Description NpgsqlTimeSpan x The first NpgsqlTimeSpan to compare. NpgsqlTimeSpan y The second NpgsqlTimeSpan to compare. Returns Type Description System.Boolean true if the first NpgsqlTimeSpan is less than second, false otherwise. | Improve this Doc View Source LessThanOrEqual(NpgsqlTimeSpan, NpgsqlTimeSpan) Compares two NpgsqlTimeSpan instances to see if the first is less than or equivalent to the second Declaration public static bool operator <=(NpgsqlTimeSpan x, NpgsqlTimeSpan y) Parameters Type Name Description NpgsqlTimeSpan x The first NpgsqlTimeSpan to compare. NpgsqlTimeSpan y The second NpgsqlTimeSpan to compare. Returns Type Description System.Boolean true if the first NpgsqlTimeSpan is less than or equivalent to second, false otherwise. | Improve this Doc View Source Subtraction(NpgsqlTimeSpan, NpgsqlTimeSpan) Subtracts one NpgsqlTimeSpan from another. Declaration public static NpgsqlTimeSpan operator -(NpgsqlTimeSpan x, NpgsqlTimeSpan y) Parameters Type Name Description NpgsqlTimeSpan x The NpgsqlTimeSpan to subtract the other from. NpgsqlTimeSpan y The NpgsqlTimeSpan to subtract from the other. Returns Type Description NpgsqlTimeSpan An NpgsqlTimeSpan whose values are the difference of the arguments | Improve this Doc View Source UnaryNegation(NpgsqlTimeSpan) Negates an NpgsqlTimeSpan instance. Declaration public static NpgsqlTimeSpan operator -(NpgsqlTimeSpan x) Parameters Type Name Description NpgsqlTimeSpan x An NpgsqlTimeSpan . Returns Type Description NpgsqlTimeSpan The negation of the argument. | Improve this Doc View Source UnaryPlus(NpgsqlTimeSpan) Returns the instance. Declaration public static NpgsqlTimeSpan operator +(NpgsqlTimeSpan x) Parameters Type Name Description NpgsqlTimeSpan x An NpgsqlTimeSpan . Returns Type Description NpgsqlTimeSpan The argument. Explicit Interface Implementations | Improve this Doc View Source IComparer<NpgsqlTimeSpan>.Compare(NpgsqlTimeSpan, NpgsqlTimeSpan) Declaration int IComparer<NpgsqlTimeSpan>.Compare(NpgsqlTimeSpan x, NpgsqlTimeSpan y) Parameters Type Name Description NpgsqlTimeSpan x NpgsqlTimeSpan y Returns Type Description System.Int32 Implements System.Collections.Generic.IComparer<T>.Compare(T, T) | Improve this Doc View Source IComparer.Compare(Object, Object) Declaration int IComparer.Compare(object x, object y) Parameters Type Name Description System.Object x System.Object y Returns Type Description System.Int32 Implements System.Collections.IComparer.Compare(System.Object, System.Object) See Also Ticks JustifyDays() JustifyMonths() Canonicalize()"
  },
  "api/NpgsqlTypes.NpgsqlTsQuery.NodeKind.html": {
    "href": "api/NpgsqlTypes.NpgsqlTsQuery.NodeKind.html",
    "title": "Enum NpgsqlTsQuery.NodeKind | Npgsql Documentation",
    "keywords": "Enum NpgsqlTsQuery.NodeKind NodeKind Namespace :NpgsqlTypes Assembly :Npgsql.dll Syntax public enum NodeKind : byte Fields Name Description And And operator Empty Represents the empty tsquery. Should only be used at top level. Lexeme Lexeme Not Not operator Or Or operator"
  },
  "api/NpgsqlTypes.NpgsqlTsQuery.html": {
    "href": "api/NpgsqlTypes.NpgsqlTsQuery.html",
    "title": "Class NpgsqlTsQuery | Npgsql Documentation",
    "keywords": "Class NpgsqlTsQuery Represents a PostgreSQL tsquery. This is the base class for lexeme, not, and and or nodes. Inheritance System.Object NpgsqlTsQuery Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :NpgsqlTypes Assembly :Npgsql.dll Syntax public abstract class NpgsqlTsQuery Properties | Improve this Doc View Source Kind Node kind Declaration public NpgsqlTsQuery.NodeKind Kind { get; protected set; } Property Value Type Description NpgsqlTsQuery.NodeKind Methods | Improve this Doc View Source Parse(String) Parses a tsquery in PostgreSQL's text format. Declaration public static NpgsqlTsQuery Parse(string value) Parameters Type Name Description System.String value Returns Type Description NpgsqlTsQuery | Improve this Doc View Source ToString() Writes the tsquery in PostgreSQL's text format. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/NpgsqlTypes.NpgsqlTsQueryAnd.html": {
    "href": "api/NpgsqlTypes.NpgsqlTsQueryAnd.html",
    "title": "Class NpgsqlTsQueryAnd | Npgsql Documentation",
    "keywords": "Class NpgsqlTsQueryAnd TsQuery And node. Inheritance System.Object NpgsqlTsQuery NpgsqlTsQueryBinOp NpgsqlTsQueryAnd Inherited Members NpgsqlTsQueryBinOp.Left NpgsqlTsQueryBinOp.Right NpgsqlTsQuery.Kind NpgsqlTsQuery.ToString() NpgsqlTsQuery.Parse(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :NpgsqlTypes Assembly :Npgsql.dll Syntax public sealed class NpgsqlTsQueryAnd : NpgsqlTsQueryBinOp Constructors | Improve this Doc View Source NpgsqlTsQueryAnd(NpgsqlTsQuery, NpgsqlTsQuery) Creates an and operator, with two given child nodes. Declaration public NpgsqlTsQueryAnd(NpgsqlTsQuery left, NpgsqlTsQuery right) Parameters Type Name Description NpgsqlTsQuery left NpgsqlTsQuery right"
  },
  "api/NpgsqlTypes.NpgsqlTsQueryBinOp.html": {
    "href": "api/NpgsqlTypes.NpgsqlTsQueryBinOp.html",
    "title": "Class NpgsqlTsQueryBinOp | Npgsql Documentation",
    "keywords": "Class NpgsqlTsQueryBinOp Base class for TsQuery binary operators (& and |). Inheritance System.Object NpgsqlTsQuery NpgsqlTsQueryBinOp Inherited Members NpgsqlTsQuery.Kind NpgsqlTsQuery.ToString() NpgsqlTsQuery.Parse(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :NpgsqlTypes Assembly :Npgsql.dll Syntax public abstract class NpgsqlTsQueryBinOp : NpgsqlTsQuery Properties | Improve this Doc View Source Left Left child Declaration public NpgsqlTsQuery Left { get; set; } Property Value Type Description NpgsqlTsQuery | Improve this Doc View Source Right Right child Declaration public NpgsqlTsQuery Right { get; set; } Property Value Type Description NpgsqlTsQuery"
  },
  "api/NpgsqlTypes.NpgsqlTsQueryEmpty.html": {
    "href": "api/NpgsqlTypes.NpgsqlTsQueryEmpty.html",
    "title": "Class NpgsqlTsQueryEmpty | Npgsql Documentation",
    "keywords": "Class NpgsqlTsQueryEmpty Represents an empty tsquery. Shold only be used as top node. Inheritance System.Object NpgsqlTsQuery NpgsqlTsQueryEmpty Inherited Members NpgsqlTsQuery.Kind NpgsqlTsQuery.ToString() NpgsqlTsQuery.Parse(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :NpgsqlTypes Assembly :Npgsql.dll Syntax public sealed class NpgsqlTsQueryEmpty : NpgsqlTsQuery Constructors | Improve this Doc View Source NpgsqlTsQueryEmpty() Creates a tsquery that represents an empty query. Should not be used as child node. Declaration public NpgsqlTsQueryEmpty()"
  },
  "api/NpgsqlTypes.NpgsqlTsQueryLexeme.Weight.html": {
    "href": "api/NpgsqlTypes.NpgsqlTsQueryLexeme.Weight.html",
    "title": "Enum NpgsqlTsQueryLexeme.Weight | Npgsql Documentation",
    "keywords": "Enum NpgsqlTsQueryLexeme.Weight Weight enum, can be OR'ed together. Namespace :NpgsqlTypes Assembly :Npgsql.dll Syntax [Flags] public enum Weight Fields Name Description A A B B C C D D None None"
  },
  "api/NpgsqlTypes.NpgsqlTsQueryLexeme.html": {
    "href": "api/NpgsqlTypes.NpgsqlTsQueryLexeme.html",
    "title": "Class NpgsqlTsQueryLexeme | Npgsql Documentation",
    "keywords": "Class NpgsqlTsQueryLexeme TsQuery Lexeme node. Inheritance System.Object NpgsqlTsQuery NpgsqlTsQueryLexeme Inherited Members NpgsqlTsQuery.Kind NpgsqlTsQuery.ToString() NpgsqlTsQuery.Parse(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :NpgsqlTypes Assembly :Npgsql.dll Syntax public sealed class NpgsqlTsQueryLexeme : NpgsqlTsQuery Constructors | Improve this Doc View Source NpgsqlTsQueryLexeme(String) Creates a tsquery lexeme with only lexeme text. Declaration public NpgsqlTsQueryLexeme(string text) Parameters Type Name Description System.String text Lexeme text. | Improve this Doc View Source NpgsqlTsQueryLexeme(String, NpgsqlTsQueryLexeme.Weight) Creates a tsquery lexeme with lexeme text and weights. Declaration public NpgsqlTsQueryLexeme(string text, NpgsqlTsQueryLexeme.Weight weights) Parameters Type Name Description System.String text Lexeme text. NpgsqlTsQueryLexeme.Weight weights Bitmask of enum Weight. | Improve this Doc View Source NpgsqlTsQueryLexeme(String, NpgsqlTsQueryLexeme.Weight, Boolean) Creates a tsquery lexeme with lexeme text, weights and prefix search flag. Declaration public NpgsqlTsQueryLexeme(string text, NpgsqlTsQueryLexeme.Weight weights, bool isPrefixSearch) Parameters Type Name Description System.String text Lexeme text. NpgsqlTsQueryLexeme.Weight weights Bitmask of enum Weight. System.Boolean isPrefixSearch Is prefix search? Properties | Improve this Doc View Source IsPrefixSearch Prefix search. Declaration public bool IsPrefixSearch { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Text Lexeme text. Declaration public string Text { get; set; } Property Value Type Description System.String | Improve this Doc View Source Weights Weights is a bitmask of the Weight enum. Declaration public NpgsqlTsQueryLexeme.Weight Weights { get; set; } Property Value Type Description NpgsqlTsQueryLexeme.Weight"
  },
  "api/NpgsqlTypes.NpgsqlTsQueryNot.html": {
    "href": "api/NpgsqlTypes.NpgsqlTsQueryNot.html",
    "title": "Class NpgsqlTsQueryNot | Npgsql Documentation",
    "keywords": "Class NpgsqlTsQueryNot TsQuery Not node. Inheritance System.Object NpgsqlTsQuery NpgsqlTsQueryNot Inherited Members NpgsqlTsQuery.Kind NpgsqlTsQuery.ToString() NpgsqlTsQuery.Parse(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :NpgsqlTypes Assembly :Npgsql.dll Syntax public sealed class NpgsqlTsQueryNot : NpgsqlTsQuery Constructors | Improve this Doc View Source NpgsqlTsQueryNot(NpgsqlTsQuery) Creates a not operator, with a given child node. Declaration public NpgsqlTsQueryNot(NpgsqlTsQuery child) Parameters Type Name Description NpgsqlTsQuery child Properties | Improve this Doc View Source Child Child node Declaration public NpgsqlTsQuery Child { get; set; } Property Value Type Description NpgsqlTsQuery"
  },
  "api/NpgsqlTypes.NpgsqlTsQueryOr.html": {
    "href": "api/NpgsqlTypes.NpgsqlTsQueryOr.html",
    "title": "Class NpgsqlTsQueryOr | Npgsql Documentation",
    "keywords": "Class NpgsqlTsQueryOr TsQuery Or Node. Inheritance System.Object NpgsqlTsQuery NpgsqlTsQueryBinOp NpgsqlTsQueryOr Inherited Members NpgsqlTsQueryBinOp.Left NpgsqlTsQueryBinOp.Right NpgsqlTsQuery.Kind NpgsqlTsQuery.ToString() NpgsqlTsQuery.Parse(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :NpgsqlTypes Assembly :Npgsql.dll Syntax public sealed class NpgsqlTsQueryOr : NpgsqlTsQueryBinOp Constructors | Improve this Doc View Source NpgsqlTsQueryOr(NpgsqlTsQuery, NpgsqlTsQuery) Creates an or operator, with two given child nodes. Declaration public NpgsqlTsQueryOr(NpgsqlTsQuery left, NpgsqlTsQuery right) Parameters Type Name Description NpgsqlTsQuery left NpgsqlTsQuery right"
  },
  "api/NpgsqlTypes.NpgsqlTsVector.Lexeme.Weight.html": {
    "href": "api/NpgsqlTypes.NpgsqlTsVector.Lexeme.Weight.html",
    "title": "Enum NpgsqlTsVector.Lexeme.Weight | Npgsql Documentation",
    "keywords": "Enum NpgsqlTsVector.Lexeme.Weight The weight is labeled from A to D. D is the default, and not printed. Namespace :NpgsqlTypes Assembly :Npgsql.dll Syntax public enum Weight Fields Name Description A A B B C C D D, the default"
  },
  "api/NpgsqlTypes.NpgsqlTsVector.Lexeme.WordEntryPos.html": {
    "href": "api/NpgsqlTypes.NpgsqlTsVector.Lexeme.WordEntryPos.html",
    "title": "Struct NpgsqlTsVector.Lexeme.WordEntryPos | Npgsql Documentation",
    "keywords": "Struct NpgsqlTsVector.Lexeme.WordEntryPos Represents a word entry position and an optional weight. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace :NpgsqlTypes Assembly :Npgsql.dll Syntax public struct WordEntryPos Constructors | Improve this Doc View Source WordEntryPos(Int32, NpgsqlTsVector.Lexeme.Weight) Creates a WordEntryPos with a given position and weight. Declaration public WordEntryPos(int pos, NpgsqlTsVector.Lexeme.Weight weight = NpgsqlTsVector.Lexeme.Weight.D) Parameters Type Name Description System.Int32 pos Position values can range from 1 to 16383; larger numbers are silently set to 16383. NpgsqlTsVector.Lexeme.Weight weight A weight labeled between A and D. Properties | Improve this Doc View Source Pos The position is a 14-bit unsigned integer indicating the position in the text this lexeme occurs. Cannot be 0. Declaration public int Pos { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Weight The weight is labeled from A to D. D is the default, and not printed. Declaration public NpgsqlTsVector.Lexeme.Weight Weight { get; } Property Value Type Description NpgsqlTsVector.Lexeme.Weight Methods | Improve this Doc View Source ToString() Prints this lexeme in PostgreSQL's format, i.e. position is followed by weight (weight is only printed if A, B or C). Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString()"
  },
  "api/NpgsqlTypes.NpgsqlTsVector.Lexeme.html": {
    "href": "api/NpgsqlTypes.NpgsqlTsVector.Lexeme.html",
    "title": "Struct NpgsqlTsVector.Lexeme | Npgsql Documentation",
    "keywords": "Struct NpgsqlTsVector.Lexeme Represents a lexeme. A lexeme consists of a text string and optional word entry positions. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace :NpgsqlTypes Assembly :Npgsql.dll Syntax public struct Lexeme Constructors | Improve this Doc View Source Lexeme(String) Creates a lexeme with no word entry positions. Declaration public Lexeme(string text) Parameters Type Name Description System.String text | Improve this Doc View Source Lexeme(String, List<NpgsqlTsVector.Lexeme.WordEntryPos>) Creates a lexeme with word entry positions. Declaration public Lexeme(string text, List<NpgsqlTsVector.Lexeme.WordEntryPos> wordEntryPositions) Parameters Type Name Description System.String text System.Collections.Generic.List < NpgsqlTsVector.Lexeme.WordEntryPos > wordEntryPositions Properties | Improve this Doc View Source Count Gets the number of word entry positions. Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Item[Int32] Gets a word entry position. Declaration public NpgsqlTsVector.Lexeme.WordEntryPos this[int index] { get; } Parameters Type Name Description System.Int32 index Property Value Type Description NpgsqlTsVector.Lexeme.WordEntryPos | Improve this Doc View Source Text Gets or sets the text. Declaration public string Text { get; set; } Property Value Type Description System.String Methods | Improve this Doc View Source ToString() Creates a string representation in PostgreSQL's format. Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString()"
  },
  "api/NpgsqlTypes.NpgsqlTsVector.html": {
    "href": "api/NpgsqlTypes.NpgsqlTsVector.html",
    "title": "Class NpgsqlTsVector | Npgsql Documentation",
    "keywords": "Class NpgsqlTsVector Represents a PostgreSQL tsvector. Inheritance System.Object NpgsqlTsVector Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :NpgsqlTypes Assembly :Npgsql.dll Syntax public class NpgsqlTsVector : IEnumerable<NpgsqlTsVector.Lexeme>, IEnumerable Constructors | Improve this Doc View Source NpgsqlTsVector(List<NpgsqlTsVector.Lexeme>) Constructs an NpgsqlTsVector from a list of lexemes. This also sorts and remove duplicates. Declaration public NpgsqlTsVector(List<NpgsqlTsVector.Lexeme> lexemes) Parameters Type Name Description System.Collections.Generic.List < NpgsqlTsVector.Lexeme > lexemes Properties | Improve this Doc View Source Count Gets the number of lexemes. Declaration public int Count { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Item[Int32] Returns the lexeme at a specific index Declaration public NpgsqlTsVector.Lexeme this[int index] { get; } Parameters Type Name Description System.Int32 index Property Value Type Description NpgsqlTsVector.Lexeme Methods | Improve this Doc View Source GetEnumerator() Returns an enumerator. Declaration public IEnumerator<NpgsqlTsVector.Lexeme> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < NpgsqlTsVector.Lexeme > Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() | Improve this Doc View Source Parse(String) Parses a tsvector in PostgreSQL's text format. Declaration public static NpgsqlTsVector Parse(string value) Parameters Type Name Description System.String value Returns Type Description NpgsqlTsVector | Improve this Doc View Source ToString() Gets a string representation in PostgreSQL's format. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Returns an enumerator. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator()"
  },
  "api/Npgsql.NpgsqlRowUpdatedEventArgs.html": {
    "href": "api/Npgsql.NpgsqlRowUpdatedEventArgs.html",
    "title": "Class NpgsqlRowUpdatedEventArgs | Npgsql Documentation",
    "keywords": "Class NpgsqlRowUpdatedEventArgs Inheritance System.Object System.EventArgs System.Data.Common.RowUpdatedEventArgs NpgsqlRowUpdatedEventArgs Inherited Members System.Data.Common.RowUpdatedEventArgs.CopyToRows(System.Data.DataRow[]) System.Data.Common.RowUpdatedEventArgs.CopyToRows(System.Data.DataRow[], System.Int32) System.Data.Common.RowUpdatedEventArgs.Command System.Data.Common.RowUpdatedEventArgs.Errors System.Data.Common.RowUpdatedEventArgs.RecordsAffected System.Data.Common.RowUpdatedEventArgs.Row System.Data.Common.RowUpdatedEventArgs.RowCount System.Data.Common.RowUpdatedEventArgs.StatementType System.Data.Common.RowUpdatedEventArgs.Status System.Data.Common.RowUpdatedEventArgs.TableMapping System.EventArgs.Empty System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Npgsql Assembly :Npgsql.dll Syntax public class NpgsqlRowUpdatedEventArgs : RowUpdatedEventArgs Constructors | Improve this Doc View Source NpgsqlRowUpdatedEventArgs(DataRow, IDbCommand, StatementType, DataTableMapping) Declaration public NpgsqlRowUpdatedEventArgs(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping) Parameters Type Name Description System.Data.DataRow dataRow System.Data.IDbCommand command System.Data.StatementType statementType System.Data.Common.DataTableMapping tableMapping"
  },
  "api/Npgsql.NpgsqlRowUpdatedEventHandler.html": {
    "href": "api/Npgsql.NpgsqlRowUpdatedEventHandler.html",
    "title": "Delegate NpgsqlRowUpdatedEventHandler | Npgsql Documentation",
    "keywords": "Delegate NpgsqlRowUpdatedEventHandler Represents the method that handles the RowUpdated events. Namespace :Npgsql Assembly :Npgsql.dll Syntax public delegate void NpgsqlRowUpdatedEventHandler(object sender, NpgsqlRowUpdatedEventArgs e); Parameters Type Name Description System.Object sender The source of the event. NpgsqlRowUpdatedEventArgs e A NpgsqlRowUpdatedEventArgs that contains the event data."
  },
  "api/Npgsql.NpgsqlRowUpdatingEventArgs.html": {
    "href": "api/Npgsql.NpgsqlRowUpdatingEventArgs.html",
    "title": "Class NpgsqlRowUpdatingEventArgs | Npgsql Documentation",
    "keywords": "Class NpgsqlRowUpdatingEventArgs Inheritance System.Object System.EventArgs System.Data.Common.RowUpdatingEventArgs NpgsqlRowUpdatingEventArgs Inherited Members System.Data.Common.RowUpdatingEventArgs.BaseCommand System.Data.Common.RowUpdatingEventArgs.Command System.Data.Common.RowUpdatingEventArgs.Errors System.Data.Common.RowUpdatingEventArgs.Row System.Data.Common.RowUpdatingEventArgs.StatementType System.Data.Common.RowUpdatingEventArgs.Status System.Data.Common.RowUpdatingEventArgs.TableMapping System.EventArgs.Empty System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Npgsql Assembly :Npgsql.dll Syntax public class NpgsqlRowUpdatingEventArgs : RowUpdatingEventArgs Constructors | Improve this Doc View Source NpgsqlRowUpdatingEventArgs(DataRow, IDbCommand, StatementType, DataTableMapping) Declaration public NpgsqlRowUpdatingEventArgs(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping) Parameters Type Name Description System.Data.DataRow dataRow System.Data.IDbCommand command System.Data.StatementType statementType System.Data.Common.DataTableMapping tableMapping"
  },
  "api/Npgsql.NpgsqlRowUpdatingEventHandler.html": {
    "href": "api/Npgsql.NpgsqlRowUpdatingEventHandler.html",
    "title": "Delegate NpgsqlRowUpdatingEventHandler | Npgsql Documentation",
    "keywords": "Delegate NpgsqlRowUpdatingEventHandler Represents the method that handles the RowUpdating events. Namespace :Npgsql Assembly :Npgsql.dll Syntax public delegate void NpgsqlRowUpdatingEventHandler(object sender, NpgsqlRowUpdatingEventArgs e); Parameters Type Name Description System.Object sender The source of the event. NpgsqlRowUpdatingEventArgs e A NpgsqlRowUpdatingEventArgs that contains the event data."
  },
  "api/Npgsql.NpgsqlSnakeCaseNameTranslator.html": {
    "href": "api/Npgsql.NpgsqlSnakeCaseNameTranslator.html",
    "title": "Class NpgsqlSnakeCaseNameTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlSnakeCaseNameTranslator A name translator which converts standard CLR names (e.g. SomeClass) to snake-case database names (some_class) Inheritance System.Object NpgsqlSnakeCaseNameTranslator Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Npgsql Assembly :Npgsql.dll Syntax public class NpgsqlSnakeCaseNameTranslator : INpgsqlNameTranslator Methods | Improve this Doc View Source TranslateMemberName(String) Given a CLR member name (property or field), translates its name to a database type name. Declaration public string TranslateMemberName(string clrName) Parameters Type Name Description System.String clrName Returns Type Description System.String Implements INpgsqlNameTranslator.TranslateMemberName(String) | Improve this Doc View Source TranslateTypeName(String) Given a CLR type name (e.g class, struct, enum), translates its name to a database type name. Declaration public string TranslateTypeName(string clrName) Parameters Type Name Description System.String clrName Returns Type Description System.String Implements INpgsqlNameTranslator.TranslateTypeName(String)"
  },
  "api/Npgsql.NpgsqlStatement.html": {
    "href": "api/Npgsql.NpgsqlStatement.html",
    "title": "Class NpgsqlStatement | Npgsql Documentation",
    "keywords": "Class NpgsqlStatement Represents a single SQL statement within Npgsql. Instances aren't constructed directly; users should construct an NpgsqlCommand object and populate its CommandText property as in standard ADO.NET. Npgsql will analyze that property and constructed instances of NpgsqlStatement internally. Users can retrieve instances from Statements and access information about statement execution (e.g. affected rows). Inheritance System.Object NpgsqlStatement Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Npgsql Assembly :Npgsql.dll Syntax public class NpgsqlStatement Properties | Improve this Doc View Source OID For an INSERT, the object ID of the inserted row if Rows is 1 and the target table has OIDs; otherwise 0. Declaration public uint OID { get; } Property Value Type Description System.UInt32 | Improve this Doc View Source Rows The number of rows affected or retrieved. Declaration public uint Rows { get; } Property Value Type Description System.UInt32 Remarks See the command tag in the CommandComplete message, http://www.postgresql.org/docs/current/static/protocol-message-formats.html | Improve this Doc View Source SQL The SQL text of the statement. Declaration public string SQL { get; } Property Value Type Description System.String | Improve this Doc View Source StatementType Specifies the type of query, e.g. SELECT. Declaration public StatementType StatementType { get; } Property Value Type Description StatementType Methods | Improve this Doc View Source ToString() Returns the SQL text of the statement. Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/Npgsql.NpgsqlTransaction.html": {
    "href": "api/Npgsql.NpgsqlTransaction.html",
    "title": "Class NpgsqlTransaction | Npgsql Documentation",
    "keywords": "Class NpgsqlTransaction Represents a transaction to be made in a PostgreSQL database. This class cannot be inherited. Inheritance System.Object System.MarshalByRefObject System.Data.Common.DbTransaction NpgsqlTransaction Inherited Members System.Data.Common.DbTransaction.Dispose() System.Data.Common.DbTransaction.System.Data.IDbTransaction.Connection System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.CreateObjRef(System.Type) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Npgsql Assembly :Npgsql.dll Syntax public sealed class NpgsqlTransaction : DbTransaction, IDbTransaction, IDisposable Properties | Improve this Doc View Source Connection Specifies the NpgsqlConnection object associated with the transaction. Declaration public NpgsqlConnection Connection { get; } Property Value Type Description NpgsqlConnection The NpgsqlConnection object associated with the transaction. | Improve this Doc View Source DbConnection Specifies the NpgsqlConnection object associated with the transaction. Declaration protected override DbConnection DbConnection { get; } Property Value Type Description System.Data.Common.DbConnection The NpgsqlConnection object associated with the transaction. Overrides System.Data.Common.DbTransaction.DbConnection | Improve this Doc View Source IsCompleted Specifies the completion state of the transaction. Declaration public bool IsCompleted { get; } Property Value Type Description System.Boolean The completion state of the transaction. | Improve this Doc View Source IsolationLevel Specifies the System.Data.IsolationLevel for this transaction. Declaration public override IsolationLevel IsolationLevel { get; } Property Value Type Description System.Data.IsolationLevel The System.Data.IsolationLevel for this transaction. The default is ReadCommitted . Overrides System.Data.Common.DbTransaction.IsolationLevel Methods | Improve this Doc View Source Commit() Commits the database transaction. Declaration public override void Commit() Overrides System.Data.Common.DbTransaction.Commit() | Improve this Doc View Source CommitAsync() Commits the database transaction. Declaration public Task CommitAsync() Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source CommitAsync(CancellationToken) Commits the database transaction. Declaration public Task CommitAsync(CancellationToken cancellationToken) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source Dispose(Boolean) Dispose. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides System.Data.Common.DbTransaction.Dispose(System.Boolean) | Improve this Doc View Source Release(String) Rolls back a transaction from a pending savepoint state. Declaration public void Release(string name) Parameters Type Name Description System.String name | Improve this Doc View Source Rollback() Rolls back a transaction from a pending state. Declaration public override void Rollback() Overrides System.Data.Common.DbTransaction.Rollback() | Improve this Doc View Source Rollback(String) Rolls back a transaction from a pending savepoint state. Declaration public void Rollback(string name) Parameters Type Name Description System.String name | Improve this Doc View Source RollbackAsync() Rolls back a transaction from a pending state. Declaration public Task RollbackAsync() Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source RollbackAsync(CancellationToken) Rolls back a transaction from a pending state. Declaration public Task RollbackAsync(CancellationToken cancellationToken) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source Save(String) Creates a transaction save point. Declaration public void Save(string name) Parameters Type Name Description System.String name"
  },
  "api/Npgsql.PostgresException.html": {
    "href": "api/Npgsql.PostgresException.html",
    "title": "Class PostgresException | Npgsql Documentation",
    "keywords": "Class PostgresException The exception that is thrown when the PostgreSQL backend reports errors (e.g. query SQL issues, constraint violations). Inheritance System.Object System.Exception System.SystemException System.Runtime.InteropServices.ExternalException System.Data.Common.DbException NpgsqlException PostgresException Inherited Members NpgsqlException.BaseMessage System.Runtime.InteropServices.ExternalException.ToString() System.Runtime.InteropServices.ExternalException.ErrorCode System.Exception.GetBaseException() System.Exception.GetType() System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace :Npgsql Assembly :Npgsql.dll Syntax [Serializable] public sealed class PostgresException : NpgsqlException, ISerializable, _Exception Remarks This exception only corresponds to a PostgreSQL-delivered error. Other errors (e.g. network issues) will be raised via NpgsqlException , and purely Npgsql-related issues which aren't related to the server will be raised via the standard CLR exceptions (e.g. ArgumentException). See http://www.postgresql.org/docs/current/static/errcodes-appendix.html , http://www.postgresql.org/docs/current/static/protocol-error-fields.html Properties | Improve this Doc View Source Code The SQLSTATE code for the error. Declaration [Obsolete(\"Use SqlState instead\")] public string Code { get; } Property Value Type Description System.String Remarks Always present. See http://www.postgresql.org/docs/current/static/errcodes-appendix.html | Improve this Doc View Source ColumnName If the error was associated with a specific table column, the name of the column. (Refer to the schema and table name fields to identify the table.) Declaration public string ColumnName { get; } Property Value Type Description System.String Remarks PostgreSQL 9.3 and up. | Improve this Doc View Source ConstraintName If the error was associated with a specific constraint, the name of the constraint. Refer to fields listed above for the associated table or domain. (For this purpose, indexes are treated as constraints, even if they weren't created with constraint syntax.) Declaration public string ConstraintName { get; } Property Value Type Description System.String Remarks PostgreSQL 9.3 and up. | Improve this Doc View Source Data Gets a collection of key/value pairs that provide additional PostgreSQL fields about the exception. Declaration public override IDictionary Data { get; } Property Value Type Description System.Collections.IDictionary Overrides System.Exception.Data | Improve this Doc View Source DataTypeName If the error was associated with a specific data type, the name of the data type. (Refer to the schema name field for the name of the data type's schema.) Declaration public string DataTypeName { get; } Property Value Type Description System.String Remarks PostgreSQL 9.3 and up. | Improve this Doc View Source Detail An optional secondary error message carrying more detail about the problem. May run to multiple lines. Declaration public string Detail { get; } Property Value Type Description System.String | Improve this Doc View Source File The file name of the source-code location where the error was reported. Declaration public string File { get; } Property Value Type Description System.String Remarks PostgreSQL 9.3 and up. | Improve this Doc View Source Hint An optional suggestion what to do about the problem. This is intended to differ from Detail in that it offers advice (potentially inappropriate) rather than hard facts. May run to multiple lines. Declaration public string Hint { get; } Property Value Type Description System.String | Improve this Doc View Source InternalPosition This is defined the same as the Position field, but it is used when the cursor position refers to an internally generated command rather than the one submitted by the client. The InternalQuery field will always appear when this field appears. 0 means not provided. Declaration public int InternalPosition { get; } Property Value Type Description System.Int32 | Improve this Doc View Source InternalQuery The text of a failed internally-generated command. This could be, for example, a SQL query issued by a PL/pgSQL function. Declaration public string InternalQuery { get; } Property Value Type Description System.String | Improve this Doc View Source Line The line number of the source-code location where the error was reported. Declaration public string Line { get; } Property Value Type Description System.String | Improve this Doc View Source Message Gets a the PostgreSQL error message and code. Declaration public override string Message { get; } Property Value Type Description System.String Overrides System.Exception.Message | Improve this Doc View Source MessageText The primary human-readable error message. This should be accurate but terse. Declaration public string MessageText { get; } Property Value Type Description System.String Remarks Always present. | Improve this Doc View Source Position The field value is a decimal ASCII integer, indicating an error cursor position as an index into the original query string. The first character has index 1, and positions are measured in characters not bytes. 0 means not provided. Declaration public int Position { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Routine The name of the source-code routine reporting the error. Declaration public string Routine { get; } Property Value Type Description System.String | Improve this Doc View Source SchemaName If the error was associated with a specific database object, the name of the schema containing that object, if any. Declaration public string SchemaName { get; } Property Value Type Description System.String Remarks PostgreSQL 9.3 and up. | Improve this Doc View Source Severity Severity of the error or notice. Always present. Declaration public string Severity { get; } Property Value Type Description System.String | Improve this Doc View Source SqlState The SQLSTATE code for the error. Declaration public string SqlState { get; } Property Value Type Description System.String Remarks Always present. See http://www.postgresql.org/docs/current/static/errcodes-appendix.html | Improve this Doc View Source Statement Returns the statement which triggered this exception. Declaration public NpgsqlStatement Statement { get; } Property Value Type Description NpgsqlStatement | Improve this Doc View Source TableName Table name: if the error was associated with a specific table, the name of the table. (Refer to the schema name field for the name of the table's schema.) Declaration public string TableName { get; } Property Value Type Description System.String Remarks PostgreSQL 9.3 and up. | Improve this Doc View Source Where An indication of the context in which the error occurred. Presently this includes a call stack traceback of active PL functions. The trace is one entry per line, most recent first. Declaration public string Where { get; } Property Value Type Description System.String Methods | Improve this Doc View Source GetObjectData(SerializationInfo, StreamingContext) Populates a System.Runtime.Serialization.SerializationInfo with the data needed to serialize the target object. Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The System.Runtime.Serialization.SerializationInfo to populate with data. System.Runtime.Serialization.StreamingContext context The destination (see System.Runtime.Serialization.StreamingContext ) for this serialization. Overrides System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)"
  },
  "api/Npgsql.PostgresNotice.html": {
    "href": "api/Npgsql.PostgresNotice.html",
    "title": "Class PostgresNotice | Npgsql Documentation",
    "keywords": "Class PostgresNotice A non-critical (warning or info) message generated by the backend. Can be synchronous (i.e. in response to a query) or asynchronous (a totally unrelated backend-side event). Inheritance System.Object PostgresNotice Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Npgsql Assembly :Npgsql.dll Syntax public class PostgresNotice Remarks http://www.postgresql.org/docs/current/static/protocol-flow.html#PROTOCOL-ASYNC Properties | Improve this Doc View Source Code The SQLSTATE code for the error. Declaration [Obsolete(\"Use SqlState instead\")] public string Code { get; } Property Value Type Description System.String Remarks Always present. See http://www.postgresql.org/docs/current/static/errcodes-appendix.html | Improve this Doc View Source ColumnName If the error was associated with a specific table column, the name of the column. (Refer to the schema and table name fields to identify the table.) Declaration public string ColumnName { get; } Property Value Type Description System.String Remarks PostgreSQL 9.3 and up. | Improve this Doc View Source ConstraintName If the error was associated with a specific constraint, the name of the constraint. Refer to fields listed above for the associated table or domain. (For this purpose, indexes are treated as constraints, even if they weren't created with constraint syntax.) Declaration public string ConstraintName { get; } Property Value Type Description System.String Remarks PostgreSQL 9.3 and up. | Improve this Doc View Source DataTypeName If the error was associated with a specific data type, the name of the data type. (Refer to the schema name field for the name of the data type's schema.) Declaration public string DataTypeName { get; } Property Value Type Description System.String Remarks PostgreSQL 9.3 and up. | Improve this Doc View Source Detail An optional secondary error message carrying more detail about the problem. May run to multiple lines. Declaration public string Detail { get; } Property Value Type Description System.String | Improve this Doc View Source File The file name of the source-code location where the error was reported. Declaration public string File { get; } Property Value Type Description System.String Remarks PostgreSQL 9.3 and up. | Improve this Doc View Source Hint An optional suggestion what to do about the problem. This is intended to differ from Detail in that it offers advice (potentially inappropriate) rather than hard facts. May run to multiple lines. Declaration public string Hint { get; } Property Value Type Description System.String | Improve this Doc View Source InternalPosition This is defined the same as the Position field, but it is used when the cursor position refers to an internally generated command rather than the one submitted by the client. The InternalQuery field will always appear when this field appears. 0 means not provided. Declaration public int InternalPosition { get; } Property Value Type Description System.Int32 | Improve this Doc View Source InternalQuery The text of a failed internally-generated command. This could be, for example, a SQL query issued by a PL/pgSQL function. Declaration public string InternalQuery { get; } Property Value Type Description System.String | Improve this Doc View Source Line The line number of the source-code location where the error was reported. Declaration public string Line { get; } Property Value Type Description System.String | Improve this Doc View Source MessageText The primary human-readable error message. This should be accurate but terse. Declaration public string MessageText { get; } Property Value Type Description System.String Remarks Always present. | Improve this Doc View Source Position The field value is a decimal ASCII integer, indicating an error cursor position as an index into the original query string. The first character has index 1, and positions are measured in characters not bytes. 0 means not provided. Declaration public int Position { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Routine The name of the source-code routine reporting the error. Declaration public string Routine { get; } Property Value Type Description System.String | Improve this Doc View Source SchemaName If the error was associated with a specific database object, the name of the schema containing that object, if any. Declaration public string SchemaName { get; } Property Value Type Description System.String Remarks PostgreSQL 9.3 and up. | Improve this Doc View Source Severity Severity of the error or notice. Always present. Declaration public string Severity { get; } Property Value Type Description System.String | Improve this Doc View Source SqlState The SQLSTATE code for the error. Declaration public string SqlState { get; } Property Value Type Description System.String Remarks Always present. See http://www.postgresql.org/docs/current/static/errcodes-appendix.html | Improve this Doc View Source TableName Table name: if the error was associated with a specific table, the name of the table. (Refer to the schema name field for the name of the table's schema.) Declaration public string TableName { get; } Property Value Type Description System.String Remarks PostgreSQL 9.3 and up. | Improve this Doc View Source Where An indication of the context in which the error occurred. Presently this includes a call stack traceback of active PL functions. The trace is one entry per line, most recent first. Declaration public string Where { get; } Property Value Type Description System.String"
  },
  "api/Npgsql.ProvideClientCertificatesCallback.html": {
    "href": "api/Npgsql.ProvideClientCertificatesCallback.html",
    "title": "Delegate ProvideClientCertificatesCallback | Npgsql Documentation",
    "keywords": "Delegate ProvideClientCertificatesCallback Represents the method that allows the application to provide a certificate collection to be used for SSL client authentication Namespace :Npgsql Assembly :Npgsql.dll Syntax public delegate void ProvideClientCertificatesCallback(X509CertificateCollection certificates); Parameters Type Name Description System.Security.Cryptography.X509Certificates.X509CertificateCollection certificates A System.Security.Cryptography.X509Certificates.X509CertificateCollection to be filled with one or more client certificates."
  },
  "api/Npgsql.Schema.DbColumn.html": {
    "href": "api/Npgsql.Schema.DbColumn.html",
    "title": "Class DbColumn | Npgsql Documentation",
    "keywords": "Class DbColumn A copy of corefx's DbColumn, used only in .NET Framework where we don't have it. Inheritance System.Object DbColumn Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Npgsql.Schema Assembly :Npgsql.dll Syntax public abstract class DbColumn Remarks See https://github.com/dotnet/corefx/blob/master/src/System.Data.Common/src/System/Data/Common/DbColumn.cs Properties | Improve this Doc View Source AllowDBNull Declaration public bool ? AllowDBNull { get; protected set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source BaseCatalogName Declaration public string BaseCatalogName { get; protected set; } Property Value Type Description System.String | Improve this Doc View Source BaseColumnName Declaration public string BaseColumnName { get; protected set; } Property Value Type Description System.String | Improve this Doc View Source BaseSchemaName Declaration public string BaseSchemaName { get; protected set; } Property Value Type Description System.String | Improve this Doc View Source BaseServerName Declaration public string BaseServerName { get; protected set; } Property Value Type Description System.String | Improve this Doc View Source BaseTableName Declaration public string BaseTableName { get; protected set; } Property Value Type Description System.String | Improve this Doc View Source ColumnName Declaration public string ColumnName { get; protected set; } Property Value Type Description System.String | Improve this Doc View Source ColumnOrdinal Declaration public int ? ColumnOrdinal { get; protected set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source ColumnSize Declaration public int ? ColumnSize { get; protected set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source DataType Declaration public Type DataType { get; protected set; } Property Value Type Description System.Type | Improve this Doc View Source DataTypeName Declaration public string DataTypeName { get; protected set; } Property Value Type Description System.String | Improve this Doc View Source IsAliased Declaration public bool ? IsAliased { get; protected set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source IsAutoIncrement Declaration public bool ? IsAutoIncrement { get; protected set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source IsExpression Declaration public bool ? IsExpression { get; protected set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source IsHidden Declaration public bool ? IsHidden { get; protected set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source IsIdentity Declaration public bool ? IsIdentity { get; protected set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source IsKey Declaration public bool ? IsKey { get; protected set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source IsLong Declaration public bool ? IsLong { get; protected set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source IsReadOnly Declaration public bool ? IsReadOnly { get; protected set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source IsUnique Declaration public bool ? IsUnique { get; protected set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source Item[String] Declaration public virtual object this[string property] { get; } Parameters Type Name Description System.String property Property Value Type Description System.Object | Improve this Doc View Source NumericPrecision Declaration public int ? NumericPrecision { get; protected set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source NumericScale Declaration public int ? NumericScale { get; protected set; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source UdtAssemblyQualifiedName Declaration public string UdtAssemblyQualifiedName { get; protected set; } Property Value Type Description System.String"
  },
  "api/Npgsql.Schema.NpgsqlDbColumn.html": {
    "href": "api/Npgsql.Schema.NpgsqlDbColumn.html",
    "title": "Class NpgsqlDbColumn | Npgsql Documentation",
    "keywords": "Class NpgsqlDbColumn Provides schema information about a column. (e.g. SELECT 8); Inheritance System.Object DbColumn NpgsqlDbColumn Inherited Members DbColumn.IsAliased DbColumn.IsExpression DbColumn.IsHidden DbColumn.IsIdentity System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Npgsql.Schema Assembly :Npgsql.dll Syntax public class NpgsqlDbColumn : DbColumn Remarks Note that this can correspond to a field returned in a query which isn't an actual table column See https://msdn.microsoft.com/en-us/library/system.data.sqlclient.sqldatareader.getschematable(v=vs.110).aspx for information on the meaning of the different fields. Properties | Improve this Doc View Source AllowDBNull Declaration public bool ? AllowDBNull { get; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source BaseCatalogName Declaration public string BaseCatalogName { get; } Property Value Type Description System.String | Improve this Doc View Source BaseColumnName Declaration public string BaseColumnName { get; } Property Value Type Description System.String | Improve this Doc View Source BaseSchemaName Declaration public string BaseSchemaName { get; } Property Value Type Description System.String | Improve this Doc View Source BaseServerName Declaration public string BaseServerName { get; } Property Value Type Description System.String | Improve this Doc View Source BaseTableName Declaration public string BaseTableName { get; } Property Value Type Description System.String | Improve this Doc View Source ColumnAttributeNumber Declaration public short ? ColumnAttributeNumber { get; } Property Value Type Description System.Nullable < System.Int16 > | Improve this Doc View Source ColumnName Declaration public string ColumnName { get; } Property Value Type Description System.String | Improve this Doc View Source ColumnOrdinal Declaration public int ? ColumnOrdinal { get; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source ColumnSize Declaration public int ? ColumnSize { get; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source DataType Declaration public Type DataType { get; } Property Value Type Description System.Type | Improve this Doc View Source DataTypeName Declaration public string DataTypeName { get; } Property Value Type Description System.String | Improve this Doc View Source DefaultValue Declaration public string DefaultValue { get; } Property Value Type Description System.String | Improve this Doc View Source IsAutoIncrement Declaration public bool ? IsAutoIncrement { get; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source IsKey Declaration public bool ? IsKey { get; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source IsLong Declaration public bool ? IsLong { get; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source IsReadOnly Declaration public bool ? IsReadOnly { get; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source IsUnique Declaration public bool ? IsUnique { get; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source Item[String] Declaration public override object this[string property] { get; } Parameters Type Name Description System.String property Property Value Type Description System.Object Overrides DbColumn.Item[String] | Improve this Doc View Source NumericPrecision Declaration public int ? NumericPrecision { get; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source NumericScale Declaration public int ? NumericScale { get; } Property Value Type Description System.Nullable < System.Int32 > | Improve this Doc View Source TableOID Declaration public uint TableOID { get; } Property Value Type Description System.UInt32 | Improve this Doc View Source TypeOID Declaration public uint TypeOID { get; } Property Value Type Description System.UInt32 | Improve this Doc View Source UdtAssemblyQualifiedName Declaration public string UdtAssemblyQualifiedName { get; } Property Value Type Description System.String"
  },
  "api/Npgsql.Schema.html": {
    "href": "api/Npgsql.Schema.html",
    "title": "Namespace Npgsql.Schema | Npgsql Documentation",
    "keywords": "Namespace Npgsql.Schema Classes DbColumn A copy of corefx's DbColumn, used only in .NET Framework where we don't have it. NpgsqlDbColumn Provides schema information about a column. (e.g. SELECT 8);"
  },
  "api/Npgsql.ServerCompatibilityMode.html": {
    "href": "api/Npgsql.ServerCompatibilityMode.html",
    "title": "Enum ServerCompatibilityMode | Npgsql Documentation",
    "keywords": "Enum ServerCompatibilityMode An option specified in the connection string that activates special compatibility features. Namespace :Npgsql Assembly :Npgsql.dll Syntax public enum ServerCompatibilityMode Fields Name Description None No special server compatibility mode is active Redshift The server is an Amazon Redshift instance."
  },
  "api/Npgsql.SslMode.html": {
    "href": "api/Npgsql.SslMode.html",
    "title": "Enum SslMode | Npgsql Documentation",
    "keywords": "Enum SslMode Specifies how to manage SSL. Namespace :Npgsql Assembly :Npgsql.dll Syntax public enum SslMode Fields Name Description Disable SSL is disabled. If the server requires SSL, the connection will fail. Prefer Prefer SSL connections if the server allows them, but allow connections without SSL. Require Fail the connection if the server doesn't suppotr SSL."
  },
  "api/Npgsql.INpgsqlNameTranslator.html": {
    "href": "api/Npgsql.INpgsqlNameTranslator.html",
    "title": "Interface INpgsqlNameTranslator | Npgsql Documentation",
    "keywords": "Interface INpgsqlNameTranslator A component which translates a CLR name (e.g. SomeClass) into a database name (e.g. some_class) according to some scheme. Used for mapping enum and composite types. Namespace :Npgsql Assembly :Npgsql.dll Syntax public interface INpgsqlNameTranslator Methods | Improve this Doc View Source TranslateMemberName(String) Given a CLR member name (property or field), translates its name to a database type name. Declaration string TranslateMemberName(string clrName) Parameters Type Name Description System.String clrName Returns Type Description System.String | Improve this Doc View Source TranslateTypeName(String) Given a CLR type name (e.g class, struct, enum), translates its name to a database type name. Declaration string TranslateTypeName(string clrName) Parameters Type Name Description System.String clrName Returns Type Description System.String"
  },
  "api/Npgsql.Logging.ConsoleLoggingProvider.html": {
    "href": "api/Npgsql.Logging.ConsoleLoggingProvider.html",
    "title": "Class ConsoleLoggingProvider | Npgsql Documentation",
    "keywords": "Class ConsoleLoggingProvider An logging provider that outputs Npgsql logging messages to standard error. Inheritance System.Object ConsoleLoggingProvider Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Npgsql.Logging Assembly :Npgsql.dll Syntax public class ConsoleLoggingProvider : INpgsqlLoggingProvider Constructors | Improve this Doc View Source ConsoleLoggingProvider(NpgsqlLogLevel, Boolean, Boolean) Constructs a new ConsoleLoggingProvider Declaration public ConsoleLoggingProvider(NpgsqlLogLevel minLevel = NpgsqlLogLevel.Info, bool printLevel = false, bool printConnectorId = false) Parameters Type Name Description NpgsqlLogLevel minLevel Only messages of this level of higher will be logged System.Boolean printLevel If true, will output the log level (e.g. WARN). Defaults to false. System.Boolean printConnectorId If true, will output the connector ID. Defaults to false. Methods | Improve this Doc View Source CreateLogger(String) Creates a new Npgsql.Logging.ConsoleLogger instance of the given name. Declaration public NpgsqlLogger CreateLogger(string name) Parameters Type Name Description System.String name Returns Type Description NpgsqlLogger Implements INpgsqlLoggingProvider.CreateLogger(String)"
  },
  "api/Npgsql.Logging.INpgsqlLoggingProvider.html": {
    "href": "api/Npgsql.Logging.INpgsqlLoggingProvider.html",
    "title": "Interface INpgsqlLoggingProvider | Npgsql Documentation",
    "keywords": "Interface INpgsqlLoggingProvider Namespace :Npgsql.Logging Assembly :Npgsql.dll Syntax public interface INpgsqlLoggingProvider Methods | Improve this Doc View Source CreateLogger(String) Creates a new INpgsqlLogger instance of the given name. Declaration NpgsqlLogger CreateLogger(string name) Parameters Type Name Description System.String name Returns Type Description NpgsqlLogger"
  },
  "api/Npgsql.Logging.NpgsqlLogger.html": {
    "href": "api/Npgsql.Logging.NpgsqlLogger.html",
    "title": "Class NpgsqlLogger | Npgsql Documentation",
    "keywords": "Class NpgsqlLogger A generic interface for logging. Inheritance System.Object NpgsqlLogger Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Npgsql.Logging Assembly :Npgsql.dll Syntax public abstract class NpgsqlLogger Methods | Improve this Doc View Source IsEnabled(NpgsqlLogLevel) Declaration public abstract bool IsEnabled(NpgsqlLogLevel level) Parameters Type Name Description NpgsqlLogLevel level Returns Type Description System.Boolean | Improve this Doc View Source Log(NpgsqlLogLevel, Int32, String, Exception) Declaration public abstract void Log(NpgsqlLogLevel level, int connectorId, string msg, Exception exception = null) Parameters Type Name Description NpgsqlLogLevel level System.Int32 connectorId System.String msg System.Exception exception"
  },
  "api/Npgsql.Logging.NpgsqlLogLevel.html": {
    "href": "api/Npgsql.Logging.NpgsqlLogLevel.html",
    "title": "Enum NpgsqlLogLevel | Npgsql Documentation",
    "keywords": "Enum NpgsqlLogLevel Namespace :Npgsql.Logging Assembly :Npgsql.dll Syntax public enum NpgsqlLogLevel Fields Name Description Debug Error Fatal Info Trace Warn"
  },
  "api/Npgsql.Logging.NpgsqlLogManager.html": {
    "href": "api/Npgsql.Logging.NpgsqlLogManager.html",
    "title": "Class NpgsqlLogManager | Npgsql Documentation",
    "keywords": "Class NpgsqlLogManager Manages logging for Npgsql, used to set the loggging provider. Inheritance System.Object NpgsqlLogManager Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Npgsql.Logging Assembly :Npgsql.dll Syntax public static class NpgsqlLogManager Properties | Improve this Doc View Source IsParameterLoggingEnabled Determines whether parameter contents will be logged alongside SQL statements - this may reveal sensitive information. Defaults to false. Declaration public static bool IsParameterLoggingEnabled { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Provider The logging provider used for logging in Npgsql. Declaration public static INpgsqlLoggingProvider Provider { get; set; } Property Value Type Description INpgsqlLoggingProvider"
  },
  "api/Npgsql.Logging.html": {
    "href": "api/Npgsql.Logging.html",
    "title": "Namespace Npgsql.Logging | Npgsql Documentation",
    "keywords": "Namespace Npgsql.Logging Classes ConsoleLoggingProvider An logging provider that outputs Npgsql logging messages to standard error. NpgsqlLogger A generic interface for logging. NpgsqlLogManager Manages logging for Npgsql, used to set the loggging provider. Interfaces INpgsqlLoggingProvider Enums NpgsqlLogLevel"
  },
  "api/Npgsql.NpgsqlConnectionStringBuilder.html": {
    "href": "api/Npgsql.NpgsqlConnectionStringBuilder.html",
    "title": "Class NpgsqlConnectionStringBuilder | Npgsql Documentation",
    "keywords": "Class NpgsqlConnectionStringBuilder Provides a simple way to create and manage the contents of connection strings used by the NpgsqlConnection class. Inheritance System.Object System.Data.Common.DbConnectionStringBuilder NpgsqlConnectionStringBuilder Inherited Members System.Data.Common.DbConnectionStringBuilder.System.Collections.IDictionary.get_Item(System.Object) System.Data.Common.DbConnectionStringBuilder.System.Collections.IDictionary.set_Item(System.Object, System.Object) System.Data.Common.DbConnectionStringBuilder.System.Collections.IDictionary.Add(System.Object, System.Object) System.Data.Common.DbConnectionStringBuilder.Add(System.String, System.Object) System.Data.Common.DbConnectionStringBuilder.AppendKeyValuePair(System.Text.StringBuilder, System.String, System.String) System.Data.Common.DbConnectionStringBuilder.AppendKeyValuePair(System.Text.StringBuilder, System.String, System.String, System.Boolean) System.Data.Common.DbConnectionStringBuilder.ClearPropertyDescriptors() System.Data.Common.DbConnectionStringBuilder.System.Collections.IDictionary.Contains(System.Object) System.Data.Common.DbConnectionStringBuilder.System.Collections.ICollection.CopyTo(System.Array, System.Int32) System.Data.Common.DbConnectionStringBuilder.EquivalentTo(System.Data.Common.DbConnectionStringBuilder) System.Data.Common.DbConnectionStringBuilder.System.Collections.IEnumerable.GetEnumerator() System.Data.Common.DbConnectionStringBuilder.System.Collections.IDictionary.GetEnumerator() System.Data.Common.DbConnectionStringBuilder.System.Collections.IDictionary.Remove(System.Object) System.Data.Common.DbConnectionStringBuilder.ShouldSerialize(System.String) System.Data.Common.DbConnectionStringBuilder.ToString() System.Data.Common.DbConnectionStringBuilder.GetProperties(System.Collections.Hashtable) System.Data.Common.DbConnectionStringBuilder.System.ComponentModel.ICustomTypeDescriptor.GetClassName() System.Data.Common.DbConnectionStringBuilder.System.ComponentModel.ICustomTypeDescriptor.GetComponentName() System.Data.Common.DbConnectionStringBuilder.System.ComponentModel.ICustomTypeDescriptor.GetAttributes() System.Data.Common.DbConnectionStringBuilder.System.ComponentModel.ICustomTypeDescriptor.GetEditor(System.Type) System.Data.Common.DbConnectionStringBuilder.System.ComponentModel.ICustomTypeDescriptor.GetConverter() System.Data.Common.DbConnectionStringBuilder.System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty() System.Data.Common.DbConnectionStringBuilder.System.ComponentModel.ICustomTypeDescriptor.GetProperties() System.Data.Common.DbConnectionStringBuilder.System.ComponentModel.ICustomTypeDescriptor.GetProperties(System.Attribute[]) System.Data.Common.DbConnectionStringBuilder.System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent() System.Data.Common.DbConnectionStringBuilder.System.ComponentModel.ICustomTypeDescriptor.GetEvents() System.Data.Common.DbConnectionStringBuilder.System.ComponentModel.ICustomTypeDescriptor.GetEvents(System.Attribute[]) System.Data.Common.DbConnectionStringBuilder.System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor) System.Data.Common.DbConnectionStringBuilder.System.Collections.IDictionary.Item[System.Object] System.Data.Common.DbConnectionStringBuilder.ConnectionString System.Data.Common.DbConnectionStringBuilder.Count System.Data.Common.DbConnectionStringBuilder.IsReadOnly System.Data.Common.DbConnectionStringBuilder.IsFixedSize System.Data.Common.DbConnectionStringBuilder.System.Collections.ICollection.IsSynchronized System.Data.Common.DbConnectionStringBuilder.Keys System.Data.Common.DbConnectionStringBuilder.System.Collections.ICollection.SyncRoot System.Data.Common.DbConnectionStringBuilder.Values System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace :Npgsql Assembly :Npgsql.dll Syntax public sealed class NpgsqlConnectionStringBuilder : DbConnectionStringBuilder, IDictionary, ICollection, IEnumerable, ICustomTypeDescriptor Constructors | Improve this Doc View Source NpgsqlConnectionStringBuilder() Initializes a new instance of the NpgsqlConnectionStringBuilder class. Declaration public NpgsqlConnectionStringBuilder() | Improve this Doc View Source NpgsqlConnectionStringBuilder(Boolean) Initializes a new instance of the NpgsqlConnectionStringBuilder class, optionally using ODBC rules for quoting values. Declaration public NpgsqlConnectionStringBuilder(bool useOdbcRules) Parameters Type Name Description System.Boolean useOdbcRules true to use {} to delimit fields; false to use quotation marks. | Improve this Doc View Source NpgsqlConnectionStringBuilder(String) Initializes a new instance of the NpgsqlConnectionStringBuilder class and sets its System.Data.Common.DbConnectionStringBuilder.ConnectionString . Declaration public NpgsqlConnectionStringBuilder(string connectionString) Parameters Type Name Description System.String connectionString Properties | Improve this Doc View Source ApplicationName The optional application name parameter to be sent to the backend during connection initiation. Declaration public string ApplicationName { get; set; } Property Value Type Description System.String | Improve this Doc View Source BackendTimeouts Obsolete, see http://www.npgsql.org/doc/3.1/migration.html Declaration [Obsolete] public bool BackendTimeouts { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source BufferSize Gets or sets the buffer size. Declaration public int BufferSize { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source ClientEncoding Gets or sets the schema search path. Declaration public string ClientEncoding { get; set; } Property Value Type Description System.String | Improve this Doc View Source CommandTimeout The time to wait (in seconds) while trying to execute a command before terminating the attempt and generating an error. Defaults to 30 seconds. Declaration public int CommandTimeout { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source ConnectionIdleLifetime The time to wait before closing idle connections in the pool if the count of all connections exceeds MinPoolSize. Declaration public int ConnectionIdleLifetime { get; set; } Property Value Type Description System.Int32 The time (in seconds) to wait. The default value is 300. | Improve this Doc View Source ConnectionLifeTime Obsolete, see http://www.npgsql.org/doc/3.1/migration.html Declaration [Obsolete] public int ConnectionLifeTime { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source ConnectionPruningInterval How many seconds the pool waits before attempting to prune idle connections that are beyond idle lifetime ( ConnectionIdleLifetime . Declaration public int ConnectionPruningInterval { get; set; } Property Value Type Description System.Int32 The interval (in seconds). The default value is 10. | Improve this Doc View Source ContinuousProcessing Obsolete, see http://www.npgsql.org/doc/3.1/migration.html Declaration [Obsolete] public bool ContinuousProcessing { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ConvertInfinityDateTime Makes MaxValue and MinValue timestamps and dates readable as infinity and negative infinity. Declaration public bool ConvertInfinityDateTime { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Database The PostgreSQL database to connect to. Declaration public string Database { get; set; } Property Value Type Description System.String | Improve this Doc View Source Encoding Gets or sets the client_encoding parameter. Declaration public string Encoding { get; set; } Property Value Type Description System.String | Improve this Doc View Source Enlist Whether to enlist in an ambient TransactionScope. Declaration public bool Enlist { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source EntityAdminDatabase The database admin to specify when creating and dropping a database in Entity Framework. This is needed because Npgsql needs to connect to a database in order to send the create/drop database command. If not specified, defaults to \"template1\". Check NpgsqlServices.UsingPostgresDBConnection for more information. Declaration public string EntityAdminDatabase { get; set; } Property Value Type Description System.String | Improve this Doc View Source EntityTemplateDatabase The database template to specify when creating a database in Entity Framework. If not specified, PostgreSQL defaults to \"template1\". Declaration public string EntityTemplateDatabase { get; set; } Property Value Type Description System.String Remarks http://www.postgresql.org/docs/current/static/manage-ag-templatedbs.html | Improve this Doc View Source Host The hostname or IP address of the PostgreSQL server to connect to. Declaration public string Host { get; set; } Property Value Type Description System.String | Improve this Doc View Source IncludeRealm The Kerberos realm to be used for authentication. Declaration public bool IncludeRealm { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IntegratedSecurity Whether to use Windows integrated security to log in. Declaration public bool IntegratedSecurity { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source InternalCommandTimeout The time to wait (in seconds) while trying to execute a an internal command before terminating the attempt and generating an error. Declaration public int InternalCommandTimeout { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Item[String] Gets or sets the value associated with the specified key. Declaration public override object this[string keyword] { get; set; } Parameters Type Name Description System.String keyword The key of the item to get or set. Property Value Type Description System.Object The value associated with the specified key. Overrides System.Data.Common.DbConnectionStringBuilder.Item[System.String] | Improve this Doc View Source KeepAlive The number of seconds of connection inactivity before Npgsql sends a keepalive query. Set to 0 (the default) to disable. Declaration public int KeepAlive { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source KerberosServiceName The Kerberos service name to be used for authentication. Declaration public string KerberosServiceName { get; set; } Property Value Type Description System.String | Improve this Doc View Source MaxPoolSize The maximum connection pool size. Declaration public int MaxPoolSize { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source MinPoolSize The minimum connection pool size. Declaration public int MinPoolSize { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source Password The password to connect with. Not required if using IntegratedSecurity. Declaration public string Password { get; set; } Property Value Type Description System.String | Improve this Doc View Source PersistSecurityInfo Gets or sets a Boolean value that indicates if security-sensitive information, such as the password, is not returned as part of the connection if the connection is open or has ever been in an open state. Declaration public bool PersistSecurityInfo { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Pooling Whether connection pooling should be used. Declaration public bool Pooling { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Port The TCP/IP port of the PostgreSQL server. Declaration public int Port { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source PreloadReader Obsolete, see http://www.npgsql.org/doc/3.0/migration.html Declaration [Obsolete] public bool PreloadReader { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source SearchPath Gets or sets the schema search path. Declaration public string SearchPath { get; set; } Property Value Type Description System.String | Improve this Doc View Source ServerCompatibilityMode A compatibility mode for special PostgreSQL server types. Declaration public ServerCompatibilityMode ServerCompatibilityMode { get; set; } Property Value Type Description ServerCompatibilityMode | Improve this Doc View Source SslMode Controls whether SSL is required, disabled or preferred, depending on server support. Declaration public SslMode SslMode { get; set; } Property Value Type Description SslMode | Improve this Doc View Source Timeout The time to wait (in seconds) while trying to establish a connection before terminating the attempt and generating an error. Defaults to 15 seconds. Declaration public int Timeout { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source TrustServerCertificate Whether to trust the server certificate without validating it. Declaration public bool TrustServerCertificate { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source UseExtendedTypes Obsolete, see http://www.npgsql.org/doc/3.0/migration.html Declaration [Obsolete] public bool UseExtendedTypes { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Username The username to connect with. Not required if using IntegratedSecurity. Declaration public string Username { get; set; } Property Value Type Description System.String | Improve this Doc View Source UseSslStream Npgsql uses its own internal implementation of TLS/SSL. Turn this on to use .NET SslStream instead. Declaration public bool UseSslStream { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Clear() Clears the contents of the NpgsqlConnectionStringBuilder instance. Declaration public override void Clear() Overrides System.Data.Common.DbConnectionStringBuilder.Clear() | Improve this Doc View Source ContainsKey(String) Determines whether the NpgsqlConnectionStringBuilder contains a specific key. Declaration public override bool ContainsKey(string keyword) Parameters Type Name Description System.String keyword The key to locate in the NpgsqlConnectionStringBuilder . Returns Type Description System.Boolean true if the NpgsqlConnectionStringBuilder contains an entry with the specified key; otherwise false . Overrides System.Data.Common.DbConnectionStringBuilder.ContainsKey(System.String) | Improve this Doc View Source Equals(Object) Determines whether the specified object is equal to the current object. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Hash function. Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source Remove(String) Removes the entry with the specified key from the DbConnectionStringBuilder instance. Declaration public override bool Remove(string keyword) Parameters Type Name Description System.String keyword The key of the key/value pair to be removed from the connection string in this DbConnectionStringBuilder. Returns Type Description System.Boolean true if the key existed within the connection string and was removed; false if the key did not exist. Overrides System.Data.Common.DbConnectionStringBuilder.Remove(System.String) | Improve this Doc View Source TryGetValue(String, out Object) Retrieves a value corresponding to the supplied key from this NpgsqlConnectionStringBuilder . Declaration public override bool TryGetValue(string keyword, out object value) Parameters Type Name Description System.String keyword The key of the item to retrieve. System.Object value The value corresponding to the key. Returns Type Description System.Boolean true if keyword was found within the connection string, false otherwise. Overrides System.Data.Common.DbConnectionStringBuilder.TryGetValue(System.String, System.Object)"
  },
  "api/Npgsql.NpgsqlCopyTextReader.html": {
    "href": "api/Npgsql.NpgsqlCopyTextReader.html",
    "title": "Class NpgsqlCopyTextReader | Npgsql Documentation",
    "keywords": "Class NpgsqlCopyTextReader Reader for a text export, initiated by BeginTextExport(String) . Inheritance System.Object System.MarshalByRefObject System.IO.TextReader System.IO.StreamReader NpgsqlCopyTextReader Inherited Members System.IO.StreamReader.Null System.IO.StreamReader.Close() System.IO.StreamReader.Dispose(System.Boolean) System.IO.StreamReader.DiscardBufferedData() System.IO.StreamReader.Peek() System.IO.StreamReader.Read() System.IO.StreamReader.Read(System.Char[], System.Int32, System.Int32) System.IO.StreamReader.ReadToEnd() System.IO.StreamReader.ReadBlock(System.Char[], System.Int32, System.Int32) System.IO.StreamReader.ReadLine() System.IO.StreamReader.ReadLineAsync() System.IO.StreamReader.ReadToEndAsync() System.IO.StreamReader.ReadAsync(System.Char[], System.Int32, System.Int32) System.IO.StreamReader.ReadBlockAsync(System.Char[], System.Int32, System.Int32) System.IO.StreamReader.CurrentEncoding System.IO.StreamReader.BaseStream System.IO.StreamReader.EndOfStream System.IO.TextReader.Dispose() System.IO.TextReader.Synchronized(System.IO.TextReader) System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.CreateObjRef(System.Type) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Npgsql Assembly :Npgsql.dll Syntax public class NpgsqlCopyTextReader : StreamReader, ICancelable, IDisposable Remarks See http://www.postgresql.org/docs/current/static/sql-copy.html . Methods | Improve this Doc View Source Cancel() Cancels and terminates an ongoing import. Declaration public void Cancel()"
  },
  "api/Npgsql.NpgsqlCopyTextWriter.html": {
    "href": "api/Npgsql.NpgsqlCopyTextWriter.html",
    "title": "Class NpgsqlCopyTextWriter | Npgsql Documentation",
    "keywords": "Class NpgsqlCopyTextWriter Writer for a text import, initiated by BeginTextImport(String) . Inheritance System.Object System.MarshalByRefObject System.IO.TextWriter System.IO.StreamWriter NpgsqlCopyTextWriter Inherited Members System.IO.StreamWriter.Null System.IO.StreamWriter.Close() System.IO.StreamWriter.Dispose(System.Boolean) System.IO.StreamWriter.Flush() System.IO.StreamWriter.Write(System.Char) System.IO.StreamWriter.Write(System.Char[]) System.IO.StreamWriter.Write(System.Char[], System.Int32, System.Int32) System.IO.StreamWriter.Write(System.String) System.IO.StreamWriter.WriteAsync(System.Char) System.IO.StreamWriter.WriteAsync(System.String) System.IO.StreamWriter.WriteAsync(System.Char[], System.Int32, System.Int32) System.IO.StreamWriter.WriteLineAsync() System.IO.StreamWriter.WriteLineAsync(System.Char) System.IO.StreamWriter.WriteLineAsync(System.String) System.IO.StreamWriter.WriteLineAsync(System.Char[], System.Int32, System.Int32) System.IO.StreamWriter.FlushAsync() System.IO.StreamWriter.AutoFlush System.IO.StreamWriter.BaseStream System.IO.StreamWriter.Encoding System.IO.TextWriter.CoreNewLine System.IO.TextWriter.Dispose() System.IO.TextWriter.Synchronized(System.IO.TextWriter) System.IO.TextWriter.Write(System.Boolean) System.IO.TextWriter.Write(System.Int32) System.IO.TextWriter.Write(System.UInt32) System.IO.TextWriter.Write(System.Int64) System.IO.TextWriter.Write(System.UInt64) System.IO.TextWriter.Write(System.Single) System.IO.TextWriter.Write(System.Double) System.IO.TextWriter.Write(System.Decimal) System.IO.TextWriter.Write(System.Object) System.IO.TextWriter.Write(System.String, System.Object) System.IO.TextWriter.Write(System.String, System.Object, System.Object) System.IO.TextWriter.Write(System.String, System.Object, System.Object, System.Object) System.IO.TextWriter.Write(System.String, System.Object[]) System.IO.TextWriter.WriteLine() System.IO.TextWriter.WriteLine(System.Char) System.IO.TextWriter.WriteLine(System.Char[]) System.IO.TextWriter.WriteLine(System.Char[], System.Int32, System.Int32) System.IO.TextWriter.WriteLine(System.Boolean) System.IO.TextWriter.WriteLine(System.Int32) System.IO.TextWriter.WriteLine(System.UInt32) System.IO.TextWriter.WriteLine(System.Int64) System.IO.TextWriter.WriteLine(System.UInt64) System.IO.TextWriter.WriteLine(System.Single) System.IO.TextWriter.WriteLine(System.Double) System.IO.TextWriter.WriteLine(System.Decimal) System.IO.TextWriter.WriteLine(System.String) System.IO.TextWriter.WriteLine(System.Object) System.IO.TextWriter.WriteLine(System.String, System.Object) System.IO.TextWriter.WriteLine(System.String, System.Object, System.Object) System.IO.TextWriter.WriteLine(System.String, System.Object, System.Object, System.Object) System.IO.TextWriter.WriteLine(System.String, System.Object[]) System.IO.TextWriter.WriteAsync(System.Char[]) System.IO.TextWriter.WriteLineAsync(System.Char[]) System.IO.TextWriter.FormatProvider System.IO.TextWriter.NewLine System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.CreateObjRef(System.Type) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Npgsql Assembly :Npgsql.dll Syntax public class NpgsqlCopyTextWriter : StreamWriter, ICancelable, IDisposable Remarks See http://www.postgresql.org/docs/current/static/sql-copy.html . Methods | Improve this Doc View Source Cancel() Cancels and terminates an ongoing import. Any data already written will be discarded. Declaration public void Cancel()"
  },
  "api/Npgsql.NpgsqlDataAdapter.html": {
    "href": "api/Npgsql.NpgsqlDataAdapter.html",
    "title": "Class NpgsqlDataAdapter | Npgsql Documentation",
    "keywords": "Class NpgsqlDataAdapter This class represents an adapter from many commands: select, update, insert and delete to fill System.Data.DataSet Inheritance System.Object System.MarshalByRefObject System.ComponentModel.Component System.Data.Common.DataAdapter System.Data.Common.DbDataAdapter NpgsqlDataAdapter Inherited Members System.Data.Common.DbDataAdapter.DefaultSourceTableName System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand) System.Data.Common.DbDataAdapter.ClearBatch() System.Data.Common.DbDataAdapter.System.ICloneable.Clone() System.Data.Common.DbDataAdapter.Dispose(System.Boolean) System.Data.Common.DbDataAdapter.ExecuteBatch() System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable, System.Data.SchemaType) System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet, System.Data.SchemaType) System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet, System.Data.SchemaType, System.String) System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet, System.Data.SchemaType, System.Data.IDbCommand, System.String, System.Data.CommandBehavior) System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable, System.Data.SchemaType, System.Data.IDbCommand, System.Data.CommandBehavior) System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet) System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet, System.String) System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet, System.Int32, System.Int32, System.String) System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet, System.Int32, System.Int32, System.String, System.Data.IDbCommand, System.Data.CommandBehavior) System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable) System.Data.Common.DbDataAdapter.Fill(System.Int32, System.Int32, System.Data.DataTable[]) System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable, System.Data.IDbCommand, System.Data.CommandBehavior) System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[], System.Int32, System.Int32, System.Data.IDbCommand, System.Data.CommandBehavior) System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32, System.Int32) System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32, System.Int32, System.Exception) System.Data.Common.DbDataAdapter.GetFillParameters() System.Data.Common.DbDataAdapter.InitializeBatching() System.Data.Common.DbDataAdapter.TerminateBatching() System.Data.Common.DbDataAdapter.Update(System.Data.DataSet) System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[]) System.Data.Common.DbDataAdapter.Update(System.Data.DataTable) System.Data.Common.DbDataAdapter.Update(System.Data.DataSet, System.String) System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[], System.Data.Common.DataTableMapping) System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand System.Data.Common.DbDataAdapter.FillCommandBehavior System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.InsertCommand System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.SelectCommand System.Data.Common.DbDataAdapter.UpdateBatchSize System.Data.Common.DbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand System.Data.Common.DataAdapter.ShouldSerializeTableMappings() System.Data.Common.DataAdapter.HasTableMappings() System.Data.Common.DataAdapter.CloneInternals() System.Data.Common.DataAdapter.CreateTableMappings() System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet, System.Data.SchemaType, System.String, System.Data.IDataReader) System.Data.Common.DataAdapter.FillSchema(System.Data.DataTable, System.Data.SchemaType, System.Data.IDataReader) System.Data.Common.DataAdapter.Fill(System.Data.DataSet, System.String, System.Data.IDataReader, System.Int32, System.Int32) System.Data.Common.DataAdapter.Fill(System.Data.DataTable, System.Data.IDataReader) System.Data.Common.DataAdapter.Fill(System.Data.DataTable[], System.Data.IDataReader, System.Int32, System.Int32) System.Data.Common.DataAdapter.OnFillError(System.Data.FillErrorEventArgs) System.Data.Common.DataAdapter.AcceptChangesDuringFill System.Data.Common.DataAdapter.AcceptChangesDuringUpdate System.Data.Common.DataAdapter.ContinueUpdateOnError System.Data.Common.DataAdapter.FillLoadOption System.Data.Common.DataAdapter.MissingMappingAction System.Data.Common.DataAdapter.MissingSchemaAction System.Data.Common.DataAdapter.ReturnProviderSpecificTypes System.Data.Common.DataAdapter.TableMappings System.Data.Common.DataAdapter.System.Data.IDataAdapter.TableMappings System.Data.Common.DataAdapter.FillError System.ComponentModel.Component.Dispose() System.ComponentModel.Component.GetService(System.Type) System.ComponentModel.Component.ToString() System.ComponentModel.Component.CanRaiseEvents System.ComponentModel.Component.Events System.ComponentModel.Component.Site System.ComponentModel.Component.Container System.ComponentModel.Component.DesignMode System.ComponentModel.Component.Disposed System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.CreateObjRef(System.Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Npgsql Assembly :Npgsql.dll Syntax public sealed class NpgsqlDataAdapter : DbDataAdapter, IComponent, IDisposable, IDbDataAdapter, IDataAdapter, ICloneable Constructors | Improve this Doc View Source NpgsqlDataAdapter() Default constructor. Declaration public NpgsqlDataAdapter() | Improve this Doc View Source NpgsqlDataAdapter(NpgsqlCommand) Constructor. Declaration public NpgsqlDataAdapter(NpgsqlCommand selectCommand) Parameters Type Name Description NpgsqlCommand selectCommand | Improve this Doc View Source NpgsqlDataAdapter(String, NpgsqlConnection) Constructor. Declaration public NpgsqlDataAdapter(string selectCommandText, NpgsqlConnection selectConnection) Parameters Type Name Description System.String selectCommandText NpgsqlConnection selectConnection | Improve this Doc View Source NpgsqlDataAdapter(String, String) Constructor. Declaration public NpgsqlDataAdapter(string selectCommandText, string selectConnectionString) Parameters Type Name Description System.String selectCommandText System.String selectConnectionString Properties | Improve this Doc View Source DeleteCommand Delete command. Declaration public NpgsqlCommand DeleteCommand { get; set; } Property Value Type Description NpgsqlCommand | Improve this Doc View Source InsertCommand Insert command. Declaration public NpgsqlCommand InsertCommand { get; set; } Property Value Type Description NpgsqlCommand | Improve this Doc View Source SelectCommand Select command. Declaration public NpgsqlCommand SelectCommand { get; set; } Property Value Type Description NpgsqlCommand | Improve this Doc View Source UpdateCommand Update command. Declaration public NpgsqlCommand UpdateCommand { get; set; } Property Value Type Description NpgsqlCommand Methods | Improve this Doc View Source CreateRowUpdatedEvent(DataRow, IDbCommand, StatementType, DataTableMapping) Create row updated event. Declaration protected override RowUpdatedEventArgs CreateRowUpdatedEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping) Parameters Type Name Description System.Data.DataRow dataRow System.Data.IDbCommand command System.Data.StatementType statementType System.Data.Common.DataTableMapping tableMapping Returns Type Description System.Data.Common.RowUpdatedEventArgs Overrides System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow, System.Data.IDbCommand, System.Data.StatementType, System.Data.Common.DataTableMapping) | Improve this Doc View Source CreateRowUpdatingEvent(DataRow, IDbCommand, StatementType, DataTableMapping) Create row updating event. Declaration protected override RowUpdatingEventArgs CreateRowUpdatingEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping) Parameters Type Name Description System.Data.DataRow dataRow System.Data.IDbCommand command System.Data.StatementType statementType System.Data.Common.DataTableMapping tableMapping Returns Type Description System.Data.Common.RowUpdatingEventArgs Overrides System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow, System.Data.IDbCommand, System.Data.StatementType, System.Data.Common.DataTableMapping) | Improve this Doc View Source OnRowUpdated(RowUpdatedEventArgs) Raise the RowUpdated event. Declaration protected override void OnRowUpdated(RowUpdatedEventArgs value) Parameters Type Name Description System.Data.Common.RowUpdatedEventArgs value Overrides System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs) | Improve this Doc View Source OnRowUpdating(RowUpdatingEventArgs) Raise the RowUpdating event. Declaration protected override void OnRowUpdating(RowUpdatingEventArgs value) Parameters Type Name Description System.Data.Common.RowUpdatingEventArgs value Overrides System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs) Events | Improve this Doc View Source RowUpdated Row updated event. Declaration public event NpgsqlRowUpdatedEventHandler RowUpdated Event Type Type Description NpgsqlRowUpdatedEventHandler | Improve this Doc View Source RowUpdating Row updating event. Declaration public event NpgsqlRowUpdatingEventHandler RowUpdating Event Type Type Description NpgsqlRowUpdatingEventHandler"
  },
  "api/Npgsql.NpgsqlDataReader.html": {
    "href": "api/Npgsql.NpgsqlDataReader.html",
    "title": "Class NpgsqlDataReader | Npgsql Documentation",
    "keywords": "Class NpgsqlDataReader Reads a forward-only stream of rows from a data source. Inheritance System.Object System.MarshalByRefObject System.Data.Common.DbDataReader NpgsqlDataReader Inherited Members System.Data.Common.DbDataReader.System.Data.IDataRecord.GetData(System.Int32) System.Data.Common.DbDataReader.GetDbDataReader(System.Int32) System.Data.Common.DbDataReader.GetFieldValueAsync<T>(System.Int32) System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32) System.Data.Common.DbDataReader.ReadAsync() System.Data.Common.DbDataReader.NextResultAsync() System.Data.Common.DbDataReader.VisibleFieldCount System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.CreateObjRef(System.Type) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Npgsql Assembly :Npgsql.dll Syntax public class NpgsqlDataReader : DbDataReader, IDataReader, IDisposable, IDataRecord, IEnumerable Properties | Improve this Doc View Source Depth Gets a value indicating the depth of nesting for the current row. Always returns zero. Declaration public override int Depth { get; } Property Value Type Description System.Int32 Overrides System.Data.Common.DbDataReader.Depth | Improve this Doc View Source FieldCount Gets the number of columns in the current row. Declaration public override int FieldCount { get; } Property Value Type Description System.Int32 Overrides System.Data.Common.DbDataReader.FieldCount | Improve this Doc View Source HasRows Gets a value that indicates whether this DbDataReader contains one or more rows. Declaration public override bool HasRows { get; } Property Value Type Description System.Boolean Overrides System.Data.Common.DbDataReader.HasRows | Improve this Doc View Source IsClosed Gets a value indicating whether the data reader is closed. Declaration public override bool IsClosed { get; } Property Value Type Description System.Boolean Overrides System.Data.Common.DbDataReader.IsClosed | Improve this Doc View Source IsOnRow Indicates whether the reader is currently positioned on a row, i.e. whether reading a column is possible. This property is different from HasRows in that HasRows will return true even if attempting to read a column will fail, e.g. before Read() has been called Declaration public bool IsOnRow { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Item[Int32] Gets the value of the specified column as an instance of System.Object . Declaration public override object this[int ordinal] { get; } Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Property Value Type Description System.Object The value of the specified column. Overrides System.Data.Common.DbDataReader.Item[System.Int32] | Improve this Doc View Source Item[String] Gets the value of the specified column as an instance of System.Object . Declaration public override object this[string name] { get; } Parameters Type Name Description System.String name The name of the column. Property Value Type Description System.Object The value of the specified column. Overrides System.Data.Common.DbDataReader.Item[System.String] | Improve this Doc View Source RecordsAffected Gets the number of rows changed, inserted, or deleted by execution of the SQL statement. Declaration public override int RecordsAffected { get; } Property Value Type Description System.Int32 Overrides System.Data.Common.DbDataReader.RecordsAffected | Improve this Doc View Source Statements Returns details about each statement that this reader will or has executed. Declaration public IReadOnlyList<NpgsqlStatement> Statements { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < NpgsqlStatement > Remarks Note that some fields (i.e. rows and oid) are only populated as the reader traverses the result. For commands with multiple queries, this exposes the number of rows affected on a statement-by-statement basis, unlike RecordsAffected which exposes an aggregation across all statements. Methods | Improve this Doc View Source Close() Closes the NpgsqlDataReader object. Declaration public override void Close() Overrides System.Data.Common.DbDataReader.Close() | Improve this Doc View Source Dispose(Boolean) Releases the resources used by the NpgsqlDataReader . Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides System.Data.Common.DbDataReader.Dispose(System.Boolean) | Improve this Doc View Source GetBoolean(Int32) Gets the value of the specified column as a Boolean. Declaration public override bool GetBoolean(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.Boolean The value of the specified column. Overrides System.Data.Common.DbDataReader.GetBoolean(System.Int32) | Improve this Doc View Source GetByte(Int32) Gets the value of the specified column as a byte. Declaration public override byte GetByte(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.Byte The value of the specified column. Overrides System.Data.Common.DbDataReader.GetByte(System.Int32) | Improve this Doc View Source GetBytes(Int32, Int64, Byte[], Int32, Int32) Reads a stream of bytes from the specified column, starting at location indicated by dataOffset, into the buffer, starting at the location indicated by bufferOffset. Declaration public override long GetBytes(int ordinal, long dataOffset, byte[] buffer, int bufferOffset, int length) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. System.Int64 dataOffset The index within the row from which to begin the read operation. System.Byte [] buffer The buffer into which to copy the data. System.Int32 bufferOffset The index with the buffer to which the data will be copied. System.Int32 length The maximum number of characters to read. Returns Type Description System.Int64 The actual number of bytes read. Overrides System.Data.Common.DbDataReader.GetBytes(System.Int32, System.Int64, System.Byte[], System.Int32, System.Int32) | Improve this Doc View Source GetChar(Int32) Gets the value of the specified column as a single character. Declaration public override char GetChar(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.Char The value of the specified column. Overrides System.Data.Common.DbDataReader.GetChar(System.Int32) | Improve this Doc View Source GetChars(Int32, Int64, Char[], Int32, Int32) Reads a stream of characters from the specified column, starting at location indicated by dataOffset, into the buffer, starting at the location indicated by bufferOffset. Declaration public override long GetChars(int ordinal, long dataOffset, char[] buffer, int bufferOffset, int length) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. System.Int64 dataOffset The index within the row from which to begin the read operation. System.Char [] buffer The buffer into which to copy the data. System.Int32 bufferOffset The index with the buffer to which the data will be copied. System.Int32 length The maximum number of characters to read. Returns Type Description System.Int64 The actual number of characters read. Overrides System.Data.Common.DbDataReader.GetChars(System.Int32, System.Int64, System.Char[], System.Int32, System.Int32) | Improve this Doc View Source GetColumnSchema() Returns schema information for the columns in the current resultset. Declaration public ReadOnlyCollection<NpgsqlDbColumn> GetColumnSchema() Returns Type Description System.Collections.ObjectModel.ReadOnlyCollection < NpgsqlDbColumn > | Improve this Doc View Source GetDataTypeName(Int32) Gets the data type information for the specified field. This will be the PostgreSQL type name (e.g. int4) as in the pg_type table, not the .NET type (see GetFieldType(Int32) for that). Declaration public override string GetDataTypeName(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column index. Returns Type Description System.String Overrides System.Data.Common.DbDataReader.GetDataTypeName(System.Int32) | Improve this Doc View Source GetDataTypeOID(Int32) Gets the OID for the PostgreSQL type for the specified field, as it appears in the pg_type table. Declaration public uint GetDataTypeOID(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column index. Returns Type Description System.UInt32 Remarks This is a PostgreSQL-internal value that should not be relied upon and should only be used for debugging purposes. | Improve this Doc View Source GetDate(Int32) Gets the value of the specified column as an NpgsqlDate , Npgsql's provider-specific type for dates. Declaration public NpgsqlDate GetDate(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description NpgsqlDate The value of the specified column. Remarks PostgreSQL's date type represents dates from 4713 BC to 5874897 AD, while .NET's DateTime only supports years from 1 to 1999. If you require years outside this range use this accessor. The standard GetProviderSpecificValue(Int32) method will also return this type, but has the disadvantage of boxing the value. See http://www.postgresql.org/docs/current/static/datatype-datetime.html | Improve this Doc View Source GetDateTime(Int32) Gets the value of the specified column as a System.DateTime object. Declaration public override DateTime GetDateTime(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.DateTime The value of the specified column. Overrides System.Data.Common.DbDataReader.GetDateTime(System.Int32) | Improve this Doc View Source GetDecimal(Int32) Gets the value of the specified column as a System.Decimal object. Declaration public override decimal GetDecimal(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.Decimal The value of the specified column. Overrides System.Data.Common.DbDataReader.GetDecimal(System.Int32) | Improve this Doc View Source GetDouble(Int32) Gets the value of the specified column as a double-precision floating point number. Declaration public override double GetDouble(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.Double The value of the specified column. Overrides System.Data.Common.DbDataReader.GetDouble(System.Int32) | Improve this Doc View Source GetEnumerator() Returns an System.Collections.IEnumerator that can be used to iterate through the rows in the data reader. Declaration public override IEnumerator GetEnumerator() Returns Type Description System.Collections.IEnumerator An System.Collections.IEnumerator that can be used to iterate through the rows in the data reader. Overrides System.Data.Common.DbDataReader.GetEnumerator() | Improve this Doc View Source GetFieldType(Int32) Gets the data type of the specified column. Declaration public override Type GetFieldType(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.Type The data type of the specified column. Overrides System.Data.Common.DbDataReader.GetFieldType(System.Int32) | Improve this Doc View Source GetFieldValue<T>(Int32) Synchronously gets the value of the specified column as a type. Declaration public override T GetFieldValue<T>(int ordinal) Parameters Type Name Description System.Int32 ordinal The column to be retrieved. Returns Type Description T The column to be retrieved. Type Parameters Name Description T Synchronously gets the value of the specified column as a type. Overrides System.Data.Common.DbDataReader.GetFieldValue<T>(System.Int32) | Improve this Doc View Source GetFieldValueAsync<T>(Int32, CancellationToken) Asynchronously gets the value of the specified column as a type. The cancellationToken parameter is currently ignored. Declaration public override Task<T> GetFieldValueAsync<T>(int ordinal, CancellationToken cancellationToken) Parameters Type Name Description System.Int32 ordinal The column to be retrieved. System.Threading.CancellationToken cancellationToken Currently ignored. Returns Type Description System.Threading.Tasks.Task <T> A task representing the asynchronous operation. Type Parameters Name Description T The type of the value to be returned. Overrides System.Data.Common.DbDataReader.GetFieldValueAsync<T>(System.Int32, System.Threading.CancellationToken) | Improve this Doc View Source GetFloat(Int32) Gets the value of the specified column as a single-precision floating point number. Declaration public override float GetFloat(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.Single The value of the specified column. Overrides System.Data.Common.DbDataReader.GetFloat(System.Int32) | Improve this Doc View Source GetGuid(Int32) Gets the value of the specified column as a globally-unique identifier (GUID). Declaration public override Guid GetGuid(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.Guid The value of the specified column. Overrides System.Data.Common.DbDataReader.GetGuid(System.Int32) | Improve this Doc View Source GetInt16(Int32) Gets the value of the specified column as a 16-bit signed integer. Declaration public override short GetInt16(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.Int16 The value of the specified column. Overrides System.Data.Common.DbDataReader.GetInt16(System.Int32) | Improve this Doc View Source GetInt32(Int32) Gets the value of the specified column as a 32-bit signed integer. Declaration public override int GetInt32(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.Int32 The value of the specified column. Overrides System.Data.Common.DbDataReader.GetInt32(System.Int32) | Improve this Doc View Source GetInt64(Int32) Gets the value of the specified column as a 64-bit signed integer. Declaration public override long GetInt64(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.Int64 The value of the specified column. Overrides System.Data.Common.DbDataReader.GetInt64(System.Int32) | Improve this Doc View Source GetInterval(Int32) Gets the value of the specified column as an NpgsqlTimeSpan , Npgsql's provider-specific type for time spans. Declaration public NpgsqlTimeSpan GetInterval(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description NpgsqlTimeSpan The value of the specified column. Remarks PostgreSQL's interval type has has a resolution of 1 microsecond and ranges from -178000000 to 178000000 years, while .NET's TimeSpan has a resolution of 100 nanoseconds and ranges from roughly -29247 to 29247 years. If you require values from outside TimeSpan's range use this accessor. The standard ADO.NET GetProviderSpecificValue(Int32) method will also return this type, but has the disadvantage of boxing the value. See http://www.postgresql.org/docs/current/static/datatype-datetime.html | Improve this Doc View Source GetName(Int32) Gets the name of the column, given the zero-based column ordinal. Declaration public override string GetName(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.String The name of the specified column. Overrides System.Data.Common.DbDataReader.GetName(System.Int32) | Improve this Doc View Source GetOrdinal(String) Gets the column ordinal given the name of the column. Declaration public override int GetOrdinal(string name) Parameters Type Name Description System.String name The name of the column. Returns Type Description System.Int32 The zero-based column ordinal. Overrides System.Data.Common.DbDataReader.GetOrdinal(System.String) | Improve this Doc View Source GetProviderSpecificFieldType(Int32) Returns the provider-specific field type of the specified column. Declaration public override Type GetProviderSpecificFieldType(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.Type The Type object that describes the data type of the specified column. Overrides System.Data.Common.DbDataReader.GetProviderSpecificFieldType(System.Int32) | Improve this Doc View Source GetProviderSpecificValue(Int32) Gets the value of the specified column as an instance of System.Object . Declaration public override object GetProviderSpecificValue(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.Object The value of the specified column. Overrides System.Data.Common.DbDataReader.GetProviderSpecificValue(System.Int32) | Improve this Doc View Source GetProviderSpecificValues(Object[]) Gets all provider-specific attribute columns in the collection for the current row. Declaration public override int GetProviderSpecificValues(object[] values) Parameters Type Name Description System.Object [] values An array of Object into which to copy the attribute columns. Returns Type Description System.Int32 The number of instances of System.Object in the array. Overrides System.Data.Common.DbDataReader.GetProviderSpecificValues(System.Object[]) | Improve this Doc View Source GetSchemaTable() Returns a System.Data.DataTable that describes the column metadata of the DataReader. Declaration public override DataTable GetSchemaTable() Returns Type Description System.Data.DataTable Overrides System.Data.Common.DbDataReader.GetSchemaTable() | Improve this Doc View Source GetStream(Int32) Retrieves data as a System.IO.Stream . Declaration public override Stream GetStream(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.IO.Stream The returned object. Overrides System.Data.Common.DbDataReader.GetStream(System.Int32) | Improve this Doc View Source GetString(Int32) Gets the value of the specified column as an instance of System.String . Declaration public override string GetString(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.String The value of the specified column. Overrides System.Data.Common.DbDataReader.GetString(System.Int32) | Improve this Doc View Source GetTextReader(Int32) Retrieves data as a System.IO.TextReader . Declaration public override TextReader GetTextReader(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.IO.TextReader The returned object. Overrides System.Data.Common.DbDataReader.GetTextReader(System.Int32) | Improve this Doc View Source GetTimeSpan(Int32) Gets the value of the specified column as a TimeSpan, Declaration public TimeSpan GetTimeSpan(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.TimeSpan The value of the specified column. Remarks PostgreSQL's interval type has has a resolution of 1 microsecond and ranges from -178000000 to 178000000 years, while .NET's TimeSpan has a resolution of 100 nanoseconds and ranges from roughly -29247 to 29247 years. See http://www.postgresql.org/docs/current/static/datatype-datetime.html | Improve this Doc View Source GetTimeStamp(Int32) Gets the value of the specified column as an NpgsqlDateTime , Npgsql's provider-specific type for date/time timestamps. Note that this type covers both PostgreSQL's \"timestamp with time zone\" and \"timestamp without time zone\" types, which differ only in how they are converted upon input/output. Declaration public NpgsqlDateTime GetTimeStamp(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description NpgsqlDateTime The value of the specified column. Remarks PostgreSQL's timestamp type represents dates from 4713 BC to 5874897 AD, while .NET's DateTime only supports years from 1 to 1999. If you require years outside this range use this accessor. The standard GetProviderSpecificValue(Int32) method will also return this type, but has the disadvantage of boxing the value. See http://www.postgresql.org/docs/current/static/datatype-datetime.html | Improve this Doc View Source GetValue(Int32) Gets the value of the specified column as an instance of System.Object . Declaration public override object GetValue(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.Object The value of the specified column. Overrides System.Data.Common.DbDataReader.GetValue(System.Int32) | Improve this Doc View Source GetValues(Object[]) Populates an array of objects with the column values of the current row. Declaration public override int GetValues(object[] values) Parameters Type Name Description System.Object [] values An array of Object into which to copy the attribute columns. Returns Type Description System.Int32 The number of instances of System.Object in the array. Overrides System.Data.Common.DbDataReader.GetValues(System.Object[]) | Improve this Doc View Source IsDBNull(Int32) Gets a value that indicates whether the column contains nonexistent or missing values. Declaration public override bool IsDBNull(int ordinal) Parameters Type Name Description System.Int32 ordinal The zero-based column ordinal. Returns Type Description System.Boolean true if the specified column is equivalent to System.DBNull ; otherwise false . Overrides System.Data.Common.DbDataReader.IsDBNull(System.Int32) | Improve this Doc View Source IsDBNullAsync(Int32, CancellationToken) An asynchronous version of IsDBNull(Int32) , which gets a value that indicates whether the column contains non-existent or missing values. The cancellationToken parameter is currently ignored. Declaration public override Task<bool> IsDBNullAsync(int ordinal, CancellationToken cancellationToken) Parameters Type Name Description System.Int32 ordinal The zero-based column to be retrieved. System.Threading.CancellationToken cancellationToken Currently ignored. Returns Type Description System.Threading.Tasks.Task < System.Boolean > true if the specified column value is equivalent to System.DBNull otherwise false . Overrides System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32, System.Threading.CancellationToken) | Improve this Doc View Source NextResult() Advances the reader to the next result when reading the results of a batch of statements. Declaration public override sealed bool NextResult() Returns Type Description System.Boolean Overrides System.Data.Common.DbDataReader.NextResult() | Improve this Doc View Source NextResultAsync(CancellationToken) This is the asynchronous version of NextResult. The cancellationToken parameter is currently ignored. Declaration public override sealed Task<bool> NextResultAsync(CancellationToken cancellationToken) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Currently ignored. Returns Type Description System.Threading.Tasks.Task < System.Boolean > A task representing the asynchronous operation. Overrides System.Data.Common.DbDataReader.NextResultAsync(System.Threading.CancellationToken) | Improve this Doc View Source Read() Advances the reader to the next record in a result set. Declaration public override bool Read() Returns Type Description System.Boolean true if there are more rows; otherwise false . Overrides System.Data.Common.DbDataReader.Read() Remarks The default position of a data reader is before the first record. Therefore, you must call Read to begin accessing data. | Improve this Doc View Source ReadAsync(CancellationToken) This is the asynchronous version of Read() The cancellation token is currently ignored. Declaration public override Task<bool> ReadAsync(CancellationToken cancellationToken) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Ignored for now. Returns Type Description System.Threading.Tasks.Task < System.Boolean > A task representing the asynchronous operation. Overrides System.Data.Common.DbDataReader.ReadAsync(System.Threading.CancellationToken) Events | Improve this Doc View Source ReaderClosed Is raised whenever Close() is called. Declaration public event EventHandler ReaderClosed Event Type Type Description System.EventHandler"
  },
  "api/Npgsql.NpgsqlException.html": {
    "href": "api/Npgsql.NpgsqlException.html",
    "title": "Class NpgsqlException | Npgsql Documentation",
    "keywords": "Class NpgsqlException The exception that is thrown when server-related issues occur. Inheritance System.Object System.Exception System.SystemException System.Runtime.InteropServices.ExternalException System.Data.Common.DbException NpgsqlException Inherited Members System.Runtime.InteropServices.ExternalException.ToString() System.Runtime.InteropServices.ExternalException.ErrorCode System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace :Npgsql Assembly :Npgsql.dll Syntax [Serializable] public class NpgsqlException : DbException, ISerializable, _Exception Remarks PostgreSQL errors (e.g. query SQL issues, constraint violations) are raised via PostgresException which is a subclass of this class. Purely Npgsql-related issues which aren't related to the server will be raised via the standard CLR exceptions (e.g. ArgumentException). Properties | Improve this Doc View Source BaseMessage Same as MessageText , for backwards-compatibility with Npgsql 2.x and Hangfire. Declaration [Obsolete(\"Use PostgresException.MessageText instead\")] public string BaseMessage { get; } Property Value Type Description System.String Remarks Until Hangfire fix themselves: https://github.com/frankhommers/Hangfire.PostgreSql/issues/33"
  },
  "api/Npgsql.NpgsqlFactory.html": {
    "href": "api/Npgsql.NpgsqlFactory.html",
    "title": "Class NpgsqlFactory | Npgsql Documentation",
    "keywords": "Class NpgsqlFactory A factory to create instances of various Npgsql objects. Inheritance System.Object System.Data.Common.DbProviderFactory NpgsqlFactory Inherited Members System.Data.Common.DbProviderFactory.CreatePermission(System.Security.Permissions.PermissionState) System.Data.Common.DbProviderFactory.CreateDataSourceEnumerator() System.Data.Common.DbProviderFactory.CanCreateDataSourceEnumerator System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Npgsql Assembly :Npgsql.dll Syntax [Serializable] public sealed class NpgsqlFactory : DbProviderFactory, IServiceProvider Fields | Improve this Doc View Source Instance Declaration public static NpgsqlFactory Instance Field Value Type Description NpgsqlFactory Methods | Improve this Doc View Source CreateCommand() Creates an NpgsqlCommand object. Declaration public override DbCommand CreateCommand() Returns Type Description System.Data.Common.DbCommand Overrides System.Data.Common.DbProviderFactory.CreateCommand() | Improve this Doc View Source CreateCommandBuilder() Declaration public override DbCommandBuilder CreateCommandBuilder() Returns Type Description System.Data.Common.DbCommandBuilder Overrides System.Data.Common.DbProviderFactory.CreateCommandBuilder() | Improve this Doc View Source CreateConnection() Declaration public override DbConnection CreateConnection() Returns Type Description System.Data.Common.DbConnection Overrides System.Data.Common.DbProviderFactory.CreateConnection() | Improve this Doc View Source CreateConnectionStringBuilder() Declaration public override DbConnectionStringBuilder CreateConnectionStringBuilder() Returns Type Description System.Data.Common.DbConnectionStringBuilder Overrides System.Data.Common.DbProviderFactory.CreateConnectionStringBuilder() | Improve this Doc View Source CreateDataAdapter() Declaration public override DbDataAdapter CreateDataAdapter() Returns Type Description System.Data.Common.DbDataAdapter Overrides System.Data.Common.DbProviderFactory.CreateDataAdapter() | Improve this Doc View Source CreateParameter() Declaration public override DbParameter CreateParameter() Returns Type Description System.Data.Common.DbParameter Overrides System.Data.Common.DbProviderFactory.CreateParameter() | Improve this Doc View Source GetService(Type) Declaration public object GetService(Type serviceType) Parameters Type Name Description System.Type serviceType Returns Type Description System.Object Implements System.IServiceProvider.GetService(System.Type)"
  },
  "api/Npgsql.NpgsqlLargeObjectManager.html": {
    "href": "api/Npgsql.NpgsqlLargeObjectManager.html",
    "title": "Class NpgsqlLargeObjectManager | Npgsql Documentation",
    "keywords": "Class NpgsqlLargeObjectManager Large object manager. This class can be used to store very large files in a PostgreSQL database. Inheritance System.Object NpgsqlLargeObjectManager Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Npgsql Assembly :Npgsql.dll Syntax public class NpgsqlLargeObjectManager Constructors | Improve this Doc View Source NpgsqlLargeObjectManager(NpgsqlConnection) Creates an NpgsqlLargeObjectManager for this connection. The connection must be opened to perform remote operations. Declaration public NpgsqlLargeObjectManager(NpgsqlConnection connection) Parameters Type Name Description NpgsqlConnection connection Properties | Improve this Doc View Source Has64BitSupport Since PostgreSQL 9.3, large objects larger than 2GB can be handled, up to 4TB. This property returns true whether the PostgreSQL version is >= 9.3. Declaration public bool Has64BitSupport { get; } Property Value Type Description System.Boolean | Improve this Doc View Source MaxTransferBlockSize The largest chunk size (in bytes) read and write operations will read/write each roundtrip to the network. Default 4 MB. Declaration public int MaxTransferBlockSize { get; set; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Create(UInt32) Create an empty large object in the database. If an oid is specified but is already in use, an PostgresException will be thrown. Declaration public uint Create(uint preferredOid = 0U) Parameters Type Name Description System.UInt32 preferredOid A preferred oid, or specify 0 if one should be automatically assigned Returns Type Description System.UInt32 The oid for the large object created Exceptions Type Condition PostgresException If an oid is already in use | Improve this Doc View Source CreateAsync(CancellationToken, UInt32) Declaration public Task<uint> CreateAsync(CancellationToken cancellationToken, uint preferredOid = 0U) Parameters Type Name Description System.Threading.CancellationToken cancellationToken System.UInt32 preferredOid Returns Type Description System.Threading.Tasks.Task < System.UInt32 > | Improve this Doc View Source ExportRemote(UInt32, String) Exports a large object stored in the database to a file on the backend. This requires superuser permissions. Declaration public void ExportRemote(uint oid, string path) Parameters Type Name Description System.UInt32 oid Oid of the object to export System.String path Path to write the file on the backend | Improve this Doc View Source ExportRemoteAsync(UInt32, String, CancellationToken) Declaration public Task ExportRemoteAsync(uint oid, string path, CancellationToken cancellationToken) Parameters Type Name Description System.UInt32 oid System.String path System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source ImportRemote(String, UInt32) Imports a large object to be stored as a large object in the database from a file stored on the backend. This requires superuser permissions. Declaration public void ImportRemote(string path, uint oid = 0U) Parameters Type Name Description System.String path Path to read the file on the backend System.UInt32 oid A preferred oid, or specify 0 if one should be automatically assigned | Improve this Doc View Source ImportRemoteAsync(String, CancellationToken, UInt32) Declaration public Task ImportRemoteAsync(string path, CancellationToken cancellationToken, uint oid = 0U) Parameters Type Name Description System.String path System.Threading.CancellationToken cancellationToken System.UInt32 oid Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source OpenRead(UInt32) Opens a large object on the backend, returning a stream controlling this remote object. A transaction snapshot is taken by the backend when the object is opened with only read permissions. When reading from this object, the contents reflects the time when the snapshot was taken. Note that this method, as well as operations on the stream must be wrapped inside a transaction. Declaration public NpgsqlLargeObjectStream OpenRead(uint oid) Parameters Type Name Description System.UInt32 oid Oid of the object Returns Type Description NpgsqlLargeObjectStream An NpgsqlLargeObjectStream | Improve this Doc View Source OpenReadAsync(UInt32, CancellationToken) Declaration public Task<NpgsqlLargeObjectStream> OpenReadAsync(uint oid, CancellationToken cancellationToken) Parameters Type Name Description System.UInt32 oid System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < NpgsqlLargeObjectStream > | Improve this Doc View Source OpenReadWrite(UInt32) Opens a large object on the backend, returning a stream controlling this remote object. Note that this method, as well as operations on the stream must be wrapped inside a transaction. Declaration public NpgsqlLargeObjectStream OpenReadWrite(uint oid) Parameters Type Name Description System.UInt32 oid Oid of the object Returns Type Description NpgsqlLargeObjectStream An NpgsqlLargeObjectStream | Improve this Doc View Source OpenReadWriteAsync(UInt32, CancellationToken) Declaration public Task<NpgsqlLargeObjectStream> OpenReadWriteAsync(uint oid, CancellationToken cancellationToken) Parameters Type Name Description System.UInt32 oid System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < NpgsqlLargeObjectStream > | Improve this Doc View Source Unlink(UInt32) Deletes a large object on the backend. Declaration public void Unlink(uint oid) Parameters Type Name Description System.UInt32 oid Oid of the object to delete | Improve this Doc View Source UnlinkAsync(UInt32, CancellationToken) Declaration public Task UnlinkAsync(uint oid, CancellationToken cancellationToken) Parameters Type Name Description System.UInt32 oid System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task"
  },
  "api/Npgsql.StatementType.html": {
    "href": "api/Npgsql.StatementType.html",
    "title": "Enum StatementType | Npgsql Documentation",
    "keywords": "Enum StatementType Specifies the type of SQL statement, e.g. SELECT Namespace :Npgsql Assembly :Npgsql.dll Syntax public enum StatementType Fields Name Description Copy CreateTableAs Delete Fetch Insert Move Other Select Update"
  },
  "api/Npgsql.html": {
    "href": "api/Npgsql.html",
    "title": "Namespace Npgsql | Npgsql Documentation",
    "keywords": "Namespace Npgsql Classes NpgsqlBinaryExporter Provides an API for a binary COPY TO operation, a high-performance data export mechanism from a PostgreSQL table. Initiated by BeginBinaryExport(String) NpgsqlBinaryImporter Provides an API for a binary COPY FROM operation, a high-performance data import mechanism to a PostgreSQL table. Initiated by BeginBinaryImport(String) NpgsqlCommand Represents a SQL statement or function (stored procedure) to execute against a PostgreSQL database. This class cannot be inherited. NpgsqlCommandBuilder This class is responsible to create database commands for automatic insert, update and delete operations. NpgsqlConnection This class represents a connection to a PostgreSQL server. NpgsqlConnectionStringBuilder Provides a simple way to create and manage the contents of connection strings used by the NpgsqlConnection class. NpgsqlCopyTextReader Reader for a text export, initiated by BeginTextExport(String) . NpgsqlCopyTextWriter Writer for a text import, initiated by BeginTextImport(String) . NpgsqlDataAdapter This class represents an adapter from many commands: select, update, insert and delete to fill System.Data.DataSet NpgsqlDataReader Reads a forward-only stream of rows from a data source. NpgsqlException The exception that is thrown when server-related issues occur. NpgsqlFactory A factory to create instances of various Npgsql objects. NpgsqlLargeObjectManager Large object manager. This class can be used to store very large files in a PostgreSQL database. NpgsqlLargeObjectStream An interface to remotely control the seekable stream for an opened large object on a PostgreSQL server. Note that the OpenRead/OpenReadWrite method as well as all operations performed on this stream must be wrapped inside a database transaction. NpgsqlNoticeEventArgs Provides data for a notice event. NpgsqlNotificationEventArgs EventArgs class to send Notification parameters. NpgsqlParameter This class represents a parameter to a command that will be sent to server NpgsqlParameterCollection Represents a collection of parameters relevant to a NpgsqlCommand as well as their respective mappings to columns in a DataSet. This class cannot be inherited. NpgsqlRawCopyStream Provides an API for a raw binary COPY operation, a high-performance data import/export mechanism to a PostgreSQL table. Initiated by BeginRawBinaryCopy(String) NpgsqlRowUpdatedEventArgs NpgsqlRowUpdatingEventArgs NpgsqlSnakeCaseNameTranslator A name translator which converts standard CLR names (e.g. SomeClass) to snake-case database names (some_class) NpgsqlStatement Represents a single SQL statement within Npgsql. Instances aren't constructed directly; users should construct an NpgsqlCommand object and populate its CommandText property as in standard ADO.NET. Npgsql will analyze that property and constructed instances of NpgsqlStatement internally. Users can retrieve instances from Statements and access information about statement execution (e.g. affected rows). NpgsqlTransaction Represents a transaction to be made in a PostgreSQL database. This class cannot be inherited. PostgresException The exception that is thrown when the PostgreSQL backend reports errors (e.g. query SQL issues, constraint violations). PostgresNotice A non-critical (warning or info) message generated by the backend. Can be synchronous (i.e. in response to a query) or asynchronous (a totally unrelated backend-side event). Interfaces INpgsqlNameTranslator A component which translates a CLR name (e.g. SomeClass) into a database name (e.g. some_class) according to some scheme. Used for mapping enum and composite types. Enums ServerCompatibilityMode An option specified in the connection string that activates special compatibility features. SslMode Specifies how to manage SSL. StatementType Specifies the type of SQL statement, e.g. SELECT Delegates NoticeEventHandler Represents the method that handles the Notification events. NotificationEventHandler Represents the method that handles the Notification events. NpgsqlRowUpdatedEventHandler Represents the method that handles the RowUpdated events. NpgsqlRowUpdatingEventHandler Represents the method that handles the RowUpdating events. ProvideClientCertificatesCallback Represents the method that allows the application to provide a certificate collection to be used for SSL client authentication"
  },
  "api/NpgsqlTypes.Coordinate2D.html": {
    "href": "api/NpgsqlTypes.Coordinate2D.html",
    "title": "Struct Coordinate2D | Npgsql Documentation",
    "keywords": "Struct Coordinate2D A structure representing a 2D double precision floating point coordinate; Inherited Members System.ValueType.Equals(System.Object) System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace :NpgsqlTypes Assembly :Npgsql.dll Syntax public struct Coordinate2D Constructors | Improve this Doc View Source Coordinate2D(Double, Double) Generates a new BBpoint with the specified coordinates. Declaration public Coordinate2D(double x, double y) Parameters Type Name Description System.Double x X coordinate System.Double y Y coordinate Fields | Improve this Doc View Source X X coordinate. Declaration public double X Field Value Type Description System.Double | Improve this Doc View Source Y Y coordinate. Declaration public double Y Field Value Type Description System.Double Methods | Improve this Doc View Source Equals(Coordinate2D) Declaration public bool Equals(Coordinate2D c) Parameters Type Name Description Coordinate2D c Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode()"
  },
  "api/NpgsqlTypes.NpgsqlBox.html": {
    "href": "api/NpgsqlTypes.NpgsqlBox.html",
    "title": "Struct NpgsqlBox | Npgsql Documentation",
    "keywords": "Struct NpgsqlBox Represents a PostgreSQL box type. Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace :NpgsqlTypes Assembly :Npgsql.dll Syntax public struct NpgsqlBox : IEquatable<NpgsqlBox> Remarks See http://www.postgresql.org/docs/current/static/datatype-geometric.html Constructors | Improve this Doc View Source NpgsqlBox(NpgsqlPoint, NpgsqlPoint) Declaration public NpgsqlBox(NpgsqlPoint upperRight, NpgsqlPoint lowerLeft) Parameters Type Name Description NpgsqlPoint upperRight NpgsqlPoint lowerLeft | Improve this Doc View Source NpgsqlBox(Double, Double, Double, Double) Declaration public NpgsqlBox(double top, double right, double bottom, double left) Parameters Type Name Description System.Double top System.Double right System.Double bottom System.Double left Properties | Improve this Doc View Source Bottom Declaration public double Bottom { get; } Property Value Type Description System.Double | Improve this Doc View Source Height Declaration public double Height { get; } Property Value Type Description System.Double | Improve this Doc View Source IsEmpty Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Left Declaration public double Left { get; } Property Value Type Description System.Double | Improve this Doc View Source LowerLeft Declaration public NpgsqlPoint LowerLeft { get; set; } Property Value Type Description NpgsqlPoint | Improve this Doc View Source Right Declaration public double Right { get; } Property Value Type Description System.Double | Improve this Doc View Source Top Declaration public double Top { get; } Property Value Type Description System.Double | Improve this Doc View Source UpperRight Declaration public NpgsqlPoint UpperRight { get; set; } Property Value Type Description NpgsqlPoint | Improve this Doc View Source Width Declaration public double Width { get; } Property Value Type Description System.Double Methods | Improve this Doc View Source Equals(NpgsqlBox) Declaration public bool Equals(NpgsqlBox other) Parameters Type Name Description NpgsqlBox other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Parse(String) Declaration public static NpgsqlBox Parse(string s) Parameters Type Name Description System.String s Returns Type Description NpgsqlBox | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(NpgsqlBox, NpgsqlBox) Declaration public static bool operator ==(NpgsqlBox x, NpgsqlBox y) Parameters Type Name Description NpgsqlBox x NpgsqlBox y Returns Type Description System.Boolean | Improve this Doc View Source Inequality(NpgsqlBox, NpgsqlBox) Declaration public static bool operator !=(NpgsqlBox x, NpgsqlBox y) Parameters Type Name Description NpgsqlBox x NpgsqlBox y Returns Type Description System.Boolean"
  },
  "api/NpgsqlTypes.NpgsqlCircle.html": {
    "href": "api/NpgsqlTypes.NpgsqlCircle.html",
    "title": "Struct NpgsqlCircle | Npgsql Documentation",
    "keywords": "Struct NpgsqlCircle Represents a PostgreSQL Circle type. Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace :NpgsqlTypes Assembly :Npgsql.dll Syntax public struct NpgsqlCircle : IEquatable<NpgsqlCircle> Constructors | Improve this Doc View Source NpgsqlCircle(NpgsqlPoint, Double) Declaration public NpgsqlCircle(NpgsqlPoint center, double radius) Parameters Type Name Description NpgsqlPoint center System.Double radius | Improve this Doc View Source NpgsqlCircle(Double, Double, Double) Declaration public NpgsqlCircle(double x, double y, double radius) Parameters Type Name Description System.Double x System.Double y System.Double radius Properties | Improve this Doc View Source Center Declaration public NpgsqlPoint Center { get; set; } Property Value Type Description NpgsqlPoint | Improve this Doc View Source Radius Declaration public double Radius { get; set; } Property Value Type Description System.Double | Improve this Doc View Source X Declaration public double X { get; set; } Property Value Type Description System.Double | Improve this Doc View Source Y Declaration public double Y { get; set; } Property Value Type Description System.Double Methods | Improve this Doc View Source Equals(NpgsqlCircle) Declaration public bool Equals(NpgsqlCircle other) Parameters Type Name Description NpgsqlCircle other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Parse(String) Declaration public static NpgsqlCircle Parse(string s) Parameters Type Name Description System.String s Returns Type Description NpgsqlCircle | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(NpgsqlCircle, NpgsqlCircle) Declaration public static bool operator ==(NpgsqlCircle x, NpgsqlCircle y) Parameters Type Name Description NpgsqlCircle x NpgsqlCircle y Returns Type Description System.Boolean | Improve this Doc View Source Inequality(NpgsqlCircle, NpgsqlCircle) Declaration public static bool operator !=(NpgsqlCircle x, NpgsqlCircle y) Parameters Type Name Description NpgsqlCircle x NpgsqlCircle y Returns Type Description System.Boolean"
  },
  "api/NpgsqlTypes.NpgsqlDate.html": {
    "href": "api/NpgsqlTypes.NpgsqlDate.html",
    "title": "Struct NpgsqlDate | Npgsql Documentation",
    "keywords": "Struct NpgsqlDate Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace :NpgsqlTypes Assembly :Npgsql.dll Syntax [Serializable] public struct NpgsqlDate : IEquatable<NpgsqlDate>, IComparable<NpgsqlDate>, IComparable, IComparer<NpgsqlDate>, IComparer Constructors | Improve this Doc View Source NpgsqlDate(NpgsqlDate) Declaration public NpgsqlDate(NpgsqlDate copyFrom) Parameters Type Name Description NpgsqlDate copyFrom | Improve this Doc View Source NpgsqlDate(DateTime) Declaration public NpgsqlDate(DateTime dateTime) Parameters Type Name Description System.DateTime dateTime | Improve this Doc View Source NpgsqlDate(Int32, Int32, Int32) Declaration public NpgsqlDate(int year, int month, int day) Parameters Type Name Description System.Int32 year System.Int32 month System.Int32 day Fields | Improve this Doc View Source Epoch Represents the date 1970-01-01 Declaration public static readonly NpgsqlDate Epoch Field Value Type Description NpgsqlDate | Improve this Doc View Source Era Represents the date 0001-01-01 Declaration public static readonly NpgsqlDate Era Field Value Type Description NpgsqlDate | Improve this Doc View Source Infinity Declaration public static readonly NpgsqlDate Infinity Field Value Type Description NpgsqlDate | Improve this Doc View Source MaxCalculableValue Declaration public static readonly NpgsqlDate MaxCalculableValue Field Value Type Description NpgsqlDate | Improve this Doc View Source MaxYear Declaration public const int MaxYear = 5874897 Field Value Type Description System.Int32 | Improve this Doc View Source MinCalculableValue Declaration public static readonly NpgsqlDate MinCalculableValue Field Value Type Description NpgsqlDate | Improve this Doc View Source MinYear Declaration public const int MinYear = -4714 Field Value Type Description System.Int32 | Improve this Doc View Source NegativeInfinity Declaration public static readonly NpgsqlDate NegativeInfinity Field Value Type Description NpgsqlDate Properties | Improve this Doc View Source Day Declaration public int Day { get; } Property Value Type Description System.Int32 | Improve this Doc View Source DayOfWeek Declaration public DayOfWeek DayOfWeek { get; } Property Value Type Description System.DayOfWeek | Improve this Doc View Source DayOfYear Declaration public int DayOfYear { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsFinite Declaration public bool IsFinite { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsInfinity Declaration public bool IsInfinity { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsLeapYear Declaration public bool IsLeapYear { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsNegativeInfinity Declaration public bool IsNegativeInfinity { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Month Declaration public int Month { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Now Declaration public static NpgsqlDate Now { get; } Property Value Type Description NpgsqlDate | Improve this Doc View Source Today Declaration public static NpgsqlDate Today { get; } Property Value Type Description NpgsqlDate | Improve this Doc View Source Tomorrow Declaration public static NpgsqlDate Tomorrow { get; } Property Value Type Description NpgsqlDate | Improve this Doc View Source Year Declaration public int Year { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Yesterday Declaration public static NpgsqlDate Yesterday { get; } Property Value Type Description NpgsqlDate Methods | Improve this Doc View Source Add(NpgsqlTimeSpan) Declaration [Pure] public NpgsqlDate Add(NpgsqlTimeSpan interval) Parameters Type Name Description NpgsqlTimeSpan interval Returns Type Description NpgsqlDate | Improve this Doc View Source AddDays(Int32) Declaration [Pure] public NpgsqlDate AddDays(int days) Parameters Type Name Description System.Int32 days Returns Type Description NpgsqlDate | Improve this Doc View Source AddMonths(Int32) Declaration [Pure] public NpgsqlDate AddMonths(int months) Parameters Type Name Description System.Int32 months Returns Type Description NpgsqlDate | Improve this Doc View Source AddYears(Int32) Declaration [Pure] public NpgsqlDate AddYears(int years) Parameters Type Name Description System.Int32 years Returns Type Description NpgsqlDate | Improve this Doc View Source Compare(NpgsqlDate, NpgsqlDate) Declaration public int Compare(NpgsqlDate x, NpgsqlDate y) Parameters Type Name Description NpgsqlDate x NpgsqlDate y Returns Type Description System.Int32 Implements System.Collections.Generic.IComparer<T>.Compare(T, T) | Improve this Doc View Source Compare(Object, Object) Declaration public int Compare(object x, object y) Parameters Type Name Description System.Object x System.Object y Returns Type Description System.Int32 Implements System.Collections.IComparer.Compare(System.Object, System.Object) | Improve this Doc View Source CompareTo(NpgsqlDate) Declaration public int CompareTo(NpgsqlDate other) Parameters Type Name Description NpgsqlDate other Returns Type Description System.Int32 Implements System.IComparable<T>.CompareTo(T) | Improve this Doc View Source CompareTo(Object) Declaration public int CompareTo(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Int32 Implements System.IComparable.CompareTo(System.Object) | Improve this Doc View Source Equals(NpgsqlDate) Declaration public bool Equals(NpgsqlDate other) Parameters Type Name Description NpgsqlDate other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Parse(String) Declaration public static NpgsqlDate Parse(string str) Parameters Type Name Description System.String str Returns Type Description NpgsqlDate | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() | Improve this Doc View Source TryParse(String, out NpgsqlDate) Declaration public static bool TryParse(string str, out NpgsqlDate date) Parameters Type Name Description System.String str NpgsqlDate date Returns Type Description System.Boolean Operators | Improve this Doc View Source Addition(NpgsqlDate, NpgsqlTimeSpan) Declaration public static NpgsqlDate operator +(NpgsqlDate date, NpgsqlTimeSpan interval) Parameters Type Name Description NpgsqlDate date NpgsqlTimeSpan interval Returns Type Description NpgsqlDate | Improve this Doc View Source Addition(NpgsqlTimeSpan, NpgsqlDate) Declaration public static NpgsqlDate operator +(NpgsqlTimeSpan interval, NpgsqlDate date) Parameters Type Name Description NpgsqlTimeSpan interval NpgsqlDate date Returns Type Description NpgsqlDate | Improve this Doc View Source Equality(NpgsqlDate, NpgsqlDate) Declaration public static bool operator ==(NpgsqlDate x, NpgsqlDate y) Parameters Type Name Description NpgsqlDate x NpgsqlDate y Returns Type Description System.Boolean | Improve this Doc View Source Explicit(NpgsqlDate to DateTime) Declaration public static explicit operator DateTime(NpgsqlDate date) Parameters Type Name Description NpgsqlDate date Returns Type Description System.DateTime | Improve this Doc View Source Explicit(DateTime to NpgsqlDate) Declaration public static explicit operator NpgsqlDate(DateTime date) Parameters Type Name Description System.DateTime date Returns Type Description NpgsqlDate | Improve this Doc View Source GreaterThan(NpgsqlDate, NpgsqlDate) Declaration public static bool operator>(NpgsqlDate x, NpgsqlDate y) Parameters Type Name Description NpgsqlDate x NpgsqlDate y Returns Type Description System.Boolean | Improve this Doc View Source GreaterThanOrEqual(NpgsqlDate, NpgsqlDate) Declaration public static bool operator >=(NpgsqlDate x, NpgsqlDate y) Parameters Type Name Description NpgsqlDate x NpgsqlDate y Returns Type Description System.Boolean | Improve this Doc View Source Inequality(NpgsqlDate, NpgsqlDate) Declaration public static bool operator !=(NpgsqlDate x, NpgsqlDate y) Parameters Type Name Description NpgsqlDate x NpgsqlDate y Returns Type Description System.Boolean | Improve this Doc View Source LessThan(NpgsqlDate, NpgsqlDate) Declaration public static bool operator <(NpgsqlDate x, NpgsqlDate y) Parameters Type Name Description NpgsqlDate x NpgsqlDate y Returns Type Description System.Boolean | Improve this Doc View Source LessThanOrEqual(NpgsqlDate, NpgsqlDate) Declaration public static bool operator <=(NpgsqlDate x, NpgsqlDate y) Parameters Type Name Description NpgsqlDate x NpgsqlDate y Returns Type Description System.Boolean | Improve this Doc View Source Subtraction(NpgsqlDate, NpgsqlDate) Declaration public static NpgsqlTimeSpan operator -(NpgsqlDate dateX, NpgsqlDate dateY) Parameters Type Name Description NpgsqlDate dateX NpgsqlDate dateY Returns Type Description NpgsqlTimeSpan | Improve this Doc View Source Subtraction(NpgsqlDate, NpgsqlTimeSpan) Declaration public static NpgsqlDate operator -(NpgsqlDate date, NpgsqlTimeSpan interval) Parameters Type Name Description NpgsqlDate date NpgsqlTimeSpan interval Returns Type Description NpgsqlDate"
  },
  "api/NpgsqlTypes.NpgsqlDateTime.html": {
    "href": "api/NpgsqlTypes.NpgsqlDateTime.html",
    "title": "Struct NpgsqlDateTime | Npgsql Documentation",
    "keywords": "Struct NpgsqlDateTime A struct similar to .NET DateTime but capable of storing PostgreSQL's timestamp and timestamptz types. DateTime is capable of storing values from year 1 to 9999 at 100-nanosecond precision, while PostgreSQL's timestamps store values from 4713BC to 5874897AD with 1-microsecond precision. Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace :NpgsqlTypes Assembly :Npgsql.dll Syntax [Serializable] public struct NpgsqlDateTime : IEquatable<NpgsqlDateTime>, IComparable<NpgsqlDateTime>, IComparable, IComparer<NpgsqlDateTime>, IComparer Constructors | Improve this Doc View Source NpgsqlDateTime(NpgsqlDate) Declaration public NpgsqlDateTime(NpgsqlDate date) Parameters Type Name Description NpgsqlDate date | Improve this Doc View Source NpgsqlDateTime(NpgsqlDate, TimeSpan, DateTimeKind) Declaration public NpgsqlDateTime(NpgsqlDate date, TimeSpan time, DateTimeKind kind = DateTimeKind.Unspecified) Parameters Type Name Description NpgsqlDate date System.TimeSpan time System.DateTimeKind kind | Improve this Doc View Source NpgsqlDateTime(DateTime) Declaration public NpgsqlDateTime(DateTime dateTime) Parameters Type Name Description System.DateTime dateTime | Improve this Doc View Source NpgsqlDateTime(Int32, Int32, Int32, Int32, Int32, Int32, DateTimeKind) Declaration public NpgsqlDateTime(int year, int month, int day, int hours, int minutes, int seconds, DateTimeKind kind = DateTimeKind.Unspecified) Parameters Type Name Description System.Int32 year System.Int32 month System.Int32 day System.Int32 hours System.Int32 minutes System.Int32 seconds System.DateTimeKind kind | Improve this Doc View Source NpgsqlDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, DateTimeKind) Declaration public NpgsqlDateTime(int year, int month, int day, int hours, int minutes, int seconds, int milliseconds, DateTimeKind kind = DateTimeKind.Unspecified) Parameters Type Name Description System.Int32 year System.Int32 month System.Int32 day System.Int32 hours System.Int32 minutes System.Int32 seconds System.Int32 milliseconds System.DateTimeKind kind | Improve this Doc View Source NpgsqlDateTime(Int64) Declaration public NpgsqlDateTime(long ticks) Parameters Type Name Description System.Int64 ticks | Improve this Doc View Source NpgsqlDateTime(Int64, DateTimeKind) Declaration public NpgsqlDateTime(long ticks, DateTimeKind kind) Parameters Type Name Description System.Int64 ticks System.DateTimeKind kind Fields | Improve this Doc View Source Epoch Declaration public static readonly NpgsqlDateTime Epoch Field Value Type Description NpgsqlDateTime | Improve this Doc View Source Era Declaration public static readonly NpgsqlDateTime Era Field Value Type Description NpgsqlDateTime | Improve this Doc View Source Infinity Declaration public static readonly NpgsqlDateTime Infinity Field Value Type Description NpgsqlDateTime | Improve this Doc View Source NegativeInfinity Declaration public static readonly NpgsqlDateTime NegativeInfinity Field Value Type Description NpgsqlDateTime Properties | Improve this Doc View Source Date Declaration public NpgsqlDate Date { get; } Property Value Type Description NpgsqlDate | Improve this Doc View Source DateTime Cast of an NpgsqlDateTime to a DateTime . Declaration public DateTime DateTime { get; } Property Value Type Description System.DateTime An equivalent DateTime . | Improve this Doc View Source Day Declaration public int Day { get; } Property Value Type Description System.Int32 | Improve this Doc View Source DayOfWeek Declaration public DayOfWeek DayOfWeek { get; } Property Value Type Description System.DayOfWeek | Improve this Doc View Source DayOfYear Declaration public int DayOfYear { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Hour Declaration public int Hour { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsFinite Declaration public bool IsFinite { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsInfinity Declaration public bool IsInfinity { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsLeapYear Declaration public bool IsLeapYear { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsNegativeInfinity Declaration public bool IsNegativeInfinity { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Kind Declaration public DateTimeKind Kind { get; } Property Value Type Description System.DateTimeKind | Improve this Doc View Source Millisecond Declaration public int Millisecond { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Minute Declaration public int Minute { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Month Declaration public int Month { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Now Declaration public static NpgsqlDateTime Now { get; } Property Value Type Description NpgsqlDateTime | Improve this Doc View Source Second Declaration public int Second { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Ticks Declaration public long Ticks { get; } Property Value Type Description System.Int64 | Improve this Doc View Source Time Declaration public TimeSpan Time { get; } Property Value Type Description System.TimeSpan | Improve this Doc View Source Year Declaration public int Year { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Add(NpgsqlTimeSpan) Returns a new NpgsqlDateTime that adds the value of the specified TimeSpan to the value of this instance. Declaration [Pure] public NpgsqlDateTime Add(NpgsqlTimeSpan value) Parameters Type Name Description NpgsqlTimeSpan value A positive or negative time interval. Returns Type Description NpgsqlDateTime An object whose value is the sum of the date and time represented by this instance and the time interval represented by value. | Improve this Doc View Source Add(TimeSpan) Returns a new NpgsqlDateTime that adds the value of the specified NpgsqlTimeSpan to the value of this instance. Declaration [Pure] public NpgsqlDateTime Add(TimeSpan value) Parameters Type Name Description System.TimeSpan value A positive or negative time interval. Returns Type Description NpgsqlDateTime An object whose value is the sum of the date and time represented by this instance and the time interval represented by value. | Improve this Doc View Source AddDays(Double) Returns a new NpgsqlDateTime that adds the specified number of days to the value of this instance. Declaration [Pure] public NpgsqlDateTime AddDays(double value) Parameters Type Name Description System.Double value A number of whole and fractional days. The value parameter can be negative or positive. Returns Type Description NpgsqlDateTime An object whose value is the sum of the date and time represented by this instance and the number of days represented by value. | Improve this Doc View Source AddHours(Double) Returns a new NpgsqlDateTime that adds the specified number of hours to the value of this instance. Declaration [Pure] public NpgsqlDateTime AddHours(double value) Parameters Type Name Description System.Double value A number of whole and fractional hours. The value parameter can be negative or positive. Returns Type Description NpgsqlDateTime An object whose value is the sum of the date and time represented by this instance and the number of hours represented by value. | Improve this Doc View Source AddMilliseconds(Double) Returns a new NpgsqlDateTime that adds the specified number of milliseconds to the value of this instance. Declaration [Pure] public NpgsqlDateTime AddMilliseconds(double value) Parameters Type Name Description System.Double value A number of whole and fractional milliseconds. The value parameter can be negative or positive. Note that this value is rounded to the nearest integer. Returns Type Description NpgsqlDateTime An object whose value is the sum of the date and time represented by this instance and the number of milliseconds represented by value. | Improve this Doc View Source AddMinutes(Double) Returns a new NpgsqlDateTime that adds the specified number of minutes to the value of this instance. Declaration [Pure] public NpgsqlDateTime AddMinutes(double value) Parameters Type Name Description System.Double value A number of whole and fractional minutes. The value parameter can be negative or positive. Returns Type Description NpgsqlDateTime An object whose value is the sum of the date and time represented by this instance and the number of minutes represented by value. | Improve this Doc View Source AddMonths(Int32) Returns a new NpgsqlDateTime that adds the specified number of months to the value of this instance. Declaration [Pure] public NpgsqlDateTime AddMonths(int value) Parameters Type Name Description System.Int32 value A number of months. The months parameter can be negative or positive. Returns Type Description NpgsqlDateTime An object whose value is the sum of the date and time represented by this instance and months. | Improve this Doc View Source AddSeconds(Double) Returns a new NpgsqlDateTime that adds the specified number of minutes to the value of this instance. Declaration [Pure] public NpgsqlDateTime AddSeconds(double value) Parameters Type Name Description System.Double value A number of whole and fractional minutes. The value parameter can be negative or positive. Returns Type Description NpgsqlDateTime An object whose value is the sum of the date and time represented by this instance and the number of minutes represented by value. | Improve this Doc View Source AddTicks(Int64) Returns a new NpgsqlDateTime that adds the specified number of ticks to the value of this instance. Declaration [Pure] public NpgsqlDateTime AddTicks(long value) Parameters Type Name Description System.Int64 value A number of 100-nanosecond ticks. The value parameter can be positive or negative. Returns Type Description NpgsqlDateTime An object whose value is the sum of the date and time represented by this instance and the time represented by value. | Improve this Doc View Source AddYears(Int32) Returns a new NpgsqlDateTime that adds the specified number of years to the value of this instance. Declaration [Pure] public NpgsqlDateTime AddYears(int value) Parameters Type Name Description System.Int32 value A number of years. The value parameter can be negative or positive. Returns Type Description NpgsqlDateTime An object whose value is the sum of the date and time represented by this instance and the number of years represented by value. | Improve this Doc View Source Compare(NpgsqlDateTime, NpgsqlDateTime) Declaration public int Compare(NpgsqlDateTime x, NpgsqlDateTime y) Parameters Type Name Description NpgsqlDateTime x NpgsqlDateTime y Returns Type Description System.Int32 Implements System.Collections.Generic.IComparer<T>.Compare(T, T) | Improve this Doc View Source Compare(Object, Object) Declaration public int Compare(object x, object y) Parameters Type Name Description System.Object x System.Object y Returns Type Description System.Int32 Implements System.Collections.IComparer.Compare(System.Object, System.Object) | Improve this Doc View Source CompareTo(NpgsqlDateTime) Declaration public int CompareTo(NpgsqlDateTime other) Parameters Type Name Description NpgsqlDateTime other Returns Type Description System.Int32 Implements System.IComparable<T>.CompareTo(T) | Improve this Doc View Source CompareTo(Object) Declaration public int CompareTo(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Int32 Implements System.IComparable.CompareTo(System.Object) | Improve this Doc View Source Equals(NpgsqlDateTime) Declaration public bool Equals(NpgsqlDateTime other) Parameters Type Name Description NpgsqlDateTime other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Normalize() Declaration [Pure] public NpgsqlDateTime Normalize() Returns Type Description NpgsqlDateTime | Improve this Doc View Source Parse(String) Declaration public static NpgsqlDateTime Parse(string str) Parameters Type Name Description System.String str Returns Type Description NpgsqlDateTime | Improve this Doc View Source Subtract(NpgsqlDateTime) Declaration [Pure] public NpgsqlTimeSpan Subtract(NpgsqlDateTime timestamp) Parameters Type Name Description NpgsqlDateTime timestamp Returns Type Description NpgsqlTimeSpan | Improve this Doc View Source Subtract(NpgsqlTimeSpan) Declaration [Pure] public NpgsqlDateTime Subtract(NpgsqlTimeSpan interval) Parameters Type Name Description NpgsqlTimeSpan interval Returns Type Description NpgsqlDateTime | Improve this Doc View Source ToLocalTime() Converts the value of the current NpgsqlDateTime object to local time. Declaration public NpgsqlDateTime ToLocalTime() Returns Type Description NpgsqlDateTime Remarks See the MSDN documentation for DateTime.ToLocalTime(). Note: this method only takes into account the time zone's base offset, and does not respect daylight savings. See https://github.com/npgsql/npgsql/pull/684 for more details. | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() | Improve this Doc View Source ToUniversalTime() Converts the value of the current NpgsqlDateTime object to Coordinated Universal Time (UTC). Declaration public NpgsqlDateTime ToUniversalTime() Returns Type Description NpgsqlDateTime Remarks See the MSDN documentation for DateTime.ToUniversalTime(). Note: this method only takes into account the time zone's base offset, and does not respect daylight savings. See https://github.com/npgsql/npgsql/pull/684 for more details. Operators | Improve this Doc View Source Addition(NpgsqlDateTime, NpgsqlTimeSpan) Declaration public static NpgsqlDateTime operator +(NpgsqlDateTime timestamp, NpgsqlTimeSpan interval) Parameters Type Name Description NpgsqlDateTime timestamp NpgsqlTimeSpan interval Returns Type Description NpgsqlDateTime | Improve this Doc View Source Addition(NpgsqlTimeSpan, NpgsqlDateTime) Declaration public static NpgsqlDateTime operator +(NpgsqlTimeSpan interval, NpgsqlDateTime timestamp) Parameters Type Name Description NpgsqlTimeSpan interval NpgsqlDateTime timestamp Returns Type Description NpgsqlDateTime | Improve this Doc View Source Equality(NpgsqlDateTime, NpgsqlDateTime) Declaration public static bool operator ==(NpgsqlDateTime x, NpgsqlDateTime y) Parameters Type Name Description NpgsqlDateTime x NpgsqlDateTime y Returns Type Description System.Boolean | Improve this Doc View Source Explicit(NpgsqlDateTime to DateTime) Explicit cast of an NpgsqlDateTime to a DateTime . Declaration public static explicit operator DateTime(NpgsqlDateTime npgsqlDateTime) Parameters Type Name Description NpgsqlDateTime npgsqlDateTime An NpgsqlDateTime . Returns Type Description System.DateTime An equivalent DateTime . | Improve this Doc View Source GreaterThan(NpgsqlDateTime, NpgsqlDateTime) Declaration public static bool operator>(NpgsqlDateTime x, NpgsqlDateTime y) Parameters Type Name Description NpgsqlDateTime x NpgsqlDateTime y Returns Type Description System.Boolean | Improve this Doc View Source GreaterThanOrEqual(NpgsqlDateTime, NpgsqlDateTime) Declaration public static bool operator >=(NpgsqlDateTime x, NpgsqlDateTime y) Parameters Type Name Description NpgsqlDateTime x NpgsqlDateTime y Returns Type Description System.Boolean | Improve this Doc View Source Implicit(DateTime to NpgsqlDateTime) Implicit cast of a DateTime to an NpgsqlDateTime Declaration public static implicit operator NpgsqlDateTime(DateTime dateTime) Parameters Type Name Description System.DateTime dateTime A DateTime Returns Type Description NpgsqlDateTime An equivalent NpgsqlDateTime . | Improve this Doc View Source Inequality(NpgsqlDateTime, NpgsqlDateTime) Declaration public static bool operator !=(NpgsqlDateTime x, NpgsqlDateTime y) Parameters Type Name Description NpgsqlDateTime x NpgsqlDateTime y Returns Type Description System.Boolean | Improve this Doc View Source LessThan(NpgsqlDateTime, NpgsqlDateTime) Declaration public static bool operator <(NpgsqlDateTime x, NpgsqlDateTime y) Parameters Type Name Description NpgsqlDateTime x NpgsqlDateTime y Returns Type Description System.Boolean | Improve this Doc View Source LessThanOrEqual(NpgsqlDateTime, NpgsqlDateTime) Declaration public static bool operator <=(NpgsqlDateTime x, NpgsqlDateTime y) Parameters Type Name Description NpgsqlDateTime x NpgsqlDateTime y Returns Type Description System.Boolean | Improve this Doc View Source Subtraction(NpgsqlDateTime, NpgsqlDateTime) Declaration public static NpgsqlTimeSpan operator -(NpgsqlDateTime x, NpgsqlDateTime y) Parameters Type Name Description NpgsqlDateTime x NpgsqlDateTime y Returns Type Description NpgsqlTimeSpan | Improve this Doc View Source Subtraction(NpgsqlDateTime, NpgsqlTimeSpan) Declaration public static NpgsqlDateTime operator -(NpgsqlDateTime timestamp, NpgsqlTimeSpan interval) Parameters Type Name Description NpgsqlDateTime timestamp NpgsqlTimeSpan interval Returns Type Description NpgsqlDateTime"
  },
  "efcore/misc.html": {
    "href": "efcore/misc.html",
    "title": "Misc | Npgsql Documentation",
    "keywords": "Misc Setting up PostgreSQL extensions The provider allows you to specify PostgreSQL extensions that should be set up in your database. Simply use HasPostgresExtension in your context's OnModelCreating: protected override void OnModelCreating(ModelBuilder modelBuilder) { modelBuilder.HasPostgresExtension(\"hstore\"); } Optimistic Concurrency and Concurrency Tokens Entity Framework supports the concept of optimistic concurrency - a property on your entity is designated as a concurrency token, and EF detects concurrent modifications by checking whether that token has changed since the entity was read. You can read more about this in the EF docs . Although applications can update concurrency tokens themselves, we frequently rely on the database automatically updating a column on update - a \"last modified\" timestamp, an SQL Server rowversion , etc. Unfortunately PostgreSQL doesn't have such auto-updating columns - but there is one feature that can be used for concurrency token. All PostgreSQL have a set of implicit and hidden system columns , among which xmin holds the ID of the latest updating transaction. Since this value automatically gets updated every time the row is changed, it is ideal for use as a concurrency token. To enable this feature on an entity, insert the following code into your models' OnModelCreating method: modelBuilder.Entity<MyEntity>().ForNpgsqlUseXminAsConcurrencyToken(); Using a database template When creating a new database, PostgreSQL allows specifying another \"template database\" which will be copied as the basis for the new one. This can be useful for including database entities which aren't managed by Entity Framework. You can trigger this by using HasDatabaseTemplate in your context's OnModelCreating : modelBuilder.HasDatabaseTemplate(\"my_template_db\");"
  },
  "efcore/value-generation.html": {
    "href": "efcore/value-generation.html",
    "title": "Value Generation | Npgsql Documentation",
    "keywords": "Value Generation See the general EF Docs on value generation to better understand the concepts described here. Serial (Autoincrement) Columns In PostgreSQL, the standard autoincrement column type is called serial . This isn't really a special type like in some other databases (e.g. SQL Server's IDENTITY), but rather a shorthand for specifying that the column's default value should come from a sequence. See the PostgreSQL docs for more info. When ValueGeneratedOnAdd is specified on a short, int or long property, the Npgsql EF Core provider will automatically map it to a serial column. Note that EF Core will automatically recognize key properties by convention (e.g. a property called Id in your entity) and will implicitly set them to ValueGeneratedOnAdd . Note that there was a significant and breaking change in 1.1. If you have existing migrations generated with 1.0, please read the migration notes . HiLo Autoincrement Generation One disadvantage of database-generated values is that these values must be read back from the database after a row is inserted. If you're saving multiple related entities, this means you must perform multiple roundtrips as the first entity's generated key must be read before writing the second one. One solution to this problem is HiLo value generation: rather than relying on the database to generate each and every value, the application \"allocates\" a range of values, which it can then populate directly on new entities without any additional roundtrips. When the range is exhausted, a new range is allocated. In practical terms, this uses a sequence that increments by some large value (100 by default), allowing the application to insert 100 rows autonomously. To use HiLo, specify ForNpgsqlUseSequenceHiLo on a property in your model's OnModelCreating : modelBuilder.Entity<Blog>().Property(b => b.Id).ForNpgsqlUseSequenceHiLo(); You can also make your model use HiLo everywhere: modelBuilder.ForNpgsqlUseSequenceHiLo(); Guid/UUID Generation By default, if you specify ValueGeneratedOnAdd on a Guid property, a random Guid value will be generated client-side and sent to the database. If you prefer to generate values in the database instead, you can do so by specifying HasDefaultValueSql on your property. Note that PostgreSQL doesn't include any Guid/UUID generation functions, you must add an extension such as uuid-ossp or pgcrypto . This can be done by placing the following code in your model's OnModelCreating : modelBuilder.HasPostgresExtension(\"uuid-ossp\"); modelBuilder .Entity<Blog>() .Property(e => e.SomeGuidProperty) .HasDefaultValueSql(\"uuid_generate_v4()\"); See the PostgreSQL docs on UUID for more details . Computed Columns (On Add or Update) PostgreSQL does not support computed columns."
  },
  "efcore/migration/1.1.html": {
    "href": "efcore/migration/1.1.html",
    "title": "Migrating to 1.1 | Npgsql Documentation",
    "keywords": "Migrating to 1.1 Version 1.1.0-preview1 of the Npgsql Entity Framework Core provider has been released and is available on nuget. This version works with the recently released 1.1.0-preview1 of Entity Framework Core , and contains some new Npgsql features as well. Note that if you're using the command-line tools, you'll have to modify your tools section as described in the EF Core release post: \"tools\": { \"Microsoft.EntityFrameworkCore.Tools.DotNet\": \"1.0.0-preview3-final\" }, New Features Aside from general EF Core features, version 1.1.0 of the Npgsql provider contains the following: Hilo key generation ( #5 ). This can be a much more efficient way to generate autoincrement key values. PostgreSQL array mapping ( #15 ). This allows you to have plain CLR arrays on your entities, and have those arrays mapped to native PostgreSQL array columns . Optimistic concurrency with PostgreSQL's xmin column ( #19 ). Simply specify .UseXminAsConcurrencyToken() on an entity to start using this, see the EF docs for more details . Cleanup of how serial (autoincrement) and generated GUID/UUID columns are managed. Here's the full list of issues . Please report any problems to https://github.com/npgsql/Npgsql.EntityFrameworkCore.PostgreSQL . Upgrading from 1.0.x If you've used 1.0.x without migrations, you can simply upgrade and everything should just work. Unfortunately, if you already have migrations from 1.0.x you'll have to do some manual fixups because of some bad decisions that were previously made. If deleting your old migrations and starting over (e.g. non-production database) is an option, you may wish to do so. The following are instructions for fixing up 1.0.x migrations. First, Npgsql 1.0.x used a problematic method to identify serial (autoincrement) columns in migrations. If you look at your migration code you'll see .Annotation(\"Npgsql:ValueGeneratedOnAdd\", true) on various columns. Unfortunately this annotation is also present on non-serial columns, e.g. columns with default values. This causes various issues and has been replaced in 1.1. However, you'll have to manually remove .Annotation(\"Npgsql:ValueGeneratedOnAdd\", true) , and replace it with .Annotation(\"Npgsql:ValueGenerationStrategy\", NpgsqlValueGenerationStrategy.SerialColumn) but only on columns which should be serial (e.g. not on columns with defaults). If you attempt to run a migration that has the old annotation, Npgsql will throw an exception and refuse to run your migrations. Unfortunately, this change will cause some incorrect changes the first time you add a migration after the upgrade. To avoid this, simply add a dummy migration right after upgrading to 1.1 and then delete the two new files generated for the dummy migration, but keep the changes made to your ModelSnapshot.cs . From this point on everything should be fine. Make sure you have no pending changes to your model before doing this! . Apologies for this problematic upgrade procedure, it should at least keep things clean going forward."
  },
  "ef6/index.html": {
    "href": "ef6/index.html",
    "title": "Entity Framework 6 | Npgsql Documentation",
    "keywords": "Npgsql has an Entity Framework 6 provider. You can use it by installing the EntityFramework6.Npgsql nuget. Guid Support Npgsql EF migrations support uses uuid_generate_v4() function to generate guids. In order to have access to this function, you have to install the extension uuid-ossp through the following command: create extension \"uuid-ossp\"; If you don't have this extension installed, when you run Npgsql migrations you will get the following error message: ERROR: function uuid_generate_v4() does not exist If the database is being created by Npgsql Migrations, you will need to run the create extension command in the template1 database . This way, when the new database is created, the extension will be installed already. Template Database When the Entity Framework 6 provider creates a database, it issues a simple CREATE DATABASE command. In PostgreSQL, this implicitly uses template1 as the template - anything existing in template1 will be copied to your new database. If you wish to change the database used as a template, you can specify the EF Template Database connection string parameter. For more info see the PostgreSQL docs ."
  },
  "index.html": {
    "href": "index.html",
    "title": "Npgsql - .NET Access to PostgreSQL | Npgsql Documentation",
    "keywords": "Npgsql - .NET Access to PostgreSQL About Npgsql is an open source ADO.NET Data Provider for PostgreSQL, it allows programs written in C#, Visual Basic, F# to access the PostgreSQL database server. It is implemented in 100% C# code, is free and is open source. In addition, providers have been written for Entity Framework Core and for Entity Framework 6.x. Getting Help The best way to get help for Npgsql is to post a question to Stack Overflow and tag it with the npsgql tag. If you think you've encountered a bug or want to request a feature, open an issue in the appropriate project's github repository. License Npgsql is licensed under the PostgreSQL License , a liberal OSI-approved open source license. Thanks A special thanks to Rowan Miller, Scott Hanselman and Martin Woodward at Microsoft for generously donating an Azure subscription for Npgsql’s continuous integration platform. Contributors Current active contributors to Npgsql are: Shay Rojansky Emil Lenngren Francisco Figueiredo Jr. Kenji Uno Past contributors to Npgsql: Jon Asher Josh Cooley Federico Di Gregorio Jon Hanna Chris Morgan Dave Page Glen Parker Brar Piening Hiroshi Saito Developer Resources For information on development see this page ."
  },
  "dev/build-server.html": {
    "href": "dev/build-server.html",
    "title": "Build Server Notes | Npgsql Documentation",
    "keywords": "This page describes the steps used to set up the Npgsql build server. If you're upgrading the TeamCity version, see \"Give agent service start/stop permissions\" below. Install all supported versions of the Postgresql backend At the time of writing, this means 9.1, 9.2, 9.3, 9.4, 9.5. They are configured on ports 5491, 5492, 5493, 5494, 5495. For SSPI/GSS tests, you need to set up a user with the same name as the user that will be running the tests (i.e. teamcity_agent). You must also add the following lines at the top of each PG's pg_hba.conf to set up SSPI/GSS for that user: host all teamcity_agent 127.0.0.1/32 sspi include_realm=0 host all teamcity_agent ::1/128 sspi include_realm=0 See this page on SSPI . Install a TeamCity-dedicated Postgresql cluster TeamCity itself requires an SQL database, but we don't want it to run in the same environment as that used for the unit tests. So choosing the latest stable Postgresql version (9.6 at time of writing), we create a new Postgresql cluster: initdb -U postgres -W c:\\dev\\TeamcityPostgresData Next we set up a Windows service that starts up the new cluster: pg_ctl register -N postgresql-9.6-teamcity -U teamcity -P <password> -D c:\\dev\\TeamcityPostgresData Finally, create a a user and database and point TeamCity to it. Install .NET SDKs for all supported .NET versions .NET 4.0 (Windows 7 SDK): http://www.microsoft.com/en-us/download/details.aspx?id=8279 .NET 4.5 (Windows 8 SDK): http://msdn.microsoft.com/en-us/windows/hardware/hh852363.aspx .NET 4.5.1 (Windows 8.1 SDK): http://msdn.microsoft.com/en-us/windows/hardware/bg162891.aspx While installing the SDK for .NET 4.0, I had this problem: http://support.microsoft.com/kb/2717426 Give agent service start/stop permissions When upgrading TeamCity, the agent needs to be able to stop and start the Windows service. This is how you can grant a normal user specific permissions on specific services: Download and install subinacl from http://www.microsoft.com/en-us/download/details.aspx?id=23510 cd C:\\Program Files (x86)\\Windows Resource Kits\\Tools\\ subinacl /service TCBuildAgent /grant=teamcity_agent=TO Update build status back in github Download the plugin from https://github.com/jonnyzzz/TeamCity.GitHub , get the ZIP Drop the ZIP in the TeamCity content dir's plugins subdir Add the Build Feature \"Report change status to GitHub\". Configure everything appropriately, and be sure the user you set up has push access to the repository! Install assorted dev utilities GitVersion (with Chocolatey) WiX toolset (v3.10.1 at time of writing) Install WiX WiX 3.10 has a dependency on .NET Framework 3.5, but there's some issue blocking its installation on Windows Server 2012 R2 (at least on Azure). A good workaround is to simply install via Powershell ( Add-WindowsFeature NET-Framework-Core ), see https://msdn.microsoft.com/en-us/library/dn169001(v=nav.70).aspx#InstallNET35 . Note that ICE validation is disabled because apparently it requires an interactive account or admin privileges, which doesn't work in continuous integration."
  },
  "dev/index.html": {
    "href": "dev/index.html",
    "title": "Tests | Npgsql Documentation",
    "keywords": "Tests We maintain a large regression test suite, if you're planning to submit code, please provide a test that reproduces the bug or tests your new feature. See this page for information on the Npgsql test suite. Build Server We have a TeamCity build server running continuous integration builds on commits pushed to our github repository. The Npgsql testsuite is executed over all officially supported PostgreSQL versions to catch errors as early as possible. CI NuGet packages are automatically pushed to our unstable feed at MyGet . For some information about the build server setup, see this page . Thanks to Dave Page at PostgreSQL for donating a VM for this! Release Checklist These are the steps needed to publish release 3.0.6: Merge --no-ff hotfix/3.0.6 into master Tag master with v3.0.6 Push both master and v3.0.6 to Github Wait for the build to complete In TeamCity, go to the artifacts for the build and download them all as a single ZIP Nuget push the packages Write release notes on npgsql.org, publish Create release on github, pointing to npgsql.org Upload MSI to the github release Delete hotfix/3.0.6 both locally and on github Create new branch hotfix/3.0.7 off of master, push to github Close the Github 3.0.6 milestone, create new 3.0.7 milestone Twitter Other stuff Emil compiled a list of PostgreSQL types and their wire representations ."
  },
  "dev/tests.html": {
    "href": "dev/tests.html",
    "title": "Tests | Npgsql Documentation",
    "keywords": "Overview Npgsql comes with an extensive test suite to make sure no regressions occur. All tests are run on our build server on all supported .NET versions (including a recent version of mono) and all supported Postgresql backends. There is also a growing suite of speed tests to be able to measure performance. These tests are currently marked [Explicit] and aren't executed automatically. Simple setup The Npgsql test suite requires a PostgreSQL backend to test against. Simply use the latest version of Postgresql on your dev machine on the default port (5432). By default, all tests will be run using user npgsql_tests , and password npgsql_tests . Npgsql will automatically create a database called npgsql_tests and run its tests against this. To set this up, connect to PostgreSQL as the admin user as follows: psql -h localhost -U postgresql <enter the admin password> create user npgsql_tests password 'npgsql_tests' superuser; And you're done. Superuser access is needed for some tests, e.g. loading the hstore extension, creatig and dropping test databases in the Entity Framework tests..."
  },
  "dev/types.html": {
    "href": "dev/types.html",
    "title": "PostgreSQL Types | Npgsql Documentation",
    "keywords": "Overview The following are notes by Emil Lenngren on PostgreSQL wire representation of types: bool: text: t or f binary: a byte: 1 or 0 bytea: text: either \\x followed by hex-characters (lowercase by default), or plain characters, where non-printable characters (between 0x20 and 0x7e, inclusive) are written as \\nnn (octal) and \\ is written as \\\\ binary: the bytes as they are char: This type holds a single char/byte. (Not to be confused with bpchar (blank-padded char) which is PostgreSQL's alias to the SQL standard's char). The char may be the null-character text: the char as a byte, encoding seems to be ignored binary: the char as a byte name: A null-padded string of NAMEDATALEN (currently 64) bytes (the last byte must be a null-character). Used in pg catalog. text: the name as a string binary: the name as a string int2/int4/int8: text: text representation in base 10 binary: binary version of the integer int2vector: non-null elements, 0-indexed, 1-dim text: 1 2 3 4 binary: same as int2[] oidvector: non-null elements, 0-indexed, 1-dim text: 1 2 3 4 binary: same as oid[] regproc: internally just an OID (UInt32) text: -, name of procedure, or numeric if not found binary: only the OID in binary regprocedure/regoper/regoperator/regclass/regconfig/regdictionary: similar to regproc text: text: the string as it is binary: the string as it is oid: A 32-bit unsigned integer used for internal object identification. text: the text-representation of this integer in base 10 binary: the UInt32 tid: tuple id Internally a tuple of a BlockNumber (UInt32) and an OffsetNumber (UInt16) text: (blockNumber,offsetNumber) binary: the block number in binary followed by offset number in binary xid: transaction id Internally just a TransactionId (UInt32) text: the number binary: the number in binary cid: command id Internally just a CommandId (UInt32) text: the number binary: the number in binary json: json text: the json an text binary: the json as text jsonb: json internally stored in an efficient binary format text: the json as text binary: An Int32 (version number, currently 1), followed by data (currently just json as text) xml: Xml. It is probably most efficient to use the text format, especially when receiving from client. text: the xml as text (when sent from the server: encoding removed, when receiving: assuming database encoding) binary: the xml as text (when sent from the server: in the client's specified encoding, when receiving: figures out itself) pg_node_tree: used as type for the column typdefaultbin in pg_type does not accept input text: text binary: text smgr: storage manager can only have the value \"magnetic disk\" text: magnetic disk binary: not available point: A tuple of two float8 text: (x,y) The floats are interpreted with the C strtod function. The floats are written with the snprintf function, with %.*g format. NaN/-Inf/+Inf can be written, but not interpretability depends on platform. The extra_float_digits setting is honored. For linux, NaN, [+-]Infinity, [+-]Inf works, but not on Windows. Windows also have other output syntax for these special numbers. (1.#QNAN for example) binary: the two floats lseg: A tuple of two points text: [(x1,y1),(x2,y2)] see point for details binary: the four floats in the order x1, y1, x2, y2 path: A boolean whether the path is opened or closed + a vector of points. text: [(x1,y1),...] for open path and ((x1,y1),...) for closed paths. See point for details. binary: first a byte indicating open (0) or close (1), then the number of points (Int32), then a vector of points box: A tuple of two points. The coordinates will be reordered so that the first is the upper right and the second is the lower left. text: (x1,y1),(x2,y2) see point for details binary: the four floats in the order x1, y1, x2, y2 (doesn't really matter since they will be reordered) polygon: Same as path but with two differences: is always closed and internally stores the bounding box. text: same as closed path binary: the number of points (Int32), then a vector of points line (version 9.4): Ax + By + C = 0. Stored with three float8. Constraint: A and B must not both be zero (only checked on text input, not binary). text: {A,B,C} see point for details about the string representation of floats. Can also use the same input format as a path with two different points, representing the line between those. binary: the three floats circle: <(x,y),r> (center point and radius), stored with three float8. text: <(x,y),r> see point for details about the string representation of floats. binary: the three floats x, y, r in that order float4/float8: text: (leading/trailing whitespace is skipped) interpreted with the C strtod function, but since it has problems with NaN, [+-]Infinity, [+-]Inf, those strings are identified (case-insensitively) separately. when outputting: NaN, [+-]Infinity is treated separately, otherwise the string is printed with snprintf %.*g and the extra_float_digits setting is honored. binary: the float abstime: A unix timestamp stored as a 32-bit signed integer with seconds-precision (seconds since 1970-01-01 00:00:00), in UTC Has three special values: Invalid (2^31-1), infinity (2^31-3), -infinity (-2^31) text: same format as timestamptz, or \"invalid\", \"infinity\", \"-infinity\" binary: Int32 reltime: A time interval with seconds-precision (stored as an 32-bit signed integer) text: same as interval binary: Int32 tinterval: Consists of a status (Int32) and two abstimes. Status is valid (1) iff both abstimes are valid, else 0. Note that the docs incorrectly states that ' is used as quote instead of \" text: [\"<abstime>\" \"<abstime>\"] binary: Int32 (status), Int32 (abstime 1), Int32 (abstime 2) unknown: text: text binary: text money: A 64-bit signed integer. For example, $123.45 is stored as the integer 12345. Number of fraction digits is locale-dependent. text: a locale-depedent string binary: the raw 64-bit integer macaddr: 6 bytes text: the 6 bytes in hex (always two characters per byte) separated by : binary: the 6 bytes appearing in the same order as when written in text inet/cidr: Struct of Family (byte: ipv4=2, ipv6=3), Netmask (byte with number of bits in the netmask), Ipaddr bytes (16) Text: The IP-address in text format and /netmask. /netmask is omitted in inet if the netmask is the whole address. Binary: family byte, netmask byte, byte (cidr=1, inet=0), number of bytes in address, bytes of the address aclitem: Access list item used in pg_class Text: Something like postgres=arwdDxt/postgres Binary: not available bpchar: Blank-padded char. The type modifier is used to blank-pad the input. text: text binary: text varchar: Variable-length char. The type modifier is used to check the input's length. text: text binary: text date: A signed 32-bit integer of a date. 0 = 2000-01-01. Infinity: INT_MAX, -Infinity: INT_MIN Text: Date only using the specified date style Binary: Int32 time: A signed 64-bit integer representing microseconds from 00:00:00.000000. (Legacy uses 64-bit float). Negative values are not allowed. Max value is 24:00:00.000000. text: hh:mm:ss or hh:mm:ss.ffffff where the fraction part is between 1 and 6 digits (trailing zeros are not written) binary: the 64-bit integer timetz: A struct of Time: A signed 64-bit integer representing microseconds from 00:00:00.000000. (Legacy uses 64-bit float). Negative values are not allowed. Max value is 24:00:00.000000. Zone: A signed 32-bit integer representing the zone (in seconds). Note that the sign is inverted. So GMT+1h is stored as -1h. text: hh:mm:ss or hh:mm:ss.ffffff where the fraction part is between 1 and 6 digits (trailing zeros are not written) binary: the 64-bit integer followed by the 32-bit integer timestamp: A signed 64-bit integer representing microseconds from 2000-01-01 00:00:00.000000 Infinity is LONG_MAX and -Infinity is LONG_MIN (Infinity would be 294277-01-09 04:00:54.775807) Earliest possible timestamp is 4714-11-24 00:00:00 BC. Even earlier would be possible, but due to internal calculations those are forbidden. text: dependent on date style binary: the 64-bit integer timestamptz: A signed 64-bit integer representing microseconds from 2000-01-01 00:00:00.000000 UTC. (Time zone is not stored). Infinity is LONG_MAX and -Infinity is LONG_MIN text: first converted to the time zone in the db settings, then printed according to the date style binary: the 64-bit integer interval: A struct of Time (Int64): all time units other than days, months and years (microseconds) Day (Int32): days, after time for alignment Month (Int32): months and years, after time for alignment text: Style dependent, but for example: \"-11 mons +15435 days -11111111:53:00\" binary: all fields in the struct bit/varbit: First a signed 32-bit integer containing the number of bits (negative length not allowed). Then all the bits in big end first. So a varbit of length 1 has the first (and only) byte set to either 0x80 or 0x00. Last byte is assumed (and is automatically zero-padded in recv) to be zero-padded. text: when sending from backend: all the bits, written with 1s and 0s. when receiving from client: (optionally b or B followed by) all the bits as 1s and 0s, or a x or X followed by hexadecimal digits (upper- or lowercase), big endian first. binary: the 32-bit length followed by the bytes containing the bits numeric: A variable-length numeric value, can be negative. text: NaN or first - if it is negative, then the digits with . as decimal separator binary: first a header of 4 16-bit signed integers: number of digits in the digits array that follows (can be 0, but not negative), weight of the first digit (10000^weight), can be both negative, positive or 0, sign: negative=0x4000, positive=0x0000, NaN=0xC000 dscale: number of digits (in base 10) to print after the decimal separator then the array of digits: The digits are stored in base 10000, where each digit is a 16-bit integer. Trailing zeros are not stored in this array, to save space. The digits are stored such that, if written as base 10000, the decimal separator can be inserted between two digits in base 10000, i.e. when this is to be printed in base 10, only the first digit in base 10000 can (possibly) be printed with less than 4 characters. Note that this does not apply for the digits after the decimal separator; the digits should be printed out in chunks of 4 characters and then truncated with the given dscale. refcursor: uses the same routines as text record: Describes a tuple. Is also the \"base class\" for composite types (i.e. it uses the same i/o functions). text: ( followed by a list of comma-separated text-encoded values followed by ). Empty element means null. Quoted with \" and \" if necessary. \" is escaped with \"\" and \\ is escaped with \\\\ (this differs from arrays where \" is escaped with \\\"). Must be quoted if it is an empty string or contains one of \"\\,() or a space. binary: First a 32-bit integer with the number of columns, then for each column: An OID indicating the type of the column The length of the column (32-bit integer), or -1 if null The column data encoded as binary cstring: text/binary: all characters are sent without the trailing null-character void: Used for example as return value in SELECT * FROM func_returning_void() text: an empty string binary: zero bytes uuid: A 16-byte uuid. text: group of 8, 4, 4, 4, 12 hexadecimal lower-case characters, separated by -. The first byte is written first. It is allowed to surround it with {}. binary: the 16 bytes txid_snapshot: (txid is a UInt64) A struct of UInt32 nxip (size of the xip array) txid xmin (no values in xip is smaller than this) txid xmax (no values in xip is larger than or equal this) txid[] xip (is ordered in ascending order) text: xmin:xmax:1,2,3,4 binary: all fields in the structure tsvector: Used for text searching. Example of tsvector: 'a':1,6,10 'on':5 'and':8 'ate':9A 'cat':3 'fat':2,11 'mat':7 'rat':12 'sat':4 Max length for each lexeme string is 2046 bytes (excluding the trailing null-char) The words are sorted when parsed, and only written once. Positions are also sorted and only written once. For some reason, the unique check does not seem to be made for binary input, only text input... text: As seen above. ' is escaped with '' and \\ is escaped with \\\\. binary: UInt32 number of lexemes for each lexeme: lexeme text in client encoding, null-terminated UInt16 number of positions for each position: UInt16 WordEntryPos, where the most significant 2 bits is weight, and the 14 least significant bits is pos (can't be 0). Weights 3,2,1,0 represent A,B,C,D tsquery: A tree with operands and operators (&, |, !). Operands are strings, with optional weight (bitmask of ABCD) and prefix search (yes/no, written with *). text: the tree written in infix notation. Example: ( 'abc':*B | 'def' ) & !'ghi' binary: the tree written in prefix notation: First the number of tokens (a token is an operand or an operator). For each token: UInt8 type (1 = val, 2 = oper) UInt8 weight + UInt8 prefix (1/0) + null-terminated string, or UInt8 oper (1 = not, 2 = and, 3 = or) enum: Simple text gtsvector: GiST for tsvector. Probably internal type. int4range/numrange/tsrange/tstzrange/daterange/int8range and user-defined range types: /* A range's flags byte contains these bits: */ #define RANGE_EMPTY 0x01 /* range is empty */ #define RANGE_LB_INC 0x02 /* lower bound is inclusive */ #define RANGE_UB_INC 0x04 /* upper bound is inclusive */ #define RANGE_LB_INF 0x08 /* lower bound is -infinity */ #define RANGE_UB_INF 0x10 /* upper bound is +infinity */ #define RANGE_LB_NULL 0x20 /* lower bound is null (NOT USED) */ #define RANGE_UB_NULL 0x40 /* upper bound is null (NOT USED) */ #define RANGE_CONTAIN_EMPTY 0x80/* marks a GiST internal-page entry whose * subtree contains some empty ranges */ A range has no lower bound if any of RANGE_EMPTY, RANGE_LB_INF (or RANGE_LB_NULL, not used anymore) is set. The same applies for upper bounds. text: A range with RANGE_EMPTY is just written as the string \"empty\". Inclusive bounds are written with [ and ], else ( and ) is used. The two values are comma-separated. Missing bounds are written as an empty string (without quotes). Each value is quoted with \" if necessary. Quotes are necessary if the string is either the empty string or contains \"\\,()[] or spaces. \" is escaped with \"\" and \\ is escaped with \\\\. Example: [18,21] binary: First the flag byte. Then, if has lower bound: 32-bit length + binary-encoded data. Then, if has upper bound: 32-bit length + binary-encoded data. hstore: Key/value-store. Both keys and values are strings. text: Comma-space separated string, where each item is written as \"key\"=>\"value\" or \"key\"=>NULL. \" and \\ are escaped as \\\" and \\\\. Example: \"a\"=>\"b\", \"c\"=>NULL, \"d\"=>\"q\" binary: Int32 count for each item: Int32 keylen string of the key (not null-terminated) Int32 length of item (or -1 if null) the item as a string ghstore: internal type for indexing hstore domain types: mapped types used in information_schema: cardinal_number: int4 (must be nonnegative or null) character_data: varchar sql_identifier: varchar time_stamp: timestamptz yes_or_no: varchar(3) (must be \"YES\" or \"NO\" or null) intnotnull: when an int4 is cast to this type, it is checked that the int4 is not null, but it still returns an int4 and not intnotnull..."
  },
  "api/toc.html": {
    "href": "api/toc.html",
    "title": "Table of Content",
    "keywords": ""
  },
  "doc/toc.html": {
    "href": "doc/toc.html",
    "title": "Table of Content",
    "keywords": ""
  },
  "efcore/toc.html": {
    "href": "efcore/toc.html",
    "title": "Table of Content",
    "keywords": ""
  },
  "ef6/toc.html": {
    "href": "ef6/toc.html",
    "title": "Table of Content",
    "keywords": ""
  },
  "toc.html": {
    "href": "toc.html",
    "title": "Table of Content",
    "keywords": ""
  },
  "dev/toc.html": {
    "href": "dev/toc.html",
    "title": "Table of Content",
    "keywords": ""
  },
  "api/Npgsql.NameTranslation.NpgsqlNullNameTranslator.html": {
    "href": "api/Npgsql.NameTranslation.NpgsqlNullNameTranslator.html",
    "title": "Class NpgsqlNullNameTranslator | Npgsql Documentation",
    "keywords": "Class NpgsqlNullNameTranslator A name translator which preserves CLR names (e.g. SomeClass) when mapping names to the database. Inheritance System.Object NpgsqlNullNameTranslator Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Npgsql.NameTranslation Assembly :Npgsql.dll Syntax public class NpgsqlNullNameTranslator : INpgsqlNameTranslator Methods | Improve this Doc View Source TranslateMemberName(String) Given a CLR member name (property or field), translates its name to a database type name. Declaration public string TranslateMemberName(string clrName) Parameters Type Name Description System.String clrName Returns Type Description System.String Implements INpgsqlNameTranslator.TranslateMemberName(String) | Improve this Doc View Source TranslateTypeName(String) Given a CLR type name (e.g class, struct, enum), translates its name to a database type name. Declaration public string TranslateTypeName(string clrName) Parameters Type Name Description System.String clrName Returns Type Description System.String Implements INpgsqlNameTranslator.TranslateTypeName(String)"
  },
  "api/Npgsql.NameTranslation.html": {
    "href": "api/Npgsql.NameTranslation.html",
    "title": "Namespace Npgsql.NameTranslation | Npgsql Documentation",
    "keywords": "Namespace Npgsql.NameTranslation Classes NpgsqlNullNameTranslator A name translator which preserves CLR names (e.g. SomeClass) when mapping names to the database."
  },
  "api/Npgsql.NoticeEventHandler.html": {
    "href": "api/Npgsql.NoticeEventHandler.html",
    "title": "Delegate NoticeEventHandler | Npgsql Documentation",
    "keywords": "Delegate NoticeEventHandler Represents the method that handles the Notification events. Namespace :Npgsql Assembly :Npgsql.dll Syntax public delegate void NoticeEventHandler(object sender, NpgsqlNoticeEventArgs e); Parameters Type Name Description System.Object sender The source of the event. NpgsqlNoticeEventArgs e A NpgsqlNoticeEventArgs that contains the event data."
  },
  "api/Npgsql.NotificationEventHandler.html": {
    "href": "api/Npgsql.NotificationEventHandler.html",
    "title": "Delegate NotificationEventHandler | Npgsql Documentation",
    "keywords": "Delegate NotificationEventHandler Represents the method that handles the Notification events. Namespace :Npgsql Assembly :Npgsql.dll Syntax public delegate void NotificationEventHandler(object sender, NpgsqlNotificationEventArgs e); Parameters Type Name Description System.Object sender The source of the event. NpgsqlNotificationEventArgs e A NpgsqlNotificationEventArgs that contains the event data."
  },
  "api/Npgsql.NpgsqlBinaryExporter.html": {
    "href": "api/Npgsql.NpgsqlBinaryExporter.html",
    "title": "Class NpgsqlBinaryExporter | Npgsql Documentation",
    "keywords": "Class NpgsqlBinaryExporter Provides an API for a binary COPY TO operation, a high-performance data export mechanism from a PostgreSQL table. Initiated by BeginBinaryExport(String) Inheritance System.Object NpgsqlBinaryExporter Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Npgsql Assembly :Npgsql.dll Syntax public class NpgsqlBinaryExporter : ICancelable, IDisposable Properties | Improve this Doc View Source IsNull Returns whether the current column is null. Declaration public bool IsNull { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Cancel() Cancels an ongoing export. Declaration public void Cancel() | Improve this Doc View Source Dispose() Completes that binary export and sets the connection back to idle state Declaration public void Dispose() Implements System.IDisposable.Dispose() | Improve this Doc View Source Read<T>() Reads the current column, returns its value and moves ahead to the next column. If the column is null an exception is thrown. Declaration public T Read<T>() Returns Type Description T The value of the column Type Parameters Name Description T The type of the column to be read. This must correspond to the actual type or data corruption will occur. If in doubt, use Read<T>(NpgsqlDbType) to manually specify the type. | Improve this Doc View Source Read<T>(NpgsqlDbType) Reads the current column, returns its value according to type and moves ahead to the next column. If the column is null an exception is thrown. Declaration public T Read<T>(NpgsqlDbType type) Parameters Type Name Description NpgsqlDbType type In some cases T isn't enough to infer the data type coming in from the database. This parameter and be used to unambiguously specify the type. An example is the JSONB type, for which T will be a simple string but for which type must be specified as Jsonb . Returns Type Description T The value of the column Type Parameters Name Description T The .NET type of the column to be read. | Improve this Doc View Source Skip() Skips the current column without interpreting its value. Declaration public void Skip() | Improve this Doc View Source StartRow() Starts reading a single row, must be invoked before reading any columns. Declaration public int StartRow() Returns Type Description System.Int32 The number of columns in the row. -1 if there are no further rows. Note: This will currently be the same value for all rows, but this may change in the future."
  },
  "api/Npgsql.NpgsqlBinaryImporter.html": {
    "href": "api/Npgsql.NpgsqlBinaryImporter.html",
    "title": "Class NpgsqlBinaryImporter | Npgsql Documentation",
    "keywords": "Class NpgsqlBinaryImporter Provides an API for a binary COPY FROM operation, a high-performance data import mechanism to a PostgreSQL table. Initiated by BeginBinaryImport(String) Inheritance System.Object NpgsqlBinaryImporter Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Npgsql Assembly :Npgsql.dll Syntax public class NpgsqlBinaryImporter : ICancelable, IDisposable Remarks See http://www.postgresql.org/docs/current/static/sql-copy.html . Methods | Improve this Doc View Source Cancel() Cancels and terminates an ongoing import. Any data already written will be discarded. Declaration public void Cancel() | Improve this Doc View Source Close() Completes the import process and signals to the database to write everything. Declaration public void Close() | Improve this Doc View Source Dispose() Completes that binary import and sets the connection back to idle state Declaration public void Dispose() Implements System.IDisposable.Dispose() | Improve this Doc View Source StartRow() Starts writing a single row, must be invoked before writing any columns. Declaration public void StartRow() | Improve this Doc View Source Write<T>(T) Writes a single column in the current row. Declaration public void Write<T>(T value) Parameters Type Name Description T value The value to be written Type Parameters Name Description T The type of the column to be written. This must correspond to the actual type or data corruption will occur. If in doubt, use Write<T>(T, NpgsqlDbType) to manually specify the type. | Improve this Doc View Source Write<T>(T, NpgsqlDbType) Writes a single column in the current row as type type . Declaration public void Write<T>(T value, NpgsqlDbType type) Parameters Type Name Description T value The value to be written NpgsqlDbType type In some cases T isn't enough to infer the data type to be written to the database. This parameter and be used to unambiguously specify the type. An example is the JSONB type, for which T will be a simple string but for which type must be specified as Jsonb . Type Parameters Name Description T The .NET type of the column to be written. | Improve this Doc View Source WriteNull() Writes a single null column value. Declaration public void WriteNull() | Improve this Doc View Source WriteRow(Object[]) Writes an entire row of columns. Equivalent to calling StartRow() , followed by multiple Write<T>(T) on each value. Declaration public void WriteRow(params object[] values) Parameters Type Name Description System.Object [] values An array of column values to be written as a single row"
  },
  "api/Npgsql.NpgsqlCommand.html": {
    "href": "api/Npgsql.NpgsqlCommand.html",
    "title": "Class NpgsqlCommand | Npgsql Documentation",
    "keywords": "Class NpgsqlCommand Represents a SQL statement or function (stored procedure) to execute against a PostgreSQL database. This class cannot be inherited. Inheritance System.Object System.MarshalByRefObject System.ComponentModel.Component System.Data.Common.DbCommand NpgsqlCommand Inherited Members System.Data.Common.DbCommand.System.Data.IDbCommand.CreateParameter() System.Data.Common.DbCommand.System.Data.IDbCommand.ExecuteReader() System.Data.Common.DbCommand.System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior) System.Data.Common.DbCommand.ExecuteNonQueryAsync() System.Data.Common.DbCommand.ExecuteReaderAsync() System.Data.Common.DbCommand.ExecuteReaderAsync(System.Threading.CancellationToken) System.Data.Common.DbCommand.ExecuteReaderAsync(System.Data.CommandBehavior) System.Data.Common.DbCommand.ExecuteReaderAsync(System.Data.CommandBehavior, System.Threading.CancellationToken) System.Data.Common.DbCommand.ExecuteScalarAsync() System.Data.Common.DbCommand.System.Data.IDbCommand.Connection System.Data.Common.DbCommand.System.Data.IDbCommand.Parameters System.Data.Common.DbCommand.System.Data.IDbCommand.Transaction System.ComponentModel.Component.Dispose() System.ComponentModel.Component.GetService(System.Type) System.ComponentModel.Component.ToString() System.ComponentModel.Component.CanRaiseEvents System.ComponentModel.Component.Events System.ComponentModel.Component.Site System.ComponentModel.Component.Container System.ComponentModel.Component.DesignMode System.ComponentModel.Component.Disposed System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.CreateObjRef(System.Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Npgsql Assembly :Npgsql.dll Syntax public sealed class NpgsqlCommand : DbCommand, IComponent, IDbCommand, IDisposable, ICloneable Constructors | Improve this Doc View Source NpgsqlCommand() Initializes a new instance of the NpgsqlCommand class. Declaration public NpgsqlCommand() | Improve this Doc View Source NpgsqlCommand(String) Initializes a new instance of the NpgsqlCommand class with the text of the query. Declaration public NpgsqlCommand(string cmdText) Parameters Type Name Description System.String cmdText The text of the query. | Improve this Doc View Source NpgsqlCommand(String, NpgsqlConnection) Initializes a new instance of the NpgsqlCommand class with the text of the query and a NpgsqlConnection . Declaration public NpgsqlCommand(string cmdText, NpgsqlConnection connection) Parameters Type Name Description System.String cmdText The text of the query. NpgsqlConnection connection A NpgsqlConnection that represents the connection to a PostgreSQL server. | Improve this Doc View Source NpgsqlCommand(String, NpgsqlConnection, NpgsqlTransaction) Initializes a new instance of the NpgsqlCommand class with the text of the query, a NpgsqlConnection , and the NpgsqlTransaction . Declaration public NpgsqlCommand(string cmdText, NpgsqlConnection connection, NpgsqlTransaction transaction) Parameters Type Name Description System.String cmdText The text of the query. NpgsqlConnection connection A NpgsqlConnection that represents the connection to a PostgreSQL server. NpgsqlTransaction transaction The NpgsqlTransaction in which the NpgsqlCommand executes. Properties | Improve this Doc View Source AllResultTypesAreUnknown Marks all of the query's result columns as either known or unknown. Unknown results column are requested them from PostgreSQL in text format, and Npgsql makes no attempt to parse them. They will be accessible as strings only. Declaration public bool AllResultTypesAreUnknown { set; } Property Value Type Description System.Boolean | Improve this Doc View Source CommandText Gets or sets the SQL statement or function (stored procedure) to execute at the data source. Declaration public override string CommandText { get; set; } Property Value Type Description System.String The Transact-SQL statement or stored procedure to execute. The default is an empty string. Overrides System.Data.Common.DbCommand.CommandText | Improve this Doc View Source CommandTimeout Gets or sets the wait time before terminating the attempt to execute a command and generating an error. Declaration public override int CommandTimeout { get; set; } Property Value Type Description System.Int32 The time (in seconds) to wait for the command to execute. The default value is 30 seconds. Overrides System.Data.Common.DbCommand.CommandTimeout | Improve this Doc View Source CommandType Gets or sets a value indicating how the CommandText property is to be interpreted. Declaration public override CommandType CommandType { get; set; } Property Value Type Description System.Data.CommandType One of the System.Data.CommandType values. The default is System.Data.CommandType . Overrides System.Data.Common.DbCommand.CommandType | Improve this Doc View Source Connection Gets or sets the NpgsqlConnection used by this instance of the NpgsqlCommand . Declaration public NpgsqlConnection Connection { get; set; } Property Value Type Description NpgsqlConnection The connection to a data source. The default value is a null reference. | Improve this Doc View Source DbConnection DB connection. Declaration protected override DbConnection DbConnection { get; set; } Property Value Type Description System.Data.Common.DbConnection Overrides System.Data.Common.DbCommand.DbConnection | Improve this Doc View Source DbParameterCollection DB parameter collection. Declaration protected override DbParameterCollection DbParameterCollection { get; } Property Value Type Description System.Data.Common.DbParameterCollection Overrides System.Data.Common.DbCommand.DbParameterCollection | Improve this Doc View Source DbTransaction DB transaction. Declaration protected override DbTransaction DbTransaction { get; set; } Property Value Type Description System.Data.Common.DbTransaction Overrides System.Data.Common.DbCommand.DbTransaction | Improve this Doc View Source DesignTimeVisible Design time visible. Declaration public override bool DesignTimeVisible { get; set; } Property Value Type Description System.Boolean Overrides System.Data.Common.DbCommand.DesignTimeVisible | Improve this Doc View Source IsPrepared Returns whether this query will execute as a prepared (compiled) query. Declaration public bool IsPrepared { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Parameters Gets the NpgsqlParameterCollection . Declaration public NpgsqlParameterCollection Parameters { get; } Property Value Type Description NpgsqlParameterCollection The parameters of the SQL statement or function (stored procedure). The default is an empty collection. | Improve this Doc View Source Statements Returns details about each statement that this command has executed. Is only populated when an Execute* method is called. Declaration public IReadOnlyList<NpgsqlStatement> Statements { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < NpgsqlStatement > | Improve this Doc View Source Transaction Gets or sets the NpgsqlTransaction within which the NpgsqlCommand executes. Declaration public NpgsqlTransaction Transaction { get; set; } Property Value Type Description NpgsqlTransaction The NpgsqlTransaction . The default value is a null reference. | Improve this Doc View Source UnknownResultTypeList Marks the query's result columns as known or unknown, on a column-by-column basis. Unknown results column are requested them from PostgreSQL in text format, and Npgsql makes no attempt to parse them. They will be accessible as strings only. Declaration public bool[] UnknownResultTypeList { set; } Property Value Type Description System.Boolean [] Remarks If the query includes several queries (e.g. SELECT 1; SELECT 2), this will only apply to the first one. The rest of the queries will be fetched and parsed as usual. The array size must correspond exactly to the number of result columns the query returns, or an error will be raised. | Improve this Doc View Source UpdatedRowSource Gets or sets how command results are applied to the DataRow when used by the DbDataAdapter.Update(DataSet) method. Declaration public override UpdateRowSource UpdatedRowSource { get; set; } Property Value Type Description System.Data.UpdateRowSource One of the System.Data.UpdateRowSource values. Overrides System.Data.Common.DbCommand.UpdatedRowSource Methods | Improve this Doc View Source Cancel() Attempts to cancel the execution of a NpgsqlCommand . Declaration public override void Cancel() Overrides System.Data.Common.DbCommand.Cancel() Remarks As per the specs, no exception will be thrown by this method in case of failure | Improve this Doc View Source Clone() Create a new command based on this one. Declaration public NpgsqlCommand Clone() Returns Type Description NpgsqlCommand A new NpgsqlCommand object. | Improve this Doc View Source CreateDbParameter() Creates a new instance of an System.Data.Common.DbParameter object. Declaration protected override DbParameter CreateDbParameter() Returns Type Description System.Data.Common.DbParameter An System.Data.Common.DbParameter object. Overrides System.Data.Common.DbCommand.CreateDbParameter() | Improve this Doc View Source CreateParameter() Creates a new instance of a NpgsqlParameter object. Declaration public NpgsqlParameter CreateParameter() Returns Type Description NpgsqlParameter A NpgsqlParameter object. | Improve this Doc View Source Dispose(Boolean) Releases the resources used by the NpgsqlCommand . Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides System.ComponentModel.Component.Dispose(System.Boolean) | Improve this Doc View Source ExecuteDbDataReader(CommandBehavior) Executes the command text against the connection. Declaration protected override DbDataReader ExecuteDbDataReader(CommandBehavior behavior) Parameters Type Name Description System.Data.CommandBehavior behavior Returns Type Description System.Data.Common.DbDataReader Overrides System.Data.Common.DbCommand.ExecuteDbDataReader(System.Data.CommandBehavior) | Improve this Doc View Source ExecuteDbDataReaderAsync(CommandBehavior, CancellationToken) Executes the command text against the connection. Declaration protected override Task<DbDataReader> ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken) Parameters Type Name Description System.Data.CommandBehavior behavior An instance of System.Data.CommandBehavior . System.Threading.CancellationToken cancellationToken A task representing the operation. Returns Type Description System.Threading.Tasks.Task < System.Data.Common.DbDataReader > Overrides System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior, System.Threading.CancellationToken) | Improve this Doc View Source ExecuteNonQuery() Executes a SQL statement against the connection and returns the number of rows affected. Declaration public override int ExecuteNonQuery() Returns Type Description System.Int32 The number of rows affected if known; -1 otherwise. Overrides System.Data.Common.DbCommand.ExecuteNonQuery() | Improve this Doc View Source ExecuteNonQueryAsync(CancellationToken) Asynchronous version of ExecuteNonQuery() Declaration public override Task<int> ExecuteNonQueryAsync(CancellationToken cancellationToken) Parameters Type Name Description System.Threading.CancellationToken cancellationToken The token to monitor for cancellation requests. Returns Type Description System.Threading.Tasks.Task < System.Int32 > A task representing the asynchronous operation, with the number of rows affected if known; -1 otherwise. Overrides System.Data.Common.DbCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken) | Improve this Doc View Source ExecuteReader() Executes the CommandText against the Connection, and returns an DbDataReader. Declaration public NpgsqlDataReader ExecuteReader() Returns Type Description NpgsqlDataReader A DbDataReader object. Remarks Unlike the ADO.NET method which it replaces, this method returns a Npgsql-specific DataReader. | Improve this Doc View Source ExecuteReader(CommandBehavior) Executes the CommandText against the Connection, and returns an DbDataReader using one of the CommandBehavior values. Declaration public NpgsqlDataReader ExecuteReader(CommandBehavior behavior) Parameters Type Name Description System.Data.CommandBehavior behavior Returns Type Description NpgsqlDataReader A DbDataReader object. Remarks Unlike the ADO.NET method which it replaces, this method returns a Npgsql-specific DataReader. | Improve this Doc View Source ExecuteScalar() Executes the query, and returns the first column of the first row in the result set returned by the query. Extra columns or rows are ignored. Declaration public override object ExecuteScalar() Returns Type Description System.Object The first column of the first row in the result set, or a null reference if the result set is empty. Overrides System.Data.Common.DbCommand.ExecuteScalar() | Improve this Doc View Source ExecuteScalarAsync(CancellationToken) Asynchronous version of ExecuteScalar() Declaration public override Task<object> ExecuteScalarAsync(CancellationToken cancellationToken) Parameters Type Name Description System.Threading.CancellationToken cancellationToken The token to monitor for cancellation requests. Returns Type Description System.Threading.Tasks.Task < System.Object > A task representing the asynchronous operation, with the first column of the first row in the result set, or a null reference if the result set is empty. Overrides System.Data.Common.DbCommand.ExecuteScalarAsync(System.Threading.CancellationToken) | Improve this Doc View Source Prepare() Creates a prepared version of the command on a PostgreSQL server. Declaration public override void Prepare() Overrides System.Data.Common.DbCommand.Prepare() Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Create a new command based on this one. Declaration object ICloneable.Clone() Returns Type Description System.Object A new NpgsqlCommand object. Implements System.ICloneable.Clone()"
  },
  "api/Npgsql.NpgsqlCommandBuilder.html": {
    "href": "api/Npgsql.NpgsqlCommandBuilder.html",
    "title": "Class NpgsqlCommandBuilder | Npgsql Documentation",
    "keywords": "Class NpgsqlCommandBuilder This class is responsible to create database commands for automatic insert, update and delete operations. Inheritance System.Object System.MarshalByRefObject System.ComponentModel.Component System.Data.Common.DbCommandBuilder NpgsqlCommandBuilder Inherited Members System.Data.Common.DbCommandBuilder.GetSchemaTable(System.Data.Common.DbCommand) System.Data.Common.DbCommandBuilder.Dispose(System.Boolean) System.Data.Common.DbCommandBuilder.InitializeCommand(System.Data.Common.DbCommand) System.Data.Common.DbCommandBuilder.RefreshSchema() System.Data.Common.DbCommandBuilder.RowUpdatingHandler(System.Data.Common.RowUpdatingEventArgs) System.Data.Common.DbCommandBuilder.ConflictOption System.Data.Common.DbCommandBuilder.CatalogLocation System.Data.Common.DbCommandBuilder.CatalogSeparator System.Data.Common.DbCommandBuilder.DataAdapter System.Data.Common.DbCommandBuilder.SchemaSeparator System.Data.Common.DbCommandBuilder.SetAllValues System.ComponentModel.Component.Dispose() System.ComponentModel.Component.GetService(System.Type) System.ComponentModel.Component.ToString() System.ComponentModel.Component.CanRaiseEvents System.ComponentModel.Component.Events System.ComponentModel.Component.Site System.ComponentModel.Component.Container System.ComponentModel.Component.DesignMode System.ComponentModel.Component.Disposed System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.CreateObjRef(System.Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Npgsql Assembly :Npgsql.dll Syntax public sealed class NpgsqlCommandBuilder : DbCommandBuilder, IComponent, IDisposable Constructors | Improve this Doc View Source NpgsqlCommandBuilder() Initializes a new instance of the NpgsqlCommandBuilder class. Declaration public NpgsqlCommandBuilder() | Improve this Doc View Source NpgsqlCommandBuilder(NpgsqlDataAdapter) Initializes a new instance of the NpgsqlCommandBuilder class. Declaration public NpgsqlCommandBuilder(NpgsqlDataAdapter adapter) Parameters Type Name Description NpgsqlDataAdapter adapter The adapter. Properties | Improve this Doc View Source QuotePrefix Gets or sets the beginning character or characters to use when specifying database objects (for example, tables or columns) whose names contain characters such as spaces or reserved tokens. Declaration public override string QuotePrefix { get; set; } Property Value Type Description System.String The beginning character or characters to use. The default is an empty string. Overrides System.Data.Common.DbCommandBuilder.QuotePrefix | Improve this Doc View Source QuoteSuffix Gets or sets the ending character or characters to use when specifying database objects (for example, tables or columns) whose names contain characters such as spaces or reserved tokens. Declaration public override string QuoteSuffix { get; set; } Property Value Type Description System.String The ending character or characters to use. The default is an empty string. Overrides System.Data.Common.DbCommandBuilder.QuoteSuffix Methods | Improve this Doc View Source ApplyParameterInfo(DbParameter, DataRow, StatementType, Boolean) Applies the parameter information. Declaration protected override void ApplyParameterInfo(DbParameter p, DataRow row, StatementType statementType, bool whereClause) Parameters Type Name Description System.Data.Common.DbParameter p The parameter. System.Data.DataRow row The row. System.Data.StatementType statementType Type of the statement. System.Boolean whereClause if set to true [where clause]. Overrides System.Data.Common.DbCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter, System.Data.DataRow, System.Data.StatementType, System.Boolean) | Improve this Doc View Source DeriveParameters(NpgsqlCommand) This method is reponsible to derive the command parameter list with values obtained from function definition. It clears the Parameters collection of command. Also, if there is any parameter type which is not supported by Npgsql, an InvalidOperationException will be thrown. Parameters name will be parameter1, parameter2, ... Declaration public static void DeriveParameters(NpgsqlCommand command) Parameters Type Name Description NpgsqlCommand command NpgsqlCommand whose function parameters will be obtained. | Improve this Doc View Source GetDeleteCommand() Gets the automatically generated System.Data.Common.DbCommand object required to perform deletions at the data source. Declaration public NpgsqlCommand GetDeleteCommand() Returns Type Description NpgsqlCommand The automatically generated System.Data.Common.DbCommand object required to perform deletions. | Improve this Doc View Source GetDeleteCommand(Boolean) Gets the automatically generated NpgsqlCommand object required to perform deletions at the data source, optionally using columns for parameter names. Declaration public NpgsqlCommand GetDeleteCommand(bool useColumnsForParameterNames) Parameters Type Name Description System.Boolean useColumnsForParameterNames If true , generate parameter names matching column names, if possible. If false , generate @p1, @p2, and so on. Returns Type Description NpgsqlCommand The automatically generated NpgsqlCommand object required to perform deletions. | Improve this Doc View Source GetInsertCommand() Gets the automatically generated NpgsqlCommand object required to perform insertions at the data source. Declaration public NpgsqlCommand GetInsertCommand() Returns Type Description NpgsqlCommand The automatically generated NpgsqlCommand object required to perform insertions. | Improve this Doc View Source GetInsertCommand(Boolean) Gets the automatically generated NpgsqlCommand object required to perform insertions at the data source, optionally using columns for parameter names. Declaration public NpgsqlCommand GetInsertCommand(bool useColumnsForParameterNames) Parameters Type Name Description System.Boolean useColumnsForParameterNames If true , generate parameter names matching column names, if possible. If false , generate @p1, @p2, and so on. Returns Type Description NpgsqlCommand The automatically generated NpgsqlCommand object required to perform insertions. | Improve this Doc View Source GetParameterName(Int32) Returns the name of the specified parameter in the format of @p#. Declaration protected override string GetParameterName(int parameterOrdinal) Parameters Type Name Description System.Int32 parameterOrdinal The number to be included as part of the parameter's name.. Returns Type Description System.String The name of the parameter with the specified number appended as part of the parameter name. Overrides System.Data.Common.DbCommandBuilder.GetParameterName(System.Int32) | Improve this Doc View Source GetParameterName(String) Returns the full parameter name, given the partial parameter name. Declaration protected override string GetParameterName(string parameterName) Parameters Type Name Description System.String parameterName The partial name of the parameter. Returns Type Description System.String The full parameter name corresponding to the partial parameter name requested. Overrides System.Data.Common.DbCommandBuilder.GetParameterName(System.String) | Improve this Doc View Source GetParameterPlaceholder(Int32) Returns the placeholder for the parameter in the associated SQL statement. Declaration protected override string GetParameterPlaceholder(int parameterOrdinal) Parameters Type Name Description System.Int32 parameterOrdinal The number to be included as part of the parameter's name. Returns Type Description System.String The name of the parameter with the specified number appended. Overrides System.Data.Common.DbCommandBuilder.GetParameterPlaceholder(System.Int32) | Improve this Doc View Source GetUpdateCommand() Gets the automatically generated System.Data.Common.DbCommand object required to perform updates at the data source. Declaration public NpgsqlCommand GetUpdateCommand() Returns Type Description NpgsqlCommand The automatically generated System.Data.Common.DbCommand object required to perform updates. | Improve this Doc View Source GetUpdateCommand(Boolean) Gets the automatically generated NpgsqlCommand object required to perform updates at the data source, optionally using columns for parameter names. Declaration public NpgsqlCommand GetUpdateCommand(bool useColumnsForParameterNames) Parameters Type Name Description System.Boolean useColumnsForParameterNames If true , generate parameter names matching column names, if possible. If false , generate @p1, @p2, and so on. Returns Type Description NpgsqlCommand The automatically generated NpgsqlCommand object required to perform updates. | Improve this Doc View Source QuoteIdentifier(String) Given an unquoted identifier in the correct catalog case, returns the correct quoted form of that identifier, including properly escaping any embedded quotes in the identifier. Declaration public override string QuoteIdentifier(string unquotedIdentifier) Parameters Type Name Description System.String unquotedIdentifier The original unquoted identifier. Returns Type Description System.String The quoted version of the identifier. Embedded quotes within the identifier are properly escaped. Overrides System.Data.Common.DbCommandBuilder.QuoteIdentifier(System.String) Exceptions Type Condition System.ArgumentNullException Unquoted identifier parameter cannot be null | Improve this Doc View Source SetRowUpdatingHandler(DbDataAdapter) Registers the NpgsqlCommandBuilder to handle the NpgsqlDataAdapter.RowUpdating event for a NpgsqlDataAdapter . Declaration protected override void SetRowUpdatingHandler(DbDataAdapter adapter) Parameters Type Name Description System.Data.Common.DbDataAdapter adapter The System.Data.Common.DbDataAdapter to be used for the update. Overrides System.Data.Common.DbCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter) | Improve this Doc View Source UnquoteIdentifier(String) Given a quoted identifier, returns the correct unquoted form of that identifier, including properly un-escaping any embedded quotes in the identifier. Declaration public override string UnquoteIdentifier(string quotedIdentifier) Parameters Type Name Description System.String quotedIdentifier The identifier that will have its embedded quotes removed. Returns Type Description System.String The unquoted identifier, with embedded quotes properly un-escaped. Overrides System.Data.Common.DbCommandBuilder.UnquoteIdentifier(System.String) Exceptions Type Condition System.ArgumentNullException Quoted identifier parameter cannot be null"
  },
  "api/NpgsqlTypes.NpgsqlPolygon.html": {
    "href": "api/NpgsqlTypes.NpgsqlPolygon.html",
    "title": "Struct NpgsqlPolygon | Npgsql Documentation",
    "keywords": "Struct NpgsqlPolygon Represents a PostgreSQL Polygon type. Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace :NpgsqlTypes Assembly :Npgsql.dll Syntax public struct NpgsqlPolygon : IList<NpgsqlPoint>, ICollection<NpgsqlPoint>, IEnumerable<NpgsqlPoint>, IEnumerable, IEquatable<NpgsqlPolygon> Constructors | Improve this Doc View Source NpgsqlPolygon(NpgsqlPoint[]) Declaration public NpgsqlPolygon(params NpgsqlPoint[] points) Parameters Type Name Description NpgsqlPoint [] points | Improve this Doc View Source NpgsqlPolygon(IEnumerable<NpgsqlPoint>) Declaration public NpgsqlPolygon(IEnumerable<NpgsqlPoint> points) Parameters Type Name Description System.Collections.Generic.IEnumerable < NpgsqlPoint > points | Improve this Doc View Source NpgsqlPolygon(Int32) Declaration public NpgsqlPolygon(int capacity) Parameters Type Name Description System.Int32 capacity Properties | Improve this Doc View Source Capacity Declaration public int Capacity { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description System.Int32 Implements System.Collections.Generic.ICollection<T>.Count | Improve this Doc View Source IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.IsReadOnly | Improve this Doc View Source Item[Int32] Declaration public NpgsqlPoint this[int index] { get; set; } Parameters Type Name Description System.Int32 index Property Value Type Description NpgsqlPoint Implements System.Collections.Generic.IList<T>.Item[System.Int32] Methods | Improve this Doc View Source Add(NpgsqlPoint) Declaration public void Add(NpgsqlPoint item) Parameters Type Name Description NpgsqlPoint item Implements System.Collections.Generic.ICollection<T>.Add(T) | Improve this Doc View Source Clear() Declaration public void Clear() Implements System.Collections.Generic.ICollection<T>.Clear() | Improve this Doc View Source Contains(NpgsqlPoint) Declaration public bool Contains(NpgsqlPoint item) Parameters Type Name Description NpgsqlPoint item Returns Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.Contains(T) | Improve this Doc View Source CopyTo(NpgsqlPoint[], Int32) Declaration public void CopyTo(NpgsqlPoint[] array, int arrayIndex) Parameters Type Name Description NpgsqlPoint [] array System.Int32 arrayIndex Implements System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32) | Improve this Doc View Source Equals(NpgsqlPolygon) Declaration public bool Equals(NpgsqlPolygon other) Parameters Type Name Description NpgsqlPolygon other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<NpgsqlPoint> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < NpgsqlPoint > Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source IndexOf(NpgsqlPoint) Declaration public int IndexOf(NpgsqlPoint item) Parameters Type Name Description NpgsqlPoint item Returns Type Description System.Int32 Implements System.Collections.Generic.IList<T>.IndexOf(T) | Improve this Doc View Source Insert(Int32, NpgsqlPoint) Declaration public void Insert(int index, NpgsqlPoint item) Parameters Type Name Description System.Int32 index NpgsqlPoint item Implements System.Collections.Generic.IList<T>.Insert(System.Int32, T) | Improve this Doc View Source Parse(String) Declaration public static NpgsqlPolygon Parse(string s) Parameters Type Name Description System.String s Returns Type Description NpgsqlPolygon | Improve this Doc View Source Remove(NpgsqlPoint) Declaration public bool Remove(NpgsqlPoint item) Parameters Type Name Description NpgsqlPoint item Returns Type Description System.Boolean Implements System.Collections.Generic.ICollection<T>.Remove(T) | Improve this Doc View Source RemoveAt(Int32) Declaration public void RemoveAt(int index) Parameters Type Name Description System.Int32 index Implements System.Collections.Generic.IList<T>.RemoveAt(System.Int32) | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(NpgsqlPolygon, NpgsqlPolygon) Declaration public static bool operator ==(NpgsqlPolygon x, NpgsqlPolygon y) Parameters Type Name Description NpgsqlPolygon x NpgsqlPolygon y Returns Type Description System.Boolean | Improve this Doc View Source Inequality(NpgsqlPolygon, NpgsqlPolygon) Declaration public static bool operator !=(NpgsqlPolygon x, NpgsqlPolygon y) Parameters Type Name Description NpgsqlPolygon x NpgsqlPolygon y Returns Type Description System.Boolean Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator()"
  },
  "api/NpgsqlTypes.NpgsqlRange-1.html": {
    "href": "api/NpgsqlTypes.NpgsqlRange-1.html",
    "title": "Struct NpgsqlRange<T> | Npgsql Documentation",
    "keywords": "Struct NpgsqlRange<T> Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace :NpgsqlTypes Assembly :Npgsql.dll Syntax public struct NpgsqlRange<T> Type Parameters Name Description T Constructors | Improve this Doc View Source NpgsqlRange(T, T) Declaration public NpgsqlRange(T lowerBound, T upperBound) Parameters Type Name Description T lowerBound T upperBound | Improve this Doc View Source NpgsqlRange(T, Boolean, T, Boolean) Declaration public NpgsqlRange(T lowerBound, bool lowerBoundIsInclusive, T upperBound, bool upperBoundIsInclusive) Parameters Type Name Description T lowerBound System.Boolean lowerBoundIsInclusive T upperBound System.Boolean upperBoundIsInclusive | Improve this Doc View Source NpgsqlRange(T, Boolean, Boolean, T, Boolean, Boolean) Declaration public NpgsqlRange(T lowerBound, bool lowerBoundIsInclusive, bool lowerBoundInfinite, T upperBound, bool upperBoundIsInclusive, bool upperBoundInfinite) Parameters Type Name Description T lowerBound System.Boolean lowerBoundIsInclusive System.Boolean lowerBoundInfinite T upperBound System.Boolean upperBoundIsInclusive System.Boolean upperBoundInfinite Properties | Improve this Doc View Source IsEmpty Declaration public bool IsEmpty { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source LowerBound Declaration public T LowerBound { get; set; } Property Value Type Description T | Improve this Doc View Source LowerBoundInfinite Declaration public bool LowerBoundInfinite { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source LowerBoundIsInclusive Declaration public bool LowerBoundIsInclusive { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source UpperBound Declaration public T UpperBound { get; set; } Property Value Type Description T | Improve this Doc View Source UpperBoundInfinite Declaration public bool UpperBoundInfinite { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source UpperBoundIsInclusive Declaration public bool UpperBoundIsInclusive { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Empty() Declaration public static NpgsqlRange<T> Empty() Returns Type Description NpgsqlRange <T> | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(NpgsqlRange<T>, NpgsqlRange<T>) Declaration public static bool operator ==(NpgsqlRange<T> x, NpgsqlRange<T> y) Parameters Type Name Description NpgsqlRange <T> x NpgsqlRange <T> y Returns Type Description System.Boolean | Improve this Doc View Source Inequality(NpgsqlRange<T>, NpgsqlRange<T>) Declaration public static bool operator !=(NpgsqlRange<T> x, NpgsqlRange<T> y) Parameters Type Name Description NpgsqlRange <T> x NpgsqlRange <T> y Returns Type Description System.Boolean"
  },
  "efcore/mapping-and-translation.html": {
    "href": "efcore/mapping-and-translation.html",
    "title": "Type Mapping | Npgsql Documentation",
    "keywords": "Type Mapping The EF Core provider can transparently map any type supported by Npgsql at the ADO.NET level. This means you can use PostgreSQL-specific types, such as inet or circle , directly in your entities - this wasn't possible in EF 6.x. Simply define your properties just as if they were a simple type, such as a string: public class MyEntity { public int Id { get; set; } public string Name { get; set; } public IPAddress IPAddress { get; set; } public NpgsqlCircle Circle { get; set; } public int[] SomeInts { get; set; } } Note that mapping array properties to PostgreSQL arrays is supported. However, operations such as indexing the array, searching for elements in it, etc. aren't yet translated to SQL and will be evaluated client-side. This will probably be fixed in 1.2. PostgreSQL composite types , while supported at the ADO.NET level, aren't yet supported in the EF Core provider. This is tracked by #22 . Explicitly Specifying Datatypes (e.g. JSON) In some cases, your .NET property type can be mapped to several PostgreSQL datatypes; a good example is a string, which will be mapped to text by default, but can also be mapped to jsonb . You can explicitly specify the PostgreSQL datatype by adding the following to your model's OnModelCreating : builder.Entity<Blog>() .Property(b => b.SomeStringProperty) .HasColumnType(\"jsonb\"); Or, if you prefer annotations, use the [Column] attribute: [Column(TypeName=\"jsonb\")] public string SomeStringProperty { get; set; } Translating Regular Expressions PostgreSQL supports regular expression operations in the database , and the Npgsql EF Core provider provides some support for evaluating C# regex operations at the backend. All you have to do is use Regex.IsMatch in your where clause: var customersStartingWithA = context.Customers.Where(c => Regex.IsMatch(c.CompanyName, \"^A\")); Since this regular expression is evaluated at the server, the EF Core provider doesn't need to load all the customers from the database, saving lots of transfer bandwidth."
  },
  "doc/copy.html": {
    "href": "doc/copy.html",
    "title": "COPY | Npgsql Documentation",
    "keywords": "COPY PostgreSQL has a feature allowing efficient bulk import or export of data to and from a table. This is usually a much faster way of getting data in and out of a table than using INSERT and SELECT. See documentation for the COPY command for more details. Npgsql supports three COPY operation modes: binary, text and raw binary. Binary COPY This mode uses the efficient PostgreSQL binary format to transfer data in and out of the database. The user uses an API to read and write rows and fields, which Npgsql decodes and encodes. IMPORTANT : Note that it is the your responsibility to read and write the correct type! If you use COPY to write an int32 into a string field you may get an exception, or worse, silent data corruption. It is also highly recommended to use the overload of Write() which accepts an NpgsqlDbType , allowing you to unambiguously specify exactly what type you want to write. Test your code throroughly. // Import two columns to table data using (var writer = conn.BeginBinaryImport(\"COPY data (field_text, field_int2) FROM STDIN (FORMAT BINARY)\")) { writer.StartRow(); writer.Write(\"Hello\"); writer.Write(8, NpgsqlDbType.Smallint); writer.StartRow(); writer.Write(\"Goodbye\"); writer.WriteNull(); } // Export two columns to table data using (var reader = Conn.BeginBinaryExport(\"COPY data (field_text, field_int2) TO STDOUT (FORMAT BINARY)\")) { reader.StartRow(); Console.WriteLine(reader.Read<string>()); Console.WriteLine(reader.Read<int>(NpgsqlDbType.Smallint)); reader.StartRow(); reader.Skip(); Console.WriteLine(reader.IsNull); // Null check doesn't consume the column Console.WriteLine(reader.Read<int>()); reader.StartRow(); // Last StartRow() returns -1 to indicate end of data } Text COPY This mode uses the PostgreSQL text or csv format to transfer data in and out of the database. It is the user's responsibility to format the text or CSV appropriately, Npgsql simply provides a TextReader or Writer. This mode is less efficient than binary copy, and is suitable mainly if you already have the data in a CSV or compatible text format and don't care about performance. using (var writer = conn.BeginTextImport(\"COPY data (field_text, field_int4) FROM STDIN\")) { writer.Write(\"HELLO\\t1\\n\"); writer.Write(\"GOODBYE\\t2\\n\"); } using (var reader = conn.BeginTextExport(\"COPY data (field_text, field_int4) TO STDOUT\")) { Console.WriteLine(reader.ReadLine()); Console.WriteLine(reader.ReadLine()); } Raw Binary COPY In this mode, data transfer is binary, but Npgsql does no encoding or decoding whatsoever - data is exposed as a raw .NET Stream. This mode makes sense only for bulk data and restore a table: the table is saved as a blob, which can later be restored. If you need to actually make sense of the data, you should be using regular binary mode instead (not raw). Example: int len; var data = new byte[10000]; // Export table1 to data array using (var inStream = conn.BeginRawBinaryCopy(\"COPY table1 TO STDOUT (FORMAT BINARY)\")) { // We assume the data will fit in 10000 bytes, in real usage you would read repeatedly, writine to a file. len = inStream.Read(data, 0, data.Length); } // Import data array into table2 using (var outStream = conn.BeginRawBinaryCopy(\"COPY table2 FROM STDIN (FORMAT BINARY)\")) { outStream.Write(data, 0, len); } Cancel Import operations can be cancelled at any time by calling the Cancel() method on the importer object. No data is committed to the database before the importer is closed or disposed. Export operations can be cancelled as well, also by calling Cancel() . Other See the CopyTests.cs test fixture for more usage samples."
  },
  "doc/ddex.html": {
    "href": "doc/ddex.html",
    "title": "VS2012,VS2013,and VS2015Pro+NpgsqlDdexProvider+EFv6 how to | Npgsql Documentation",
    "keywords": "VS2012,VS2013,and VS2015Pro+NpgsqlDdexProvider+EFv6 how to (by @kenjiuno) Reference: #213 Note: Npgsql 3.1 and NpgsqlDdexProvider 3.1.0 documentations are ongoing at github: https://github.com/npgsql/npgsql/issues/1299 Overview Install Npgsql DDEX (Data Designer Extensibility) provider. Install Npgsql ADO.NET Data Provider. Visual Studio's Entity Data Model wizard will be enabled for PostgreSQL servers. Prerequisites Visual Studio 2015 users: Visual Studio 2015 Professional or greater editions. Express edition won't work. Microsoft Visual Studio 2015 Update 1 is available. Visual Studio 2013 users: Visual Studio 2013 Professional Update 2 or greater editions. Express edition won't work. Microsoft Visual Studio 2013 Update 5 is available. Visual Studio 2012 users: Visual Studio 2012 Professional or greater editions. Express edition won't work. Visual Studio 2012 Update 5 is available. PostgreSQL server installed: Tested on PostgreSQL 9.3.4 (win-x64) Install DDEX provider (Npgsql 3.0.x) Grab Setup_NpgsqlDdexProvider.exe from https://github.com/npgsql/npgsql/releases and run it. Select all components to install. Note: The version among Npgsql , EntityFramework6.Npgsql and NpgsqlDdexProvider must be same . For example, if you select Npgsql 3.0.5, it needs EntityFramework6.Npgsql 3.0.5. Also NpgsqlDdexProvider 3.0.5. Install Npgsql ADO.NET Data Provider to Visual Studio (Npgsql 3.0.x) Launch Visual Studio. Open [TOOL] menu, and then click [Setup Npgsql DbProviderFactories...] Click [OK], 2 times. Restart Visual Studio. It asks permission to modify your devenv.exe.config: This process will add the Npgsql in devenv.exe.config: <system.data> <DbProviderFactories> ... <remove invariant=\"Npgsql\" /> <add name=\"Npgsql Data Provider\" invariant=\"Npgsql\" description=\".Net Data Provider for PostgreSQL\" type=\"Npgsql.NpgsqlFactory, Npgsql, Version=3.0.0.0, Culture=neutral, PublicKeyToken=5d8b90d52f46fda7\" /> </DbProviderFactories> </system.data> Setup succeeded. Note: It will be prompted if administrative privilege is required to modify your devenv.exe.config. Prepare new project for testing Launch Visual Studio. [FILE]→[New]→[Project...] [Console Application] Name is [testef] for example. Install Npgsql for Entity Framework 6 (3.0.x) from NuGet Right click project [testef] [Managet NuGet Packages...] Type \"Npgsql\" at [Search Online (Ctrl+E)] Install \"Npgsql for Entity Framework 6\" ( EntityFramework6.Npgsql ). Version is 3.0.5 for now. EntityFramework 6.0.0 and Npgsql are also installed as part of its dependency. Notice: The assembly versions of Npgsql and NpgsqlDdexProvider must be same . If, for some reason, you need to install a version which isn't the latest one from NuGet, you need to use the following command in the NuGet Package Manager Console: Install-Package EntityFramework6.Npgsql -Version <version> where <version> is the version you want to install. A list of versions available can be found in the NuGet Npgsql page: https://www.nuget.org/packages/Npgsql/ Add Npgsql EFv6 provider Notice: Recent EntityFramework6.Npgsql NuGet package automatically does this process. Open [App.config], or [Web.config] for web projects. Add provider-element into providers-element: <provider invariantName=\"Npgsql\" type=\"Npgsql.NpgsqlServices, EntityFramework6.Npgsql\" /> An App.config having Npgsql EFv6 privoder: <?xml version=\"1.0\" encoding=\"utf-8\"?> <configuration> <configSections> <!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 --> <section name=\"entityFramework\" type=\"System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" requirePermission=\"false\" /> </configSections> <startup> <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.5\" /> </startup> <entityFramework> <defaultConnectionFactory type=\"System.Data.Entity.Infrastructure.SqlConnectionFactory, EntityFramework\" /> <providers> <provider invariantName=\"System.Data.SqlClient\" type=\"System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer\" /> <provider invariantName=\"Npgsql\" type=\"Npgsql.NpgsqlServices, EntityFramework6.Npgsql\" /> </providers> </entityFramework> </configuration> Add Npgsql ADO.NET Data Provider You need to declare the Npgsql ADO.NET Data Provider . Edit one of following config files: App.config or Web.config machine.config If you are using NuGet for your application, we recommend to edit: App.config or Web.config machine.config are placed in these locations. Framework64 will exist on 64-bit Windows: C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\Config\\machine.config C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\Config\\machine.config This is needed part of App.config: <system.data> <DbProviderFactories> <remove invariant=\"Npgsql\"/> <add name=\"Npgsql Data Provider\" invariant=\"Npgsql\" description=\".Net Data Provider for PostgreSQL\" type=\"Npgsql.NpgsqlFactory, Npgsql, Culture=neutral, PublicKeyToken=5d8b90d52f46fda7\" support=\"FF\" /> </DbProviderFactories> </system.data> Note: <remove invariant=\"Npgsql\"/> is important, in case of already having <add invariant=\"Npgsql\" ... /> in machine.config. Edited App.config: <?xml version=\"1.0\" encoding=\"utf-8\"?> <configuration> <configSections> <!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 --> <section name=\"entityFramework\" type=\"System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" requirePermission=\"false\" /> </configSections> <startup> <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.5\" /> </startup> <entityFramework> <defaultConnectionFactory type=\"System.Data.Entity.Infrastructure.SqlConnectionFactory, EntityFramework\" /> <providers> <provider invariantName=\"System.Data.SqlClient\" type=\"System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer\" /> <provider invariantName=\"Npgsql\" type=\"Npgsql.NpgsqlServices, EntityFramework6.Npgsql\" /> </providers> </entityFramework> <system.data> <DbProviderFactories> <remove invariant=\"Npgsql\"/> <add name=\"Npgsql Data Provider\" invariant=\"Npgsql\" description=\".Net Data Provider for PostgreSQL\" type=\"Npgsql.NpgsqlFactory, Npgsql, Culture=neutral, PublicKeyToken=5d8b90d52f46fda7\" support=\"FF\" /> </DbProviderFactories> </system.data> </configuration> Build once Build your project. New ADO.NET Entity Data Model Right click project [testef] [Add]→[New Item...] [ADO.NET Entity Data Model] Default name [Model1] for example. Click [Add] [EF Designer from database] at Choose Model Contents. [New Connection] at Choose Your Data Connection. [PostgreSQL Database] at Change Data Source. Fill properties in Connection Properties. It is easy to fill everything by setting [ConnectionString]. My sample ConnectionString: Host=127.0.0.1;Port=5432;Database=npgsql_tests;Username=npgsql_tests;Password=npgsql_tests Note: PreloadReader and Compatible properies are obsoleted since Npgsql 3.0.0. Please remove them before submitting ConnectionString. Select [Yes, include the sensitive data in the connection string.] in this case for easy setup. Select tables which you want, at Choose Your Database Objects and Settings. Note: remember the text npgsql_tests_efModel at [Model Namespace]. Click OK for Security Warning. T4 Templates generator warns you as it contains just runnable C# code. You will get a generated model. Edit your program.cs Just my sample code for npgsql_tests_ef database. About the name of \"npgsql_tests_efEntities\" class, check your [Model Namespace] entered above. Replace \"Model\" with \"Entities\", like it is \"npgsql_tests_efModel\". using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; namespace testef { class Program { static void Main(string[] args) { using (npgsql_tests_efEntities Context = new npgsql_tests_efEntities()) { foreach (Blogs blog in Context.Blogs) { Console.WriteLine(blog.BlogId + \" \" + blog.Name); } } } } } Sample output: How to check if Npgsql DDEX is working correctly. (Npgsql 3.0.x) (by @kenjiuno) Reference: #718 NpgsqlDdexProvider 3.0.4 and later has a feature to check Npgsql installation status of your .NET project. Right click your .NET project Click [Check Npgsql project installation] Click a button to start the check! It will suggest them if you need one or more actions: [Test and result] shows test cases and their results: How to check if Npgsql DDEX was correctly loaded. (Npgsql 2.x) (by @kenjiuno) Reference: #67 Here are tips to check. Check your connection dialog: Make sure to edit both x86 and x64's machine.config. VS2013 runs 64bit mode on x64 machine. C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\Config\\machine.config C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\Config\\machine.config <system.data> <DbProviderFactories> <add name=\"Npgsql Data Provider\" invariant=\"Npgsql\" description=\".Net Data Provider for PostgreSQL\" type=\"Npgsql.NpgsqlFactory, Npgsql, Version=2.0.12.91, Culture=neutral, PublicKeyToken=5d8b90d52f46fda7\" support=\"FF\" /> </DbProviderFactories> </system.data> Note that the Version attribute above should match the version of the Npgsql Assembly you are using. NpgsqlDdexProvider build tips (by @kenjiuno) Reference: #213 VS2010 users You'll need VS2010 Professional or greater. SP0 users: Install: Visual Studio 2010 SDK SP1 users: Install: Microsoft Visual Studio 2010 Service Pack 1 (Installer) Install: Visual Studio 2010 SP1 SDK If you need newer NpgsqlDdexProvider2010.pkgdef, create your own manually. pkgdef is a kind of registry file for our DDEX registration. Note: It is needed only if you change contents of NpgsqlDataProviderRegistration class. Command example: H:\\Dev\\Npgsql\\NpgsqlDdexProvider>\"H:\\Program Files (x86)\\Microsoft Visual Studio 2010 SDK SP1\\VisualStudioIntegration\\Tools\\Bin\\CreatePkgDef.exe\" /out=NpgsqlDdexProvider2010.pkgdef /codebase bin\\Release-net40\\NpgsqlDdexProvider.dll Output: Visual Studio (R) PkgDef Creation Utility. Copyright (c) Microsoft Corporation. All rights reserved. CreatePkgDef : warning : The Assembly specified at 'bin\\Release-net40\\NpgsqlDdexProvider.dll' cannot be loaded because an alternate copy with the same identity exists in the Assembly probing path at 'H:\\Dev\\Npgsql\\NpgsqlDdexProvider\\bin\\Release-net40\\NpgsqlDdexProvider.dll'. The Assembly at 'H:\\Dev\\Npgsql\\NpgsqlDdexPro vider\\bin\\Release-net40\\NpgsqlDdexProvider.dll' will be loaded instead. Assembly: NpgsqlDdexProvider 1.0.0.0 Output file: NpgsqlDdexProvider2010.pkgdef インストールされている製品: NpgsqlDdexProviderPackage、Version 1.0 パッケージ: NpgsqlDdexProviderPackage {958b9481-2712-4670-9a62-8fe65e5beea7} サービス: PostgreSQL Provider Object Factory SUCCEEDED: NpgsqlDdexProvider Check: How to create a pkgdef file for your Visual Studio Package http://blogs.msdn.com/b/dsvst/archive/2010/03/08/how-to-create-a-pkgdef-file-for-your-visual-studio-package.aspx VS2012 users You'll need VS2012 Professional or greater. Install: Microsoft Visual Studio 2012 SDK Install: Visual Studio 2012 Update 4 VS2013 users You'll need VS2013 Professional or greater. Install: Microsoft Visual Studio 2013 SDK Install: Visual Studio 2013 Update 2 or later. VS2015 users You'll need VS2015 Professional or greater. Check: Installing the Visual Studio Extensibility Tools (VS SDK) How to debug Npgsql DDEX extension In order to debug it, you will need to use the Experimental Instance of Visual Studio. In the NpgsqlDdex project, right click and select properties. Go to Debug tab Click on the radio button for Start External Program. Point it to the devenv.exe binary. On my machine it's located at C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\Common7\\IDE\\devenv.exe Then set the command line arguments to /rootsuffix Exp Save everything and now, just right click the NpgsqlDdex project -> Debug -> Run in a new instance. A new Visual Studio instance should be run where the extension will be made available and you can debug it in the first visual studio instance. Reference: http://stackoverflow.com/questions/9281662/how-to-debug-visual-studio-extensions"
  },
  "doc/faq.html": {
    "href": "doc/faq.html",
    "title": "FAQ | Npgsql Documentation",
    "keywords": "FAQ I get an exception \"The field field1 has a type currently unknown to Npgsql (OID XXXXX). You can retrieve it as a string by marking it as unknown\". Npgsql has to implement support for each PostgreSQL type, and it seems you've stumbled upon an unsupported type. First, head over to our issues page and check if an issue already exists on your type, otherwise please open one to let us know. Then, as a workaround, you can have your type treated as text - it will be up to you to parse it in your program. One simple way to do this is to append ::TEXT in your query (e.g. SELECT 3::TEXT ). If you don't want to modify your query, Npgsql also includes an API for requesting types as text. The fetch all the columns in the resultset as text, using (var cmd = new NpgsqlCommand(...)) { cmd.AllResultTypesAreUnknown = true; var reader = cmd.ExecuteReader(); // Read everything as strings } You can also specify text only for some columns in your resultset: using (var cmd = new NpgsqlCommand(...)) { // Only the second field will be fetched as text cmd.UnknownResultTypeList = new[] { false, true }; var reader = cmd.ExecuteReader(); // Read everything as strings } I'm trying to write a JSONB type and am getting 'column \"XXX\" is of type jsonb but expression is of type text' When sending a JSONB parameter, you must explicitly specify its type to be JSONB with NpgsqlDbType: using (var cmd = new NpgsqlCommand(\"INSERT INTO foo (col) VALUES (@p)\", conn)) { cmd.Parameters.AddWithValue(\"p\", NpgsqlDbType.Jsonb, jsonText); } I'm trying to apply an Entity Framework 6 migration and I get Type is not resolved for member 'Npgsql.NpgsqlException,Npgsql' ! Unfortunately, a shortcoming of EF6 requires you to have Npgsql.dll in the Global Assembly Cache (GAC), otherwise you can't see migration-triggered exceptions. You can add Npgsql.dll to the GAC by opening a VS Developer Command Prompt as administator and running the command gacutil /i Npgsql.dll . You can remove it from the GAC with gacutil /u Npgsql ."
  },
  "doc/index.html": {
    "href": "doc/index.html",
    "title": "Documentation | Npgsql Documentation",
    "keywords": "Getting Started The best way to use Npgsql is to install its nuget package . Npgsql aims to be fully ADO.NET-compatible, its API should feel almost identical to other .NET database drivers. Here's a basic code snippet to get you started. using (var conn = new NpgsqlConnection(\"Host=myserver;Username=mylogin;Password=mypass;Database=mydatabase\")) { conn.Open(); using (var cmd = new NpgsqlCommand()) { cmd.Connection = conn; // Insert some data cmd.CommandText = \"INSERT INTO data (some_field) VALUES ('Hello world')\"; cmd.ExecuteNonQuery(); // Retrieve all rows cmd.CommandText = \"SELECT some_field FROM data\"; using (var reader = cmd.ExecuteReader()) { while (reader.Read()) { Console.WriteLine(reader.GetString(0)); } } } } You can find more info about the ADO.NET API in the MSDN docs or in many tutorials on the Internet. GAC Installation In some cases you'll want to install Npgsql into your Global Assembly Cache (GAC) . This is usually the case when you're using a generic database program that can work with any ADO.NET provider but doesn't come with Npgsql or reference it directly. For these cases, you can download the Npgsql Windows installer from our Github releases page : it will install Npgsql (and optionally the Entity Framework providers) into your GAC and add Npgsql's DbProviderFactory into your machine.config file. This is not the general recommended method of using Npgsql - install via Nuget if possible. Visual Studio Integration If you'd like to have Visual Studio Design-Time support, you can try our experimental DDEX installer . Follow the instructions in the documentation. Unstable Packages The Npgsql build server publishes CI nuget packages for every build. If a bug affecting you was fixed but there hasn't yet been a patch release, you can get a CI nuget at our stable MyGet feed . These packages are generally stable and safe to use (although it's better to wait for a release). We also publish CI packages for the next minor/major version at our unstable MyGet feed . These are definitely unstable and should be used with care."
  },
  "doc/keepalive.html": {
    "href": "doc/keepalive.html",
    "title": "Keepalive | Npgsql Documentation",
    "keywords": "Keepalive Keepalives unfortunately aren't sent while in Wait, here's a workaround . This will be fixed in 3.2. Some clients keep idle connections for long periods of time - this is especially frequent when waiting for PostgreSQL notifications. In this scenario, how can the client know the connection is still up, and hasn't been broken by a server or network outage? For this purpose, Npgsql has a keepalive feature, which makes it send periodic SELECT NULL queries. This feature is by default disabled, and must be enabled via the Keepalive connection string parameter, setting the number of seconds between each keepalive. When keepalive is enabled, Npgsql will emit an NpgsqlConnection.StateChange event if the keepalive fails. Note that you should only turn this feature on if you need it. Unless you know you'll have long-lived idle connections, and that your backend (or network equipment) will interfere with these connections, it's better to leave this off. Note: Npgsql does not turn on TCP keepalive because that feature isn't universally reliable across all network equipment."
  },
  "doc/large-objects.html": {
    "href": "doc/large-objects.html",
    "title": "Large Objects | Npgsql Documentation",
    "keywords": "Large Objects The Large Objects feature is a way of storing large files in a PostgreSQL database. Files can normally be stored in bytea columns but there are two downsides; a file can only be 1 GB and the backend buffers the whole file when reading or writing a column, which may use significant amounts of RAM on the backend. With the Large Objects feature, objects are instead stored in a separate system table in smaller chunks and provides a streaming API for the user. Each object is given an integral identifier that is used for accessing the object, that can, for example, be stored in a user's table containing information about this object. Example // Retrieve a Large Object Manager for this connection var manager = new NpgsqlLargeObjectManager(Conn); // Create a new empty file, returning the identifier to later access it uint oid = manager.Create(); // Reading and writing Large Objects requires the use of a transaction using (var transaction = Conn.BeginTransaction()) { // Open the file for reading and writing using (var stream = manager.OpenReadWrite(oid)) { var buf = new byte[] { 1, 2, 3 }; stream.Write(buf, 0, buf.Length); stream.Seek(0, System.IO.SeekOrigin.Begin); var buf2 = new byte[buf.Length]; stream.Read(buf2, 0, buf2.Length); // buf2 now contains 1, 2, 3 } // Save the changes to the object transaction.Commit(); } See also See the PostgreSQL documentation for more information. All functionality are implemented and wrapped in the classes NpgsqlLargeObjectManager and NpgsqlLargeObjectStream using standard .NET Stream as base class."
  },
  "doc/logging.html": {
    "href": "doc/logging.html",
    "title": "Logging | Npgsql Documentation",
    "keywords": "Logging Npgsql includes a built-in feature for outputting logging events which can help debug issues. Npgsql logging is disabled by default and must be turned on. Logging can be turned on by setting NpgsqlLogManager.Provider to a class implementing the INpgsqlLoggingProvider interface. Npgsql comes with a console implementation which can be set up as follows: NpgsqlLogManager.Provider = new ??? Note: you must set the logging provider before invoking any other Npgsql method, at the very start of your program. It's trivial to create a logging provider that passes log messages to whatever logging framework you use. You can find such an adaptor for NLog here . Note: the logging API is a first implementation and will probably improve/change - don't treat it as a stable part of the Npgsql API. Let us know if you think there are any missing messages or features! ConsoleLoggingProvider Npgsql comes with one built-in logging provider: ConsoleLoggingProvider. It will simply dump all log messages with a given level or above to stdanrd output. You can set it up by including the following line at the beginning of your application: NpgsqlLogManager.Provider = new ConsoleLoggingProvider(<min level>, <print level?>, <print connector id?>); Level defaults to NpgsqlLogLevel.Info (which will only print warnings and errors). You can also have log levels and connector IDs logged. Statement and Parameter Logging Npgsql will log all SQL statements at level Debug, this can help you debug exactly what's being sent to PostgreSQL. By default, Npgsql will not log parameter values as these may contain sensitive information. You can turn on parameter logging by setting NpgsqlLogManager.IsParameterLoggingEnabled to true. NLogLoggingProvider (or implementing your own) The following provider is used in the Npgsql unit tests to pass log messages to NLog . You're welcome to copy-paste it into your project, or to use it as a starting point for implementing your own custom provider. class NLogLoggingProvider : INpgsqlLoggingProvider { public NpgsqlLogger CreateLogger(string name) { return new NLogLogger(name); } } class NLogLogger : NpgsqlLogger { readonly Logger _log; internal NLogLogger(string name) { _log = LogManager.GetLogger(name); } public override bool IsEnabled(NpgsqlLogLevel level) { return _log.IsEnabled(ToNLogLogLevel(level)); } public override void Log(NpgsqlLogLevel level, int connectorId, string msg, Exception exception = null) { var ev = new LogEventInfo(ToNLogLogLevel(level), \"\", msg); if (exception != null) ev.Exception = exception; if (connectorId != 0) ev.Properties[\"ConnectorId\"] = connectorId; _log.Log(ev); } static LogLevel ToNLogLogLevel(NpgsqlLogLevel level) { switch (level) { case NpgsqlLogLevel.Trace: return LogLevel.Trace; case NpgsqlLogLevel.Debug: return LogLevel.Debug; case NpgsqlLogLevel.Info: return LogLevel.Info; case NpgsqlLogLevel.Warn: return LogLevel.Warn; case NpgsqlLogLevel.Error: return LogLevel.Error; case NpgsqlLogLevel.Fatal: return LogLevel.Fatal; default: throw new ArgumentOutOfRangeException(\"level\"); } } }"
  },
  "doc/security.html": {
    "href": "doc/security.html",
    "title": "Security and Encryption | Npgsql Documentation",
    "keywords": "Security and Encryption Logging in The simplest to log into PostgreSQL is by specifying a Username and a Password in your connection string. Depending on how your PostgreSQL is configured (in the pg_hba.conf file), Npgsql will send the password in MD5 or in cleartext (not recommended). For documentation about all auth methods supported by PostgreSQL, see this page . Note that Npgsql does not support logging in via Unix-domain sockets (auth method local ). Integrated Security (SSPI/Kerberos) Logging in with a username and password isn't recommended, since your application must have access to your password. An alternate way of authenticating is \"Integrated Security\", which uses SSPI (on Windows) or Kerberos. The advantage of this method is that authentication is handed off to your operating system, using your already-open login session. Your application never needs to handle a password. You can use this method for a Kerberos login, Windows Active Directory or a local Windows session. Instructions on setting up Kerberos and SSPI are available in the PostgreSQL auth methods docs . Some more instructions for SSPI are available here . Once your PostgreSQL is configured correctly, simply include Integrated Security=true in your connection string and drop the Password parameter (if you leave out Username it will be inferred from your US). Encryption (SSL/TLS) By default PostgreSQL connections are unencrypted, but you can turn on SSL/TLS encryption if you wish. First, you have to set up your PostgreSQL to receive SSL/TLS connections as described here . Once that's done, specify SSL Mode in your connection string, setting it to either Require (connection will fail if the server isn't set up for encryption), or Prefer (use encryption if possible but fallback to unencrypted otherwise). Note that by default, Npgsql will verify that your server's certificate is valid. If you're using a self-signed certificate this will fail. You can instruct Npgsql to ignore this by specifying Trust Server Certificate=true in the connection string. To precisely control how the server's certificate is validated, you can register UserCertificateValidationCallback on NpgsqlConnection (this works just like on .NET's SSLStream ). You can also have Npgsql provide client certificates to the server by registering the ProvideClientCertificatesCallback on NpgsqlConnection (this works just like on .NET's SSLStream )."
  },
  "doc/wait.html": {
    "href": "doc/wait.html",
    "title": "Waiting for Notifications | Npgsql Documentation",
    "keywords": "Waiting for Notifications Note: This functionality replaces Npgsql 3.0's \"Continuous processing mode\" . PostgreSQL Asynchronous messages PostgreSQL has a feature whereby arbitrary notification messages can be sent between clients. For example, one client may wait until it is notified by another client of a task that it is supposed to perform. Notifications are, by their nature, asynchronous - they can arrive at any point. For more detail about this feature, see the PostgreSQL NOTIFY command . Some other asynchronous message types are notices (e.g. database shutdown imminent) and parameter changes, see the PostgreSQL protocol docs for more details. Note that despite the word \"asynchronous\", this page has nothing to do with ADO.NET async operations (e.g. ExecuteReaderAsync). Processing of Notifications Npgsql exposes notification messages via the Notification event on NpgsqlConnection. Since asynchronous notifications are rarely used and processing can be complex, Npgsql only processes notification messages as part of regular (synchronous) query interaction. That is, if an asynchronous notification is sent, Npgsql will only process it and emit an event to the user the next time a command is sent and processed. To receive notifications outside a synchronous request-response cycle, call NpgsqlConnection.Wait() . This will make your thread block until a single notification is received (note that a version with a timeout as well as an async version exist). Note that the notification is still delivered via the Notification event as before. var conn = new NpgsqlConnection(ConnectionString); conn.Open(); conn.Notification += (o, e) => Console.WriteLine(\"Received notification\"); while (true) { conn.Wait(); // Thread will block here } Keepalive Keepalives unfortunately aren't sent while in Wait, here's a workaround . This will be fixed in 3.2."
  },
  "doc/migration/3.0.html": {
    "href": "doc/migration/3.0.html",
    "title": "Migration Notes | Npgsql Documentation",
    "keywords": "Migrating from 2.2 to 3.0 Version 3.0 represents a near-total rewrite of Npgsql. In addition to changing how Npgsql works internally and communicates with PostgreSQL, a conscious effort was made to better align Npgsql with the ADO.NET specs/standard and with SqlClient where that made sense. This means that you cannot expect to drop 3.0 as a replacement to 2.2 and expect things to work upgrade cautiously and test extensively before deploying anything to production. The following is a non-exhaustive list of things that changed. If you run against a breaking change not documented here, please let us know and we'll add it. Major Support for .NET 2.0, .NET 3.5 and .NET 4.0 has been dropped - you will have to upgrade to .NET 4.5 to use Npgsql 3.0. We'll continue to do bugfixes on the 2.2 branch for a while on a best-effort basis. The Entity Framework provider packages have been renamed to align with Microsoft's new naming. The new packages are EntityFramework5.Npgsql and EntityFramework6.Npgsql . EntityFramework7.Npgsql is in alpha. A brand-new bulk copy API has been written, using binary encoding for much better performance. See the docs . Composite (custom) types aren't supported yet, but this is a high-priority feature for us. See #441 . SSL Npgsql 2.2 didn't perform validation on the server's certificate by default, so self-signed certificate were accepted. The new default is to perform validation. Specify the Trust Server Certificate connection string parameter to get back previous behavior. The \"SSL\" connection string parameter has been removed, use \"SSL Mode\" instead. The \"SSL Mode\" parameter's Allow option has been removed, as it wasn't doing anything. Type Handling Previously, Npgsql allowed writing a NULL by setting NpgsqlParameter.Value to null . This is not allowed in ADO.NET and is no longer supported, set to DBNull.Value instead. In some cases, you will now be required to explicitly set a parameter's type although you didn't have to before (you'll get an error 42804 explaining this). This can happen especially in Dapper custom custom type handlers ( #694 ). Simply set the NpgsqlDbType property on the parameter. Removed support for writing a parameter with an IEnumerable<T> value, since that would require Npgsql to enumerate it multiple times internally. IList<T> and IList are permitted. It is no longer possible to write a .NET enum to an integral PostgreSQL column (e.g. int4). Proper enum support has been added which allows writing to PostgreSQL enum columns (see the docs . To continue writing enums to integral columns as before, simply add an explicit cast to the integral type in your code. NpgsqlMacAddress has been removed and replaced by the standard .NET PhysicalAddress. Npgsql's BitString has been removed and replaced by the standard .NET BitArray. NpgsqlTime has been removed and replaced by the standard .NET TimeSpan. NpgsqlTimeZone has been removed. NpgsqlTimeTZ now holds 2 TimeSpans, rather than an NpgsqlTime and an NpgsqlTimeZone. NpgsqlTimeStamp no longer maps DateTime.{Max,Min}Value to {positive,negative} infinity. Use NpgsqlTimeStamp.Infinity and NpgsqlTimeStamp.MinusInfinity explicitly for that. You can also specify the \"Convert Infinity DateTime\" connection string parameter to retain the old behavior. Renamed NpgsqlInet's addr and mask to Address and Mask. NpgsqlPoint now holds Doubles instead of Singles ( #437 ). NpgsqlDataReader.GetFieldType() and GetProviderSpecificFieldType() now return Array for arrays. Previously they returned int[], even for multidimensional arrays. NpgsqlDataReader.GetDataTypeName() now returns the name of the PostgreSQL type rather than its OID. Retired features Removed the \"Preload Reader\" feature, which loaded the entire resultset into memory. If you require this (inefficient) behavior, read the result into memory outside Npgsql. We plan on working on MARS support, see #462 . The \"Use Extended Types\" parameter is no longer needed and isn't supported. To access PostgreSQL values that can't be represented by the standard CLR types, use the standard ADO.NET NpgsqlDataReader.GetProviderSpecificValue or even better, the generic NpgsqlDataReader.GetFieldValue<T> . Removed the feature where Npgsql automatically \"dereferenced\" a resultset of refcursors into multiple resultsets (this was used to emulate returning multiple resultsets from stored procedures). Note that if your function needs to return a single resultset, it should be simply returning a table rather than a cursor (see RETURNS TABLE ). See #438 . Removed the AlwaysPrepare connection string parameter Removed the Encoding connection string parameter, which was obsolete and unused anyway Removed the Protocol connection string parameter, which was obsolete and unused anyway (protocol 3 was always used) (UTF8 was always used regardless of what was specified) Removed NpgsqlDataReader.LastInsertedOID, it did not allow accessing individual OIDs in multi-statement commands. Replaced with NpgsqlDataReader.Statements, which provides OID and affected row information on a statement-by-statement basis. Removed NpgsqlDataReader.HasOrdinal , was a badly-named non-standard API without a serious use case. GetName() can be used as a workaround. Other It is no longer possible to create database entities (tables, functions) and then use them in the same multi-query command - you must first send a command creating the entity, and only then send commands using it. See #641 for more details. Previously, Npgsql set DateStyle=ISO, lc_monetary=C and extra_float_digits=3 on all connections it created. This is no longer case, if you rely on these parameters you must send them yourself. NpgsqlConnection.Clone() will now only return a new connection with the same connection string as the original. Previous versions returned an open connection if the original was open, and copied the Notice event listeners as well. Note: NpgsqlConnection.Clone() was accidentally missing from 3.0.0 and 3.0.1. Removed the obsolete NpgsqlParameterCollection.Add(name, value) method. Use AddWithValue() instead, which also exists in SqlClient. The savepoint manipulation methods on NpgsqlTransaction have been renamed from Save , and Rollback to CreateSavepoint and RollbackToSavepoint . This broke the naming conventions for these methods across other providers (SqlClient, Oracle...) and so in 3.0.2 the previous names were returned and the new names marked as obsolete. 3.1 will remove the the new names and leaves only Save and Rollback . See #738 . The default CommandTimeout has changed from 20 seconds to 30 seconds, as in ADO.NET . CommandType.TableDirect now requires CommandText to contain the name of a table, as per the MSDN docs . Multiple tables (join) aren't supported. CommandType.StoredProcedure now requires CommandText contain only the name of a function, without parentheses or parameter information, as per the MSDN docs . Moved the LastInsertedOID property from NpgsqlCommand to NpgsqlReader, like the standard ADO.NET RecordsAffected ."
  },
  "doc/migration/3.1.html": {
    "href": "doc/migration/3.1.html",
    "title": "Migration Notes | Npgsql Documentation",
    "keywords": "Migrating from 3.0 to 3.1 CommandTimeout used to be implemented with PostgreSQL's statement_timeout parameter, but this wasn't a very reliable method and has been removed. CommandTimeout is now implemented via socket timeouts only, see #689 for more details. Note that if a socket timeout occurs, the connection is broken and must be reopened. The Persist Security Info parameter has been implemented and is false by default. This means that once a connection has been opened, you will not be able to get its password. Removed ContinuousProcessing mode, and replaced it with Wait , a simpler and less bug-prone mechanism for consuming asynchronous notifications ( #1024 ). The Maximum Pool Size connection is parameter is now 100 default instead of 20 (this is default in SqlClient, pg_bouncer...). The Connection Lifetime parameter has been renamed to Connection Idle Lifetime , and its default has been changed from 15 to 300. Also, once the number of seconds has elapsed the connection is closed immediately; the previous behavior closed half of the connections. RegisterEnum and RegisterEnumGlobally have been renamed to MapEnum and MapEnumGlobally respectively. If you used enum mapping in 3.0, the strategy for translating between CLR and PostgreSQL type names has changed. In 3.0 Npgsql simply used the CLR name (e.g. SomeField) as the PostgreSQL name; Npgsql 3.1 uses a user-definable name translator, default to snake case (e.g. some_field). See #859 . The EnumLabel attribute has been replaced by the PgName attribute (which is also used for the new composite type support). When PostgreSQL sends an error, it is no longer raised by an NpgsqlException but by a PostgresException. PostgresException is a subclass of NpgsqlException so code catching NpgsqlException should still work, but the PostgreSQL-specific exception properties will only be available on PostgresException. The Code property on NpgsqlException has been renamed to SqlState. It has also been moved to PostgresException. NpgsqlNotice has been renamed to PostgresNotice For multistatement commands, PostgreSQL parse errors will now be thrown only when the user calls NextResult() and gets to the problematic statement. It is no longer possible to dispose a prepared statement while a reader is still open. Since disposing a prepared statement includes database interaction, the connection must be idle. Removed NpgsqlConnection.SupportsHexByteFormat . Renamed NpgsqlConnection.Supports_E_StringPrefix to SupportsEStringPrefix ."
  },
  "doc/types/basic.html": {
    "href": "doc/types/basic.html",
    "title": "Supported Types and their Mappings | Npgsql Documentation",
    "keywords": "Supported Types and their Mappings Type mappings when reading values sent from the backend PostgreSQL type Default .NET type Provider-specific type Other .NET types bool bool int2 short byte, sbyte, int, long, float, double, decimal, string int4 int byte, short, long, float, double, decimal, string int8 long long, byte, short, int, float, double, decimal, string float4 float double float8 double numeric decimal byte, short, int, long, float, double, string money decimal text string char[] varchar string char[] bpchar string char[] citext string char[] json string char[] jsonb string char[] xml string char[] point NpgsqlPoint string lseg NpgsqlLSeg string path NpgsqlPath polygon NpgsqlPolygon line NpgsqlLine string circle NpgsqlCircle string box NpgsqlBox string bit(1) bool BitArray bit(n) BitArray varbit BitArray hstore IDictionary string uuid Guid string cidr NpgsqlInet string inet IPAddress NpgsqlInet string macaddr PhysicalAddress string tsquery NpgsqlTsQuery tsvector NpgsqlTsVector date DateTime NpgsqlDate interval TimeSpan NpgsqlTimeSpan timestamp DateTime NpgsqlDateTime timestamptz DateTime NpgsqlDateTime DateTimeOffset time TimeSpan timetz DateTimeOffset DateTimeOffset, DateTime, TimeSpan bytea byte[] oid uint xid uint cid uint oidvector uint[] name string char[] (internal) char char byte, short, int, long geometry (PostGIS) PostgisGeometry record object[] composite types T range subtypes NpgsqlRange enum types TEnum array types Array (of child element type) The Default .NET type column specifies the data type NpgsqlDataReader.GetValue will return. NpgsqlDataReader.GetProviderSpecificValue will return a value of a data type specified in the Provider-specific type column, or the Default .NET type if there is no specialization. The Other .NET types column specifies which other data types in which the value can be retrieved using NpgsqlDataReader.GetBoolean , .GetByte , .GetDouble etc. or by .GetFieldValue<T> . Type mappings when sending parameters to the backend There are three rules that decides what backend type a parameter will sent as. If the parameter's NpgsqlDbType is set, it is used. If the parameter's DbType is set, it is used. Of neither of the above is set, the the backend type will be inferred based on the type the value has. Note that for DateTime and NpgsqlDateTime, the Kind attribute tells wether to use timestamp or timestamptz . Note that when NpgsqlDbType or DbType is set to a primitive type (bool, numbers and string), most other primitive types are accepted since they all implement the IConvertible interface, which is what Npgsql uses to convert the value to the target type. NpgsqlDbType DbType PostgreSQL type Accepted .NET types Boolean Boolean bool bool, IConvertible Smallint Int16 int2 short, IConvertible Integer Int32 int4 int, IConvertible Bigint Int64 int8 long, IConvertible Real Single float4 float, IConvertible Double Double float8 double, IConvertible Numeric Decimal, VarNumeric numeric decimal, IConvertible Money Currency money decimal, IConvertible Text String, StringFixedLength, AnsiString, AnsiStringFixedLength text string, char[], char, IConvertible Varchar varchar string, char[], char, IConvertible Char char string, char[], char, IConvertible Citext citext string, char[], char, IConvertible Json json string, char[], char, IConvertible Jsonb jsonb string, char[], char, IConvertible Xml xml string, char[], char, IConvertible Point point NpgsqlPoint LSeg lseg NpgsqlLSeg Path path NpgsqlPath Polygon polygon NpgsqlPolygon Line line NpgsqlLine Circle circle NpgsqlCircle Box box NpgsqlBox Bit bit BitArray, bool, string Varbit varbit BitArray, bool, string Hstore hstore IDictionary Uuid uuid Guid, string Cidr cidr IPAddress, NpgsqlInet Inet inet IPAddress, NpgsqlInet MacAddr macaddr PhysicalAddress TsQuery tsquery NpgsqlTsQuery TsVector tsvector NpgsqlTsVector Date Date date DateTime, NpgsqlDate, IConvertible Interval interval TimeSpan, NpgsqlTimeSpan, string Timestamp DateTime, DateTime2 timestamp DateTime, DateTimeOffset, NpgsqlDateTime, IConvertible TimestampTZ DateTimeOffset timestamptz DateTime, DateTimeOffset, NpgsqlDateTime, IConvertible Time Time time TimeSpan, string TimeTZ timetz DateTimeOffset, DateTime, TimeSpan Bytea Binary bytea byte[], ArraySegment Oid oid uint, IConvertible Xid xid uint, IConvertible Cid cid uint, IConvertible Oidvector oidvector uint[] Name name string, char[], char, IConvertible InternalChar (internal) char byte, IConvertible Geometry geometry PostgisGeometry Composite composite types T Range \\ (other NpgsqlDbType) range types Enum enum types TEnum Array \\ (other NpgsqlDbType) array types Notes when using Range and Array, bitwise-or NpgsqlDbType.Range or NpgsqlDbType.Array with the child type. For example, to construct the NpgsqlDbType for a int4range , write NpgsqlDbType.Range | NpgsqlDbType.Integer . To construct the NpgsqlDbType for an int[] , write NpgsqlDbType.Array | NpgsqlDbType.Integer . For information about enums, see the Enums and Composites page . .NET type Auto-inferred PostgreSQL type bool bool byte int2 sbyte int2 short int2 int int4 long int8 float float4 double float8 decimal numeric string text char[] text char text NpgsqlPoint point NpgsqlLSeg lseg NpgsqlPath path NpgsqlPolygon polygon NpgsqlLine line NpgsqlCircle circle NpgsqlBox box BitArray varbit Guid uuid IPAddress inet NpgsqlInet inet PhysicalAddress macaddr NpgsqlTsQuery tsquery NpgsqlTsVector tsvector NpgsqlDate date NpgsqlDateTime(Kind=Local,Unspecified) timestamp NpgsqlDateTime(Kind=Utc) timestamptz DateTime(Kind=Local,Unspecified) timestamp DateTime(Kind=Utc) timestamptz DateTimeOffset timestamptz TimeSpan time byte[] bytea PostgisGeometry geometry Custom composite type composite types NpgsqlRange range types Enum types enum types Array types array types"
  },
  "doc/types/datetime.html": {
    "href": "doc/types/datetime.html",
    "title": "Date and Time Handling | Npgsql Documentation",
    "keywords": "Date and Time Handling Handling date and time values usually isn't hard, but you must pay careful attention to differences in how the .NET types and PostgreSQL represent dates. It's worth reading the PostgreSQL date/time type documentation to familiarize yourself with PostgreSQL's types. Warning : a common mistake is for users to think that the PostgreSQL timestamp with timezone type stores the timezone in the database. This is not the case: only the timestamp is stored. There is no one PostgreSQL type that stores both a date/time and a timezone, similar to .NET DateTimeOffset . .NET types and PostgreSQL types The .NET and PostgreSQL types differ in the resolution and range they provide; the .NET type usually have a higher resolution but a lower range than the PostgreSQL types: PostgreSQL type Precision/Range .NET Native Type Precision/Range Npgsql .NET Provider-Specific Type timestamp 1 microsecond, 4713BC-294276AD DateTime 100 nanoseconds, 1AD-9999AD NpgsqlDateTime timestamp with timezone 1 microsecond, 4713BC-294276AD DateTime 100 nanoseconds, 1AD-9999AD NpgsqlDateTime date 1 day, 4713BC-5874897AD DateTime 100 nanoseconds, 1AD-9999AD NpgsqlDate time 1 microsecond, 0-24 hours TimeSpan 100 nanoseconds, -10,675,199 - 10,675,199 days N/A time with timezone 1 microsecond, 0-24 hours DateTimeOffset (ignore date) 100 nanoseconds, 1AD-9999AD N/A interval 1 microsecond, -178000000-178000000 years TimeSpan 100 nanoseconds, -10,675,199 - 10,675,199 days NpgsqlTimeSpan If your needs are met by the .NET native types, it is best that you use them directly with Npgsql. If, however, you require the extended range of a PostgreSQL type you can use Npgsql's provider-specific types, which represent PostgreSQL types in an exact way. Timezones It's critical to understand exactly how timezones and timezone conversions are handled between .NET types and PostgreSQL. In particular, .NET's DateTime has a Kind property which impacts how Npgsql reads and writes the value. For PostgreSQL timestamp without time zone and time (without time zone), the database value's timezone is unknown or undefined. Therefore, Npgsql does no timezone conversion whatsoever and always sends your DateTime as-is, regardless of its Kind. For DateTimeOffset, the timestamp component is sent as-is (i.e. the timezone component is discarded). For PostgreSQL timestamp with time zone , the database value's timezone is expected to always be UTC (the timezone isn't saved in the database). As a result, a DateTime Offset as well as a DateTime with Kind=Local Npgsql will be converted to UTC before being sent to the database. When reading a timestamptz, the database UTC timestamp will be returned as a DateTime with Kind=Local or a DateTimeOffset in the local timezone ( UNIMPLEMENTED? ). PostgreSQL time with time zone is the only date/time type which stores a timezone in the database. Accordingly, your DateTime's Kind will determine the the timezone sent to the database. Detailed Behavior: Sending values to the database .NET value PG type Action DateTime(Kind=UTC) timestamp Send as-is DateTime(Kind=Local) timestamp (default) Send as-is DateTime(Kind=Unspecified) timestamp (default) Send as-is DateTimeOffset timestamp Strip offset, send as-is DateTime(Kind=UTC) timestamptz (default) Send as-is DateTime(Kind=Local) timestamptz Convert to UTC locally before sending DateTime(Kind=Unspecified) timestamptz Send as-is DateTimeOffset timestamptz (default) Convert to UTC locally before sending DateTime(Kind=UTC) time Send as-is DateTime(Kind=Local) time Send as-is DateTime(Kind=Unspecified) time Send as-is DateTimeOffset time Strip offset, send as-is DateTime(Kind=UTC) timetz Send time and UTC timezone DateTime(Kind=Local) timetz Send time and local system timezone DateTime(Kind=Unspecified) timetz Assume local, send time and local system timezone DateTimeOffset timetz Send time and timezone Detailed Behavior: Reading values from the database PG type .NET value Action timestamp DateTime (default) Kind=Unspecified timestamp DateTimeOffset Should throw an exception? timestamptz DateTime Kind=Local (according to system tz) timestamptz DateTimeOffset (default) Offset=UTC time TimeSpan (default) As-is time DateTime Use only time component time DateTimeOffset Exception? timetz TimeSpan Strip offset, read as-is timetz DateTime Use only time component, throw away time zone timetz DateTimeOffset (default) Use only time- and time zone component Further Reading If you're really interested in some of the mapping decisions above, check out this issue ."
  },
  "doc/types/enums_and_composites.html": {
    "href": "doc/types/enums_and_composites.html",
    "title": "Accessing PostgreSQL Enums and Composites | Npgsql Documentation",
    "keywords": "Accessing PostgreSQL Enums and Composites PostgreSQL supports enum types and composite types as database columns, and Npgsql supports mapping these to your CLR types. This allows you to seamlessly and efficiently read and write enum values to the database without worrying about conversions. Note: composite type support was introduced in Npgsql 3.1 Mapping CLR types to PostgreSQL enums and composites In order to use enum and composite types with Npgsql, you must map your CLR type to the PostgreSQL enum or composite. This must be done in advance, before reading or writing. The easiest way to do this is to call MapEnumGlobally or MapCompositeGlobally before opening any connections; the following will set up a mapping between your CLR SomeEnum type to a PostgreSQL enum called some_enum (more on the name translation later). enum SomeEnum { ... } NpgsqlConnection.MapEnumGlobally<SomeEnum>(); Similarly, the following will set up a mapping between CLR type SomeType and a PostgreSQL composite called some_type . The CLR type can be a class or struct. class SomeType { ... } NpgsqlConnection.MapCompositeGlobally<SomeType>(); Note that the PostgreSQL types must have been create in advance (with CREATE TYPE ). If you don't want to map an enum for all your connections, you can register a mapping for one connection only by calling MapEnum on an NpgsqlConnection instance. Name Translation Since Npgsql 3.1, pluggable name translators are used to map CLR type and field names to PostgreSQL ones. The default translation scheme is NpgsqlSnakeCaseNameTranslator , which maps names like SomeType to some_type. However, when calling the mapping methods you can pass your own name translator which implements INpgsqlNameTranslator. Finally, you may control mappings on a field-by-field basis via the [PgName] attribute. This will override the name translator. using NpgsqlTypes; enum SomeEnum { [PgName(\"happy\")] Good, [PgName(\"sad\")] Bad } Reading and Writing Once your mapping is set up, you can read and write enums and composites like any other type: // Writing using (var cmd = new NpgsqlCommand(\"INSERT INTO some_table (some_enum, some_type) VALUES (@p1, @p2)\", Conn)) { cmd.Parameters.AddWithValue(\"p1\", SomeEnum.Good); cmd.Parameters.AddWithValue(\"p2\", new SomeType { ... }); cmd.ExecuteNonQuery(); } // Reading using (var cmd = new NpgsqlCommand(\"SELECT some_enum, some_type FROM some_table\", Conn)) using (var reader = cmd.ExecuteReader()) { reader.Read(); var enumValue = reader.GetFieldValue<SomeEnum>(0); var compositeValue = reader.GetFieldValue<SomeType>(1); }"
  },
  "efcore/index.html": {
    "href": "efcore/index.html",
    "title": "Getting Started | Npgsql Documentation",
    "keywords": "Getting Started Npgsql has an Entity Framework Core provider. It mostly behaves like a any other EFCore provider (e.g. SQL Server) - all the information in the general EF Core docs applies. If you're just getting started with EF Core, those docs are the best place to start. Development happens in the Npgsql.EntityFrameworkCore.PostgreSQL repository, all issues should be reported there. Using the Npgsql EF Core Provider To use the Npgsql EF Core provider, simply add a dependency on Npgsql.EntityFrameworkCore.PostgreSQL . You can follow the instructions in the general EF Core Getting Started docs . Following is an example project.json using Npgsql EF Core: { \"version\": \"1.0.0-*\", \"buildOptions\": { \"debugType\": \"portable\", \"emitEntryPoint\": true }, \"dependencies\": { \"Npgsql.EntityFrameworkCore.PostgreSQL\": \"1.1.0\", \"Microsoft.EntityFrameworkCore.Design\": { \"version\": \"1.1.0\", \"type\": \"build\" } }, \"frameworks\": { \"netcoreapp1.1\": { \"dependencies\": { \"Microsoft.NETCore.App\": { \"type\": \"platform\", \"version\": \"1.1.0\" } } } }, \"tools\": { \"Microsoft.EntityFrameworkCore.Tools.DotNet\": \"1.1.0-preview4-final\" } } Using an Existing Database (Database-First) The Npgsql EF Core provider also supports reverse-engineering a code model from an existing PostgreSQL database (\"database-first\"). To do so, add a dependency on Npgsql.EntityFrameworkCore.PostgreSQL.Design. Then, execute the following if you're using dotnet cli: dotnet ef dbcontext scaffold \"Host=localhost;Database=mydatabase;Username=myuser;Password=mypassword\" Npgsql.EntityFrameworkCore.PostgreSQL Or with Powershell: Scaffold-DbContext \"Host=localhost;Database=mydatabase;Username=myuser;Password=mypassword\" Npgsql.EntityFrameworkCore.PostgreSQL"
  },
  "api/Npgsql.NpgsqlLargeObjectStream.html": {
    "href": "api/Npgsql.NpgsqlLargeObjectStream.html",
    "title": "Class NpgsqlLargeObjectStream | Npgsql Documentation",
    "keywords": "Class NpgsqlLargeObjectStream An interface to remotely control the seekable stream for an opened large object on a PostgreSQL server. Note that the OpenRead/OpenReadWrite method as well as all operations performed on this stream must be wrapped inside a database transaction. Inheritance System.Object System.MarshalByRefObject System.IO.Stream NpgsqlLargeObjectStream Inherited Members System.IO.Stream.Null System.IO.Stream.CopyToAsync(System.IO.Stream) System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32) System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32, System.Threading.CancellationToken) System.IO.Stream.CopyTo(System.IO.Stream) System.IO.Stream.CopyTo(System.IO.Stream, System.Int32) System.IO.Stream.Dispose() System.IO.Stream.FlushAsync() System.IO.Stream.CreateWaitHandle() System.IO.Stream.BeginRead(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object) System.IO.Stream.EndRead(System.IAsyncResult) System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32) System.IO.Stream.BeginWrite(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object) System.IO.Stream.EndWrite(System.IAsyncResult) System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32) System.IO.Stream.ReadByte() System.IO.Stream.WriteByte(System.Byte) System.IO.Stream.Synchronized(System.IO.Stream) System.IO.Stream.ObjectInvariant() System.IO.Stream.ReadTimeout System.IO.Stream.WriteTimeout System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.CreateObjRef(System.Type) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Npgsql Assembly :Npgsql.dll Syntax public class NpgsqlLargeObjectStream : Stream, IDisposable Properties | Improve this Doc View Source CanRead CanRead always returns true, unless the stream has been closed. Declaration public override bool CanRead { get; } Property Value Type Description System.Boolean Overrides System.IO.Stream.CanRead | Improve this Doc View Source CanSeek CanSeek always returns true, unless the stream has been closed. Declaration public override bool CanSeek { get; } Property Value Type Description System.Boolean Overrides System.IO.Stream.CanSeek | Improve this Doc View Source CanTimeout CanTimeout always returns false. Declaration public override bool CanTimeout { get; } Property Value Type Description System.Boolean Overrides System.IO.Stream.CanTimeout | Improve this Doc View Source CanWrite CanWrite returns true if the stream was opened with write permissions, and the stream has not been closed. Declaration public override bool CanWrite { get; } Property Value Type Description System.Boolean Overrides System.IO.Stream.CanWrite | Improve this Doc View Source Has64BitSupport Since PostgreSQL 9.3, large objects larger than 2GB can be handled, up to 4TB. This property returns true whether the PostgreSQL version is >= 9.3. Declaration public bool Has64BitSupport { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Length Gets the length of the large object. This internally seeks to the end of the stream to retrieve the length, and then back again. Declaration public override long Length { get; } Property Value Type Description System.Int64 Overrides System.IO.Stream.Length | Improve this Doc View Source Position Returns the current position in the stream. Getting the current position does not need a round-trip to the server, however setting the current position does. Declaration public override long Position { get; set; } Property Value Type Description System.Int64 Overrides System.IO.Stream.Position Methods | Improve this Doc View Source Close() Releases resources at the backend allocated for this stream. Declaration public override void Close() Overrides System.IO.Stream.Close() | Improve this Doc View Source Dispose(Boolean) Releases resources at the backend allocated for this stream, iff disposing is true. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Whether to release resources allocated at the backend. Overrides System.IO.Stream.Dispose(System.Boolean) | Improve this Doc View Source Flush() Does nothing. Declaration public override void Flush() Overrides System.IO.Stream.Flush() | Improve this Doc View Source FlushAsync(CancellationToken) Declaration public Task FlushAsync(CancellationToken cancellationToken) Parameters Type Name Description System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source Read(Byte[], Int32, Int32) Reads count bytes from the large object. The only case when fewer bytes are read is when end of stream is reached. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description System.Byte [] buffer The buffer where read data should be stored. System.Int32 offset The offset in the buffer where the first byte should be read. System.Int32 count The maximum number of bytes that should be read. Returns Type Description System.Int32 How many bytes actually read, or 0 if end of file was already reached. Overrides System.IO.Stream.Read(System.Byte[], System.Int32, System.Int32) | Improve this Doc View Source ReadAsync(Byte[], Int32, Int32, CancellationToken) Declaration public Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description System.Byte [] buffer System.Int32 offset System.Int32 count System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < System.Int32 > | Improve this Doc View Source Seek(Int64, SeekOrigin) Seeks in the stream to the specified position. This requires a round-trip to the backend. Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description System.Int64 offset A byte offset relative to the origin parameter. System.IO.SeekOrigin origin A value of type SeekOrigin indicating the reference point used to obtain the new position. Returns Type Description System.Int64 Overrides System.IO.Stream.Seek(System.Int64, System.IO.SeekOrigin) | Improve this Doc View Source SeekAsync(Int64, SeekOrigin, CancellationToken) Declaration public Task<long> SeekAsync(long offset, SeekOrigin origin, CancellationToken cancellationToken) Parameters Type Name Description System.Int64 offset System.IO.SeekOrigin origin System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task < System.Int64 > | Improve this Doc View Source SetLength(Int64) Truncates or enlarges the large object to the given size. If enlarging, the large object is extended with null bytes. For PostgreSQL versions earlier than 9.3, the value must fit in an Int32. Declaration public override void SetLength(long value) Parameters Type Name Description System.Int64 value Number of bytes to either truncate or enlarge the large object. Overrides System.IO.Stream.SetLength(System.Int64) | Improve this Doc View Source SetLengthAsync(Int64, CancellationToken) Declaration public Task SetLengthAsync(long value, CancellationToken cancellationToken) Parameters Type Name Description System.Int64 value System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task | Improve this Doc View Source Write(Byte[], Int32, Int32) Writes count bytes to the large object. Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description System.Byte [] buffer The buffer to write data from. System.Int32 offset The offset in the buffer at which to begin copying bytes. System.Int32 count The number of bytes to write. Overrides System.IO.Stream.Write(System.Byte[], System.Int32, System.Int32) | Improve this Doc View Source WriteAsync(Byte[], Int32, Int32, CancellationToken) Declaration public Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken) Parameters Type Name Description System.Byte [] buffer System.Int32 offset System.Int32 count System.Threading.CancellationToken cancellationToken Returns Type Description System.Threading.Tasks.Task"
  },
  "api/Npgsql.NpgsqlNoticeEventArgs.html": {
    "href": "api/Npgsql.NpgsqlNoticeEventArgs.html",
    "title": "Class NpgsqlNoticeEventArgs | Npgsql Documentation",
    "keywords": "Class NpgsqlNoticeEventArgs Provides data for a notice event. Inheritance System.Object System.EventArgs NpgsqlNoticeEventArgs Inherited Members System.EventArgs.Empty System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Npgsql Assembly :Npgsql.dll Syntax public class NpgsqlNoticeEventArgs : EventArgs Properties | Improve this Doc View Source Notice The Notice that was sent from the database. Declaration public PostgresNotice Notice { get; } Property Value Type Description PostgresNotice"
  },
  "api/Npgsql.NpgsqlNotificationEventArgs.html": {
    "href": "api/Npgsql.NpgsqlNotificationEventArgs.html",
    "title": "Class NpgsqlNotificationEventArgs | Npgsql Documentation",
    "keywords": "Class NpgsqlNotificationEventArgs EventArgs class to send Notification parameters. Inheritance System.Object System.EventArgs NpgsqlNotificationEventArgs Inherited Members System.EventArgs.Empty System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Npgsql Assembly :Npgsql.dll Syntax public class NpgsqlNotificationEventArgs : EventArgs Fields | Improve this Doc View Source AdditionalInformation Additional information. Declaration public readonly string AdditionalInformation Field Value Type Description System.String | Improve this Doc View Source Condition Condition that triggered that notification. Declaration public readonly string Condition Field Value Type Description System.String | Improve this Doc View Source PID Process ID of the PostgreSQL backend that sent this notification. Declaration public readonly int PID Field Value Type Description System.Int32"
  },
  "api/Npgsql.NpgsqlParameter.html": {
    "href": "api/Npgsql.NpgsqlParameter.html",
    "title": "Class NpgsqlParameter | Npgsql Documentation",
    "keywords": "Class NpgsqlParameter This class represents a parameter to a command that will be sent to server Inheritance System.Object System.MarshalByRefObject System.Data.Common.DbParameter NpgsqlParameter Inherited Members System.Data.Common.DbParameter.System.Data.IDbDataParameter.Precision System.Data.Common.DbParameter.System.Data.IDbDataParameter.Scale System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.CreateObjRef(System.Type) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Npgsql Assembly :Npgsql.dll Syntax public sealed class NpgsqlParameter : DbParameter, IDbDataParameter, IDataParameter, ICloneable Constructors | Improve this Doc View Source NpgsqlParameter() Initializes a new instance of the NpgsqlParameter class. Declaration public NpgsqlParameter() | Improve this Doc View Source NpgsqlParameter(String, NpgsqlDbType) Initializes a new instance of the NpgsqlParameter class with the parameter name and the data type. Declaration public NpgsqlParameter(string parameterName, NpgsqlDbType parameterType) Parameters Type Name Description System.String parameterName The name of the parameter to map. NpgsqlDbType parameterType One of the System.Data.DbType values. | Improve this Doc View Source NpgsqlParameter(String, NpgsqlDbType, Int32) Initializes a new instance of the NpgsqlParameter . Declaration public NpgsqlParameter(string parameterName, NpgsqlDbType parameterType, int size) Parameters Type Name Description System.String parameterName The name of the parameter to map. NpgsqlDbType parameterType One of the NpgsqlDbType values. System.Int32 size The length of the parameter. | Improve this Doc View Source NpgsqlParameter(String, NpgsqlDbType, Int32, String) Initializes a new instance of the NpgsqlParameter Declaration public NpgsqlParameter(string parameterName, NpgsqlDbType parameterType, int size, string sourceColumn) Parameters Type Name Description System.String parameterName The name of the parameter to map. NpgsqlDbType parameterType One of the NpgsqlDbType values. System.Int32 size The length of the parameter. System.String sourceColumn The name of the source column. | Improve this Doc View Source NpgsqlParameter(String, NpgsqlDbType, Int32, String, ParameterDirection, Boolean, Byte, Byte, DataRowVersion, Object) Initializes a new instance of the NpgsqlParameter . Declaration public NpgsqlParameter(string parameterName, NpgsqlDbType parameterType, int size, string sourceColumn, ParameterDirection direction, bool isNullable, byte precision, byte scale, DataRowVersion sourceVersion, object value) Parameters Type Name Description System.String parameterName The name of the parameter to map. NpgsqlDbType parameterType One of the NpgsqlDbType values. System.Int32 size The length of the parameter. System.String sourceColumn The name of the source column. System.Data.ParameterDirection direction One of the System.Data.ParameterDirection values. System.Boolean isNullable true if the value of the field can be null, otherwise false . System.Byte precision The total number of digits to the left and right of the decimal point to which Value is resolved. System.Byte scale The total number of decimal places to which Value is resolved. System.Data.DataRowVersion sourceVersion One of the System.Data.DataRowVersion values. System.Object value An System.Object that is the value of the NpgsqlParameter . | Improve this Doc View Source NpgsqlParameter(String, DbType) Initializes a new instance of the NpgsqlParameter . Declaration public NpgsqlParameter(string parameterName, DbType parameterType) Parameters Type Name Description System.String parameterName The name of the parameter to map. System.Data.DbType parameterType One of the System.Data.DbType values. | Improve this Doc View Source NpgsqlParameter(String, DbType, Int32) Initializes a new instance of the NpgsqlParameter . Declaration public NpgsqlParameter(string parameterName, DbType parameterType, int size) Parameters Type Name Description System.String parameterName The name of the parameter to map. System.Data.DbType parameterType One of the System.Data.DbType values. System.Int32 size The length of the parameter. | Improve this Doc View Source NpgsqlParameter(String, DbType, Int32, String) Initializes a new instance of the NpgsqlParameter . Declaration public NpgsqlParameter(string parameterName, DbType parameterType, int size, string sourceColumn) Parameters Type Name Description System.String parameterName The name of the parameter to map. System.Data.DbType parameterType One of the System.Data.DbType values. System.Int32 size The length of the parameter. System.String sourceColumn The name of the source column. | Improve this Doc View Source NpgsqlParameter(String, DbType, Int32, String, ParameterDirection, Boolean, Byte, Byte, DataRowVersion, Object) Initializes a new instance of the NpgsqlParameter . Declaration public NpgsqlParameter(string parameterName, DbType parameterType, int size, string sourceColumn, ParameterDirection direction, bool isNullable, byte precision, byte scale, DataRowVersion sourceVersion, object value) Parameters Type Name Description System.String parameterName The name of the parameter to map. System.Data.DbType parameterType One of the System.Data.DbType values. System.Int32 size The length of the parameter. System.String sourceColumn The name of the source column. System.Data.ParameterDirection direction One of the System.Data.ParameterDirection values. System.Boolean isNullable true if the value of the field can be null, otherwise false . System.Byte precision The total number of digits to the left and right of the decimal point to which Value is resolved. System.Byte scale The total number of decimal places to which Value is resolved. System.Data.DataRowVersion sourceVersion One of the System.Data.DataRowVersion values. System.Object value An System.Object that is the value of the NpgsqlParameter . | Improve this Doc View Source NpgsqlParameter(String, Object) Initializes a new instance of the NpgsqlParameter class with the parameter name and a value of the new NpgsqlParameter . Declaration public NpgsqlParameter(string parameterName, object value) Parameters Type Name Description System.String parameterName The name of the parameter to map. System.Object value An System.Object that is the value of the NpgsqlParameter . Remarks When you specify an System.Object in the value parameter, the System.Data.DbType is inferred from the .NET Framework type of the Object . When using this constructor, you must be aware of a possible misuse of the constructor which takes a DbType parameter. This happens when calling this constructor passing an int 0 and the compiler thinks you are passing a value of DbType. Use Convert.ToInt32(value) for example to have compiler calling the correct constructor. Properties | Improve this Doc View Source Collection The collection to which this parameter belongs, if any. Declaration public NpgsqlParameterCollection Collection { get; set; } Property Value Type Description NpgsqlParameterCollection | Improve this Doc View Source DbType Gets or sets the System.Data.DbType of the parameter. Declaration public override DbType DbType { get; set; } Property Value Type Description System.Data.DbType One of the System.Data.DbType values. The default is Object . Overrides System.Data.Common.DbParameter.DbType | Improve this Doc View Source Direction Gets or sets a value indicating whether the parameter is input-only, output-only, bidirectional, or a stored procedure return value parameter. Declaration public override ParameterDirection Direction { get; set; } Property Value Type Description System.Data.ParameterDirection One of the System.Data.ParameterDirection values. The default is Input . Overrides System.Data.Common.DbParameter.Direction | Improve this Doc View Source EnumType Used in combination with NpgsqlDbType.Enum or NpgsqlDbType.Array | NpgsqlDbType.Enum to indicate the enum type. For other NpgsqlDbTypes, this field is not used. Declaration [Obsolete(\"Use the SpecificType property instead\")] public Type EnumType { get; set; } Property Value Type Description System.Type | Improve this Doc View Source IsNullable Gets or sets a value that indicates whether the parameter accepts null values. Declaration public override bool IsNullable { get; set; } Property Value Type Description System.Boolean Overrides System.Data.Common.DbParameter.IsNullable | Improve this Doc View Source NpgsqlDbType Gets or sets the NpgsqlDbType of the parameter. Declaration public NpgsqlDbType NpgsqlDbType { get; set; } Property Value Type Description NpgsqlDbType One of the NpgsqlDbType values. The default is Unknown . | Improve this Doc View Source NpgsqlValue Gets or sets the value of the parameter. Declaration [TypeConverter(typeof (StringConverter))] public object NpgsqlValue { get; set; } Property Value Type Description System.Object An System.Object that is the value of the parameter. The default value is null. | Improve this Doc View Source ParameterName Gets or sets The name of the NpgsqlParameter . Declaration public override string ParameterName { get; set; } Property Value Type Description System.String The name of the NpgsqlParameter . The default is an empty string. Overrides System.Data.Common.DbParameter.ParameterName | Improve this Doc View Source Precision Gets or sets the maximum number of digits used to represent the Value property. Declaration public override byte Precision { get; set; } Property Value Type Description System.Byte The maximum number of digits used to represent the Value property. The default value is 0, which indicates that the data provider sets the precision for Value . Overrides System.Data.Common.DbParameter.Precision | Improve this Doc View Source Scale Gets or sets the number of decimal places to which Value is resolved. Declaration public override byte Scale { get; set; } Property Value Type Description System.Byte The number of decimal places to which Value is resolved. The default is 0. Overrides System.Data.Common.DbParameter.Scale | Improve this Doc View Source Size Gets or sets the maximum size, in bytes, of the data within the column. Declaration public override int Size { get; set; } Property Value Type Description System.Int32 The maximum size, in bytes, of the data within the column. The default value is inferred from the parameter value. Overrides System.Data.Common.DbParameter.Size | Improve this Doc View Source SourceColumn Gets or sets The name of the source column that is mapped to the DataSet and used for loading or returning the Value . Declaration public override string SourceColumn { get; set; } Property Value Type Description System.String The name of the source column that is mapped to the DataSet. The default is an empty string. Overrides System.Data.Common.DbParameter.SourceColumn | Improve this Doc View Source SourceColumnNullMapping Source column mapping. Declaration public override bool SourceColumnNullMapping { get; set; } Property Value Type Description System.Boolean Overrides System.Data.Common.DbParameter.SourceColumnNullMapping | Improve this Doc View Source SourceVersion Gets or sets the System.Data.DataRowVersion to use when loading Value . Declaration public override DataRowVersion SourceVersion { get; set; } Property Value Type Description System.Data.DataRowVersion One of the System.Data.DataRowVersion values. The default is Current . Overrides System.Data.Common.DbParameter.SourceVersion | Improve this Doc View Source SpecificType Used in combination with NpgsqlDbType.Enum or NpgsqlDbType.Composite to indicate the specific enum or composite type. For other NpgsqlDbTypes, this field is not used. Declaration public Type SpecificType { get; set; } Property Value Type Description System.Type | Improve this Doc View Source Value Gets or sets the value of the parameter. Declaration [TypeConverter(typeof (StringConverter))] public override object Value { get; set; } Property Value Type Description System.Object An System.Object that is the value of the parameter. The default value is null. Overrides System.Data.Common.DbParameter.Value Methods | Improve this Doc View Source Clone() Creates a new NpgsqlParameter that is a copy of the current instance. Declaration public NpgsqlParameter Clone() Returns Type Description NpgsqlParameter A new NpgsqlParameter that is a copy of this instance. | Improve this Doc View Source ResetDbType() Reset DBType. Declaration public override void ResetDbType() Overrides System.Data.Common.DbParameter.ResetDbType() Explicit Interface Implementations | Improve this Doc View Source ICloneable.Clone() Declaration object ICloneable.Clone() Returns Type Description System.Object Implements System.ICloneable.Clone()"
  },
  "api/Npgsql.NpgsqlParameterCollection.html": {
    "href": "api/Npgsql.NpgsqlParameterCollection.html",
    "title": "Class NpgsqlParameterCollection | Npgsql Documentation",
    "keywords": "Class NpgsqlParameterCollection Represents a collection of parameters relevant to a NpgsqlCommand as well as their respective mappings to columns in a DataSet. This class cannot be inherited. Inheritance System.Object System.MarshalByRefObject System.Data.Common.DbParameterCollection NpgsqlParameterCollection Inherited Members System.Data.Common.DbParameterCollection.System.Collections.IList.get_Item(System.Int32) System.Data.Common.DbParameterCollection.System.Collections.IList.set_Item(System.Int32, System.Object) System.Data.Common.DbParameterCollection.System.Data.IDataParameterCollection.get_Item(System.String) System.Data.Common.DbParameterCollection.System.Data.IDataParameterCollection.set_Item(System.String, System.Object) System.Data.Common.DbParameterCollection.System.Collections.IList.Item[System.Int32] System.Data.Common.DbParameterCollection.System.Data.IDataParameterCollection.Item[System.String] System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.CreateObjRef(System.Type) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Npgsql Assembly :Npgsql.dll Syntax public sealed class NpgsqlParameterCollection : DbParameterCollection, IDataParameterCollection, IList, ICollection, IEnumerable<NpgsqlParameter>, IEnumerable Properties | Improve this Doc View Source Count Gets the number of NpgsqlParameter objects in the collection. Declaration public override int Count { get; } Property Value Type Description System.Int32 The number of NpgsqlParameter objects in the collection. Overrides System.Data.Common.DbParameterCollection.Count | Improve this Doc View Source IsFixedSize Report whether the collection is fixed size. Always false. Declaration public override bool IsFixedSize { get; } Property Value Type Description System.Boolean Overrides System.Data.Common.DbParameterCollection.IsFixedSize | Improve this Doc View Source IsReadOnly Report whether the collection is read only. Always false. Declaration public override bool IsReadOnly { get; } Property Value Type Description System.Boolean Overrides System.Data.Common.DbParameterCollection.IsReadOnly | Improve this Doc View Source IsSynchronized Report whether the collection is synchronized. Declaration public override bool IsSynchronized { get; } Property Value Type Description System.Boolean Overrides System.Data.Common.DbParameterCollection.IsSynchronized | Improve this Doc View Source Item[Int32] Gets the NpgsqlParameter at the specified index. Declaration public NpgsqlParameter this[int index] { get; set; } Parameters Type Name Description System.Int32 index The zero-based index of the NpgsqlParameter to retrieve. Property Value Type Description NpgsqlParameter The NpgsqlParameter at the specified index. | Improve this Doc View Source Item[String] Gets the NpgsqlParameter with the specified name. Declaration public NpgsqlParameter this[string parameterName] { get; set; } Parameters Type Name Description System.String parameterName The name of the NpgsqlParameter to retrieve. Property Value Type Description NpgsqlParameter The NpgsqlParameter with the specified name, or a null reference if the parameter is not found. | Improve this Doc View Source SyncRoot Sync root. Declaration public override object SyncRoot { get; } Property Value Type Description System.Object Overrides System.Data.Common.DbParameterCollection.SyncRoot Methods | Improve this Doc View Source Add(NpgsqlParameter) Adds the specified NpgsqlParameter object to the NpgsqlParameterCollection . Declaration public NpgsqlParameter Add(NpgsqlParameter value) Parameters Type Name Description NpgsqlParameter value The NpgsqlParameter to add to the collection. Returns Type Description NpgsqlParameter The index of the new NpgsqlParameter object. | Improve this Doc View Source Add(Object) Adds the specified NpgsqlParameter object to the NpgsqlParameterCollection . Declaration public override int Add(object value) Parameters Type Name Description System.Object value The NpgsqlParameter to add to the collection. Returns Type Description System.Int32 The zero-based index of the new NpgsqlParameter object. Overrides System.Data.Common.DbParameterCollection.Add(System.Object) | Improve this Doc View Source Add(String, NpgsqlDbType) Adds a NpgsqlParameter to the NpgsqlParameterCollection given the parameter name and the data type. Declaration public NpgsqlParameter Add(string parameterName, NpgsqlDbType parameterType) Parameters Type Name Description System.String parameterName The name of the parameter. NpgsqlDbType parameterType One of the DbType values. Returns Type Description NpgsqlParameter The index of the new NpgsqlParameter object. | Improve this Doc View Source Add(String, NpgsqlDbType, Int32) Adds a NpgsqlParameter to the NpgsqlParameterCollection with the parameter name, the data type, and the column length. Declaration public NpgsqlParameter Add(string parameterName, NpgsqlDbType parameterType, int size) Parameters Type Name Description System.String parameterName The name of the parameter. NpgsqlDbType parameterType One of the DbType values. System.Int32 size The length of the column. Returns Type Description NpgsqlParameter The index of the new NpgsqlParameter object. | Improve this Doc View Source Add(String, NpgsqlDbType, Int32, String) Adds a NpgsqlParameter to the NpgsqlParameterCollection with the parameter name, the data type, the column length, and the source column name. Declaration public NpgsqlParameter Add(string parameterName, NpgsqlDbType parameterType, int size, string sourceColumn) Parameters Type Name Description System.String parameterName The name of the parameter. NpgsqlDbType parameterType One of the DbType values. System.Int32 size The length of the column. System.String sourceColumn The name of the source column. Returns Type Description NpgsqlParameter The index of the new NpgsqlParameter object. | Improve this Doc View Source AddRange(Array) Add an Array of parameters to the collection. Declaration public override void AddRange(Array values) Parameters Type Name Description System.Array values Parameters to add. Overrides System.Data.Common.DbParameterCollection.AddRange(System.Array) | Improve this Doc View Source AddWithValue(NpgsqlDbType, Object) Adds a NpgsqlParameter to the NpgsqlParameterCollection given the specified data type and value. Declaration public NpgsqlParameter AddWithValue(NpgsqlDbType parameterType, object value) Parameters Type Name Description NpgsqlDbType parameterType One of the NpgsqlDbType values. System.Object value The Value of the NpgsqlParameter to add to the collection. Returns Type Description NpgsqlParameter The paramater that was added. | Improve this Doc View Source AddWithValue(Object) Adds a NpgsqlParameter to the NpgsqlParameterCollection given the specified value. Declaration public NpgsqlParameter AddWithValue(object value) Parameters Type Name Description System.Object value The Value of the NpgsqlParameter to add to the collection. Returns Type Description NpgsqlParameter The paramater that was added. | Improve this Doc View Source AddWithValue(String, NpgsqlDbType, Int32, Object) Adds a NpgsqlParameter to the NpgsqlParameterCollection given the specified parameter name and value. Declaration public NpgsqlParameter AddWithValue(string parameterName, NpgsqlDbType parameterType, int size, object value) Parameters Type Name Description System.String parameterName The name of the NpgsqlParameter . NpgsqlDbType parameterType One of the NpgsqlDbType values. System.Int32 size The length of the column. System.Object value The Value of the NpgsqlParameter to add to the collection. Returns Type Description NpgsqlParameter The paramater that was added. | Improve this Doc View Source AddWithValue(String, NpgsqlDbType, Int32, String, Object) Adds a NpgsqlParameter to the NpgsqlParameterCollection given the specified parameter name and value. Declaration public NpgsqlParameter AddWithValue(string parameterName, NpgsqlDbType parameterType, int size, string sourceColumn, object value) Parameters Type Name Description System.String parameterName The name of the NpgsqlParameter . NpgsqlDbType parameterType One of the NpgsqlDbType values. System.Int32 size The length of the column. System.String sourceColumn The name of the source column. System.Object value The Value of the NpgsqlParameter to add to the collection. Returns Type Description NpgsqlParameter The paramater that was added. | Improve this Doc View Source AddWithValue(String, NpgsqlDbType, Object) Adds a NpgsqlParameter to the NpgsqlParameterCollection given the specified parameter name, data type and value. Declaration public NpgsqlParameter AddWithValue(string parameterName, NpgsqlDbType parameterType, object value) Parameters Type Name Description System.String parameterName The name of the NpgsqlParameter . NpgsqlDbType parameterType One of the NpgsqlDbType values. System.Object value The Value of the NpgsqlParameter to add to the collection. Returns Type Description NpgsqlParameter The paramater that was added. | Improve this Doc View Source AddWithValue(String, Object) Adds a NpgsqlParameter to the NpgsqlParameterCollection given the specified parameter name and value. Declaration public NpgsqlParameter AddWithValue(string parameterName, object value) Parameters Type Name Description System.String parameterName The name of the NpgsqlParameter . System.Object value The Value of the NpgsqlParameter to add to the collection. Returns Type Description NpgsqlParameter The paramater that was added. | Improve this Doc View Source Clear() Removes all items from the collection. Declaration public override void Clear() Overrides System.Data.Common.DbParameterCollection.Clear() | Improve this Doc View Source Contains(NpgsqlParameter) Report whether the specified parameter is present in the collection. Declaration public bool Contains(NpgsqlParameter item) Parameters Type Name Description NpgsqlParameter item Parameter to find. Returns Type Description System.Boolean True if the parameter was found, otherwise false. | Improve this Doc View Source Contains(Object) Gets a value indicating whether a NpgsqlParameter exists in the collection. Declaration public override bool Contains(object value) Parameters Type Name Description System.Object value The value of the NpgsqlParameter object to find. Returns Type Description System.Boolean true if the collection contains the NpgsqlParameter object; otherwise, false. Overrides System.Data.Common.DbParameterCollection.Contains(System.Object) | Improve this Doc View Source Contains(String) Gets a value indicating whether a NpgsqlParameter with the specified parameter name exists in the collection. Declaration public override bool Contains(string parameterName) Parameters Type Name Description System.String parameterName The name of the NpgsqlParameter object to find. Returns Type Description System.Boolean true if the collection contains the parameter; otherwise, false . Overrides System.Data.Common.DbParameterCollection.Contains(System.String) | Improve this Doc View Source CopyTo(NpgsqlParameter[], Int32) Convert collection to a System.Array. Declaration public void CopyTo(NpgsqlParameter[] array, int arrayIndex) Parameters Type Name Description NpgsqlParameter [] array Destination array. System.Int32 arrayIndex Starting index in destination array. | Improve this Doc View Source CopyTo(Array, Int32) Copies NpgsqlParameter objects from the NpgsqlParameterCollection to the specified array. Declaration public override void CopyTo(Array array, int index) Parameters Type Name Description System.Array array An System.Array to which to copy the NpgsqlParameter objects in the collection. System.Int32 index The starting index of the array. Overrides System.Data.Common.DbParameterCollection.CopyTo(System.Array, System.Int32) | Improve this Doc View Source GetEnumerator() Returns an enumerator that can iterate through the collection. Declaration public override IEnumerator GetEnumerator() Returns Type Description System.Collections.IEnumerator An System.Collections.IEnumerator that can be used to iterate through the collection. Overrides System.Data.Common.DbParameterCollection.GetEnumerator() Implements System.Collections.IEnumerable.GetEnumerator() | Improve this Doc View Source GetParameter(Int32) Get parameter. Declaration protected override DbParameter GetParameter(int index) Parameters Type Name Description System.Int32 index Returns Type Description System.Data.Common.DbParameter Overrides System.Data.Common.DbParameterCollection.GetParameter(System.Int32) | Improve this Doc View Source GetParameter(String) Get parameter. Declaration protected override DbParameter GetParameter(string parameterName) Parameters Type Name Description System.String parameterName Returns Type Description System.Data.Common.DbParameter Overrides System.Data.Common.DbParameterCollection.GetParameter(System.String) | Improve this Doc View Source IndexOf(NpgsqlParameter) Report the offset within the collection of the given parameter. Declaration public int IndexOf(NpgsqlParameter item) Parameters Type Name Description NpgsqlParameter item Parameter to find. Returns Type Description System.Int32 Index of the parameter, or -1 if the parameter is not present. | Improve this Doc View Source IndexOf(Object) Gets the location of a NpgsqlParameter in the collection. Declaration public override int IndexOf(object value) Parameters Type Name Description System.Object value The value of the NpgsqlParameter object to find. Returns Type Description System.Int32 The zero-based index of the NpgsqlParameter object in the collection. Overrides System.Data.Common.DbParameterCollection.IndexOf(System.Object) | Improve this Doc View Source IndexOf(String) Gets the location of the NpgsqlParameter in the collection with a specific parameter name. Declaration public override int IndexOf(string parameterName) Parameters Type Name Description System.String parameterName The name of the NpgsqlParameter object to find. Returns Type Description System.Int32 The zero-based location of the NpgsqlParameter in the collection. Overrides System.Data.Common.DbParameterCollection.IndexOf(System.String) | Improve this Doc View Source Insert(Int32, NpgsqlParameter) Insert the specified parameter into the collection. Declaration public void Insert(int index, NpgsqlParameter item) Parameters Type Name Description System.Int32 index Index of the existing parameter before which to insert the new one. NpgsqlParameter item Parameter to insert. | Improve this Doc View Source Insert(Int32, Object) Inserts a NpgsqlParameter into the collection at the specified index. Declaration public override void Insert(int index, object oValue) Parameters Type Name Description System.Int32 index The zero-based index where the parameter is to be inserted within the collection. System.Object oValue The NpgsqlParameter to add to the collection. Overrides System.Data.Common.DbParameterCollection.Insert(System.Int32, System.Object) | Improve this Doc View Source Remove(NpgsqlParameter) Remove the specified parameter from the collection. Declaration public bool Remove(NpgsqlParameter item) Parameters Type Name Description NpgsqlParameter item Parameter to remove. Returns Type Description System.Boolean True if the parameter was found and removed, otherwise false. | Improve this Doc View Source Remove(Object) Removes the specified NpgsqlParameter from the collection. Declaration public override void Remove(object oValue) Parameters Type Name Description System.Object oValue The NpgsqlParameter to remove from the collection. Overrides System.Data.Common.DbParameterCollection.Remove(System.Object) | Improve this Doc View Source Remove(String) Removes the specified NpgsqlParameter from the collection. Declaration public void Remove(string parameterName) Parameters Type Name Description System.String parameterName The name of the NpgsqlParameter to remove from the collection. | Improve this Doc View Source RemoveAt(Int32) Removes the specified NpgsqlParameter from the collection using a specific index. Declaration public override void RemoveAt(int index) Parameters Type Name Description System.Int32 index The zero-based index of the parameter. Overrides System.Data.Common.DbParameterCollection.RemoveAt(System.Int32) | Improve this Doc View Source RemoveAt(String) Removes the specified NpgsqlParameter from the collection using the parameter name. Declaration public override void RemoveAt(string parameterName) Parameters Type Name Description System.String parameterName The name of the NpgsqlParameter object to retrieve. Overrides System.Data.Common.DbParameterCollection.RemoveAt(System.String) | Improve this Doc View Source SetParameter(Int32, DbParameter) Set parameter. Declaration protected override void SetParameter(int index, DbParameter value) Parameters Type Name Description System.Int32 index System.Data.Common.DbParameter value Overrides System.Data.Common.DbParameterCollection.SetParameter(System.Int32, System.Data.Common.DbParameter) | Improve this Doc View Source SetParameter(String, DbParameter) Set parameter. Declaration protected override void SetParameter(string parameterName, DbParameter value) Parameters Type Name Description System.String parameterName System.Data.Common.DbParameter value Overrides System.Data.Common.DbParameterCollection.SetParameter(System.String, System.Data.Common.DbParameter) | Improve this Doc View Source ToArray() Convert collection to a System.Array. Declaration public NpgsqlParameter[] ToArray() Returns Type Description NpgsqlParameter [] NpgsqlParameter[] | Improve this Doc View Source TryGetValue(String, out NpgsqlParameter) Gets a value indicating whether a NpgsqlParameter with the specified parameter name exists in the collection. Declaration public bool TryGetValue(string parameterName, out NpgsqlParameter parameter) Parameters Type Name Description System.String parameterName The name of the NpgsqlParameter object to find. NpgsqlParameter parameter A reference to the requested parameter is returned in this out param if it is found in the list. This value is null if the parameter is not found. Returns Type Description System.Boolean true if the collection contains the parameter and param will contain the parameter; otherwise, false . Explicit Interface Implementations | Improve this Doc View Source IEnumerable<NpgsqlParameter>.GetEnumerator() Declaration IEnumerator<NpgsqlParameter> IEnumerable<NpgsqlParameter>.GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < NpgsqlParameter > Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator()"
  },
  "api/Npgsql.NpgsqlRawCopyStream.html": {
    "href": "api/Npgsql.NpgsqlRawCopyStream.html",
    "title": "Class NpgsqlRawCopyStream | Npgsql Documentation",
    "keywords": "Class NpgsqlRawCopyStream Provides an API for a raw binary COPY operation, a high-performance data import/export mechanism to a PostgreSQL table. Initiated by BeginRawBinaryCopy(String) Inheritance System.Object System.MarshalByRefObject System.IO.Stream NpgsqlRawCopyStream Inherited Members System.IO.Stream.Null System.IO.Stream.CopyToAsync(System.IO.Stream) System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32) System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32, System.Threading.CancellationToken) System.IO.Stream.CopyTo(System.IO.Stream) System.IO.Stream.CopyTo(System.IO.Stream, System.Int32) System.IO.Stream.Close() System.IO.Stream.Dispose() System.IO.Stream.FlushAsync() System.IO.Stream.FlushAsync(System.Threading.CancellationToken) System.IO.Stream.CreateWaitHandle() System.IO.Stream.BeginRead(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object) System.IO.Stream.EndRead(System.IAsyncResult) System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32) System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken) System.IO.Stream.BeginWrite(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object) System.IO.Stream.EndWrite(System.IAsyncResult) System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32) System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken) System.IO.Stream.ReadByte() System.IO.Stream.WriteByte(System.Byte) System.IO.Stream.Synchronized(System.IO.Stream) System.IO.Stream.ObjectInvariant() System.IO.Stream.CanTimeout System.IO.Stream.ReadTimeout System.IO.Stream.WriteTimeout System.MarshalByRefObject.MemberwiseClone(System.Boolean) System.MarshalByRefObject.GetLifetimeService() System.MarshalByRefObject.InitializeLifetimeService() System.MarshalByRefObject.CreateObjRef(System.Type) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace :Npgsql Assembly :Npgsql.dll Syntax public class NpgsqlRawCopyStream : Stream, ICancelable, IDisposable Remarks See http://www.postgresql.org/docs/current/static/sql-copy.html . Properties | Improve this Doc View Source CanRead Declaration public override bool CanRead { get; } Property Value Type Description System.Boolean Overrides System.IO.Stream.CanRead | Improve this Doc View Source CanSeek Declaration public override bool CanSeek { get; } Property Value Type Description System.Boolean Overrides System.IO.Stream.CanSeek | Improve this Doc View Source CanWrite Declaration public override bool CanWrite { get; } Property Value Type Description System.Boolean Overrides System.IO.Stream.CanWrite | Improve this Doc View Source Length Declaration public override long Length { get; } Property Value Type Description System.Int64 Overrides System.IO.Stream.Length | Improve this Doc View Source Position Declaration public override long Position { get; set; } Property Value Type Description System.Int64 Overrides System.IO.Stream.Position Methods | Improve this Doc View Source Cancel() Cancels and terminates an ongoing operation. Any data already written will be discarded. Declaration public void Cancel() | Improve this Doc View Source Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides System.IO.Stream.Dispose(System.Boolean) | Improve this Doc View Source Flush() Declaration public override void Flush() Overrides System.IO.Stream.Flush() | Improve this Doc View Source Read(Byte[], Int32, Int32) Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description System.Byte [] buffer System.Int32 offset System.Int32 count Returns Type Description System.Int32 Overrides System.IO.Stream.Read(System.Byte[], System.Int32, System.Int32) | Improve this Doc View Source Seek(Int64, SeekOrigin) Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description System.Int64 offset System.IO.SeekOrigin origin Returns Type Description System.Int64 Overrides System.IO.Stream.Seek(System.Int64, System.IO.SeekOrigin) | Improve this Doc View Source SetLength(Int64) Declaration public override void SetLength(long value) Parameters Type Name Description System.Int64 value Overrides System.IO.Stream.SetLength(System.Int64) | Improve this Doc View Source Write(Byte[], Int32, Int32) Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description System.Byte [] buffer System.Int32 offset System.Int32 count Overrides System.IO.Stream.Write(System.Byte[], System.Int32, System.Int32)"
  }
}